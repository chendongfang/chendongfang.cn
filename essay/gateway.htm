<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>gateway-陈东方</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:黑体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Open Sans";
	panose-1:2 11 6 6 3 5 4 2 2 4;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:微软雅黑;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"\@微软雅黑";}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@黑体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h2
	{margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:172%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h3
	{margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:172%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h4
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:155%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h5
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:155%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:63.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:84.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"正文文本 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyTextFirstIndent, li.MsoBodyTextFirstIndent, div.MsoBodyTextFirstIndent
	{mso-style-link:"正文文本首行缩进 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
code
	{font-family:"Courier New";}
pre
	{mso-style-link:"HTML 预设格式 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.WPSOffice1, li.WPSOffice1, div.WPSOffice1
	{mso-style-name:"WPSOffice手动目录 1";
	margin:0cm;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;}
p.WPSOffice2, li.WPSOffice2, div.WPSOffice2
	{mso-style-name:"WPSOffice手动目录 2";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:10.0pt;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;}
p.WPSOffice3, li.WPSOffice3, div.WPSOffice3
	{mso-style-name:"WPSOffice手动目录 3";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:20.0pt;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;}
span.a
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Calibri",sans-serif;}
span.a0
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Calibri",sans-serif;}
span.HTML
	{mso-style-name:"HTML 预设格式 字符";
	mso-style-link:"HTML 预设格式";
	font-family:宋体;}
span.tag
	{mso-style-name:tag;}
span.pln
	{mso-style-name:pln;}
span.atn
	{mso-style-name:atn;}
span.pun
	{mso-style-name:pun;}
span.atv
	{mso-style-name:atv;}
span.kwd
	{mso-style-name:kwd;}
span.typ
	{mso-style-name:typ;}
p.COR-, li.COR-, div.COR-
	{mso-style-name:COR-代码;
	mso-style-link:"COR-代码 Char";
	margin-top:7.8pt;
	margin-right:0cm;
	margin-bottom:7.8pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:12.0pt;
	background:#E6E6E6;
	word-break:break-all;
	font-size:10.5pt;
	font-family:"Courier New";}
span.COR-Char
	{mso-style-name:"COR-代码 Char";
	mso-style-link:COR-代码;
	font-family:"Courier New";
	background:#E6E6E6;}
span.a1
	{mso-style-name:"正文文本 字符";
	mso-style-link:正文文本;
	font-family:"Calibri",sans-serif;}
span.a2
	{mso-style-name:"正文文本首行缩进 字符";
	mso-style-link:正文文本首行缩进;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink="#954F72" style='word-wrap:break-word;
text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<h1 align=center style='text-align:center'><a name="_Toc127264305"><span
lang=EN-US style='font-family:"Arial",sans-serif'>Spring Cloud Gateway</span></a></h1>

<p class=MsoNormal><span lang=EN-US style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:宋体'>目录</span></p>

<p class=MsoToc1><span lang=EN-US><span class=MsoHyperlink><a
href="#_Toc127264305"><span style='font-family:"Arial",sans-serif'>Spring Cloud
Gateway</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264306"><span style='font-family:"Arial",sans-serif'>1.</span><span
style='color:windowtext;text-decoration:none'>     </span><span
style='font-family:"Arial",sans-serif'>Source</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264307"><span style='font-family:"Arial",sans-serif'>2.</span><span
style='color:windowtext;text-decoration:none'>     </span><span
style='font-family:"Arial",sans-serif'>how it work</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264308"><span style='font-family:"Arial",sans-serif'>3.</span><span
style='color:windowtext;text-decoration:none'>     </span><span
style='font-family:"Arial",sans-serif'>hendler</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264309"><span style='font-family:宋体'>3.1.</span><span
style='color:windowtext;text-decoration:none'>         </span>GatewayAutoConfiguration</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264310"><span style='font-family:宋体'>3.2.</span><span
style='color:windowtext;text-decoration:none'>         </span>DispatcherHandler</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264311"><span style='font-family:宋体'>3.3.</span><span
style='color:windowtext;text-decoration:none'>         </span>RoutePredicateHandlerMapping</a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264312"><span style='font-family:"Arial",sans-serif'>4.</span><span
style='color:windowtext;text-decoration:none'>     </span>Route</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264313"><span style='font-family:宋体'>4.1.</span><span
style='color:windowtext;text-decoration:none'>         </span>Route</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264314"><span style='font-family:宋体'>4.2.</span><span
style='color:windowtext;text-decoration:none'>         </span>RouteDefinition</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264315"><span style='font-family:宋体'>4.3.</span><span
style='color:windowtext;text-decoration:none'>         </span>Locator</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264316"><span style='font-family:宋体'>4.4.</span><span
style='color:windowtext;text-decoration:none'>         </span>RouteRefreshListener</a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264317">5.<span style='color:windowtext;text-decoration:none'>     </span>Predicate</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264319"><span style='font-family:宋体'>5.1.</span><span
style='color:windowtext;text-decoration:none'>         </span>Predicate</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264320"><span style='font-family:宋体'>5.2.</span><span
style='color:windowtext;text-decoration:none'>         </span>PredicateFactory</a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264321"><span style='font-family:"Arial",sans-serif'>6.</span><span
style='color:windowtext;text-decoration:none'>     </span>Filter</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264323"><span style='font-family:宋体'>6.1.</span><span
style='color:windowtext;text-decoration:none'>         </span>GlobalFilter</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264324"><span style='font-family:宋体'>6.2.</span><span
style='color:windowtext;text-decoration:none'>         </span>GatewayFilter</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264325"><span style='font-family:宋体'>6.3.</span><span
style='color:windowtext;text-decoration:none'>         </span>GatewayFilterAdapter-<span
lang=EN-US style='font-family:宋体'><span lang=EN-US>适配器方式</span></span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264326"><span style='font-family:宋体'>6.4.</span><span
style='color:windowtext;text-decoration:none'>         </span>GatewayFilterSpec-<span
lang=EN-US style='font-family:宋体'><span lang=EN-US>工厂方式</span></span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264327"><span style='font-family:宋体'>6.5.</span><span
style='color:windowtext;text-decoration:none'>         </span>LoadBalancerClientFilter</a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127264328"><span style='font-family:"Arial",sans-serif'>7.</span><span
style='color:windowtext;text-decoration:none'>     </span><span lang=EN-US
style='font-family:宋体'><span lang=EN-US>参考文献</span></span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127264306"><span
lang=EN-US style='font-family:"Arial",sans-serif'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:"Arial",sans-serif'>Source</span></a></h1>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Versoin 
Spring Cloud Gateway </span><b><span lang=EN-US style='font-family:"Open Sans",sans-serif;
color:black;background:white'>3.0.0-SNAPSHOT</span></b></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='font-family:"Open Sans",sans-serif;color:black;background:
white'>This project provides an API Gateway built on top of the Spring
Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud
Gateway aims to provide a simple, yet effective way to route to APIs and
provide cross cutting concerns to them such as: security, monitoring/metrics,
and resiliency.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>该项目提供了一个构建在</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
Spring </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>生态系统之上的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
API </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>网关，包括：</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Spring
6</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Spring
Boot 3 </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>和</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
Project Reactor</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>。</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%;font-family:"Arial",sans-serif'>Spring Cloud Gateway </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>旨在提供一种简单而有效的方法来路由到</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
API</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>，并为它们提供横切关注点，例如：安全性、监控</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>/</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>指标和弹性。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>To
include Spring Cloud Gateway in your project, use the starter with a group ID
of org.springframework.cloud and an artifact ID of
spring-cloud-starter-gateway. See the Spring Cloud Project page for details on
setting up your build system with the current Spring Cloud Release Train.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>要在项目中包含</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>SpringCloudGateway</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>，请使用组</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ID</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>为</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.Cloud</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>starter</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>和工件</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ID</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>为</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Springcloudstartergateway</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>starter</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。有关使用当前</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>SpringCloudRelease
Train</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>设置构建系统的详细信息，请参阅</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>SpringCloudProject</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>页面。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Glossary</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>术语汇编</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Route:
The basic building block of the gateway. It is defined by an ID, a destination
URI, a collection of predicates, and a collection of filters. A route is
matched if the aggregate predicate is true.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>路线：网关的基本组成部分。它由</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ID</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>、目标</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>URI</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>、谓词集合和过滤器集合定义。如果聚合谓词为真，则匹配路由。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Predicate:
This is a Java 8 Function Predicate. The input type is a Spring Framework
ServerWebExchange. This lets you match on anything from the HTTP request, such
as headers or parameters.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>谓词：这是一个</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Java8</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>函数谓词。输入类型是</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Spring
Framework ServerWebExchange</span><span style='font-size:12.0pt;line-height:
150%;font-family:宋体'>。这允许您匹配</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>HTTP</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>请求中的任何内容，例如标头或参数。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Filter:
These are instances of Spring Framework GatewayFilter that have been
constructed with a specific factory. Here, you can modify requests and
responses before or after sending the downstream request.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>筛选器：这些是使用特定工厂构建的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Spring
Framework GatewayFilter</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>的实例。在这里，您可以在发送下游请求之前或之后修改请求和响应。</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127264307"><span
lang=EN-US style='font-family:"Arial",sans-serif'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:"Arial",sans-serif'>how it work</span></a></h1>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>提供了</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
Spring Cloud Gateway </span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>工作原理的概述：</span></p>

<p class=MsoNormal align=left style='text-align:left;background:white'><span
lang=EN-US style='font-size:9.5pt;font-family:"Segoe UI",sans-serif;color:#191E1E;
letter-spacing:-.05pt;background:white'><img border=0 width=443 height=595
id="图片 3" src="gateway.files/image001.gif" alt="IMG_256"></span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='font-family:"Open Sans",sans-serif;color:black;background:
white'>Clients make requests to Spring Cloud Gateway. If the Gateway Handler
Mapping determines that a request matches a route, it is sent to the Gateway
Web Handler. This handler runs the request through a filter chain that is
specific to the request. The reason the filters are divided by the dotted line
is that filters can run logic both before and after the proxy request is sent.
All “pre” filter logic is executed. Then the proxy request is made. After the
proxy request is made, the “post” filter logic is run.</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>客户端向</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
Spring Cloud Gateway </span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>发出请求。如果</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'> Gateway Handler Mapping </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>确定请求与路由匹配，则将其发送到</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
Gateway Web Handler</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>。此处理程序通过特定于请求的过滤器链运行请求。过滤器被虚线分开的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>“</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>预</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>”</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>过滤器逻辑。然后进行代理请求。发出代理请求后，运行</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>“post”</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>过滤器逻辑。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127264308"><span
lang=EN-US style='font-family:"Arial",sans-serif'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:"Arial",sans-serif'>hendler</span></a></h1>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264309"><span
lang=EN-US style='font-family:宋体'>3.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>GatewayAutoConfiguration</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.config.
GatewayAutoConfiguration</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>通过注解加载启动</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Configuration</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@ConditionalOnProperty(name
= &quot;spring.cloud.gateway.enabled&quot;, matchIfMissing = true)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@EnableConfigurationProperties</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@AutoConfigureBefore({
HttpHandlerAutoConfiguration.class, WebFluxAutoConfiguration.class })</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@AutoConfigureAfter({
GatewayLoadBalancerClientAutoConfiguration.class,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      GatewayClassPathWarningAutoConfiguration.class
})</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@ConditionalOnClass(DispatcherHandler.class)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
GatewayAutoConfiguration {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>…</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.config.
GatewayAutoConfiguration</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>通过注解初始化各种</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>factory</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
BeforeRoutePredicateFactory beforeRoutePredicateFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
BeforeRoutePredicateFactory();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
BetweenRoutePredicateFactory betweenRoutePredicateFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
BetweenRoutePredicateFactory();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
CookieRoutePredicateFactory cookieRoutePredicateFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
CookieRoutePredicateFactory();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
HeaderRoutePredicateFactory headerRoutePredicateFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
HeaderRoutePredicateFactory();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
HostRoutePredicateFactory hostRoutePredicateFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
HostRoutePredicateFactory();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.config.
GatewayAutoConfiguration</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>通过注解初始化各种</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>handler</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
FilteringWebHandler filteringWebHandler(List&lt;GlobalFilter&gt; globalFilters)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
FilteringWebHandler(globalFilters);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.config.
GatewayAutoConfiguration</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>通过注解初始化各种</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>Listener</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Primary</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   //TODO: property to
disable composite?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public RouteLocator
cachedCompositeRouteLocator(List&lt;RouteLocator&gt; routeLocators) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
CachingRouteLocator(new CompositeRouteLocator(Flux.fromIterable(routeLocators)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
RouteRefreshListener routeRefreshListener(ApplicationEventPublisher publisher)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
RouteRefreshListener(publisher);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264310"><span
lang=EN-US style='font-family:宋体'>3.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>DispatcherHandler</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>org.springframework.web.reactive.config. WebFluxConfigurationSupport</span><span
style='font-family:宋体'>注解启动加载</span><span lang=EN-US>DispatcherHandler</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>   </span><span lang=EN-US style='color:black'>@Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public DispatcherHandler
webHandler() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
DispatcherHandler();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>org.springframework.web.reactive.config.DispatcherHandler</span><span
style='font-family:宋体'>初始化加载所有的</span><span lang=EN-US>HandlerMapping</span></p>

<p class=MsoNormal style='text-indent:28.0pt;line-height:150%'><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   protected void
initStrategies(ApplicationContext context) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      Map&lt;String,
HandlerMapping&gt; mappingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             context,
HandlerMapping.class, true, false);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      ArrayList&lt;HandlerMapping&gt;
mappings = new ArrayList&lt;&gt;(mappingBeans.values());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      AnnotationAwareOrderComparator.sort(mappings);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      this.handlerMappings =
Collections.unmodifiableList(mappings);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      Map&lt;String,
HandlerAdapter&gt; adapterBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             context,
HandlerAdapter.class, true, false);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      this.handlerAdapters =
new ArrayList&lt;&gt;(adapterBeans.values());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      AnnotationAwareOrderComparator.sort(this.handlerAdapters);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      Map&lt;String,
HandlerResultHandler&gt; beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             context,
HandlerResultHandler.class, true, false);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      this.resultHandlers = new
ArrayList&lt;&gt;(beans.values());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      AnnotationAwareOrderComparator.sort(this.resultHandlers);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>org.springframework.web.reactive.config.DispatcherHandler</span><span
style='font-family:宋体'>的</span><span lang=EN-US>handle</span><span
style='font-family:宋体'>方法通过</span><span lang=EN-US>HandlerMapping</span><span
style='font-family:宋体'>找到</span><span lang=EN-US>handler</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public Mono&lt;Void&gt;
handle(ServerWebExchange exchange) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (this.handlerMappings
== null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return
createNotFoundError();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return Flux.fromIterable(this.handlerMappings)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .concatMap(mapping
-&gt; mapping.getHandler(exchange))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .next()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .switchIfEmpty(createNotFoundError())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .flatMap(handler
-&gt; invokeHandler(exchange, handler))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .flatMap(result
-&gt; handleResult(exchange, result));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:28.0pt;line-height:150%'><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264311"><span
lang=EN-US style='font-family:宋体'>3.3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>RoutePredicateHandlerMapping</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>org.springframework.cloud.gateway.handler. RoutePredicateHandlerMapping</span><span
style='font-family:宋体'>注解启动加载</span><span lang=EN-US>getHandlerInternal</span><span
style='font-family:宋体'>与</span><span lang=EN-US>lookupRoute</span><span
style='font-family:宋体'>找到</span><span lang=EN-US>Route</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>   </span><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   protected Mono&lt;?&gt;
getHandlerInternal(ServerWebExchange exchange) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      // don't handle
requests on the management port if set</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (managmentPort != null
&amp;&amp; exchange.getRequest().getURI().getPort() == managmentPort.intValue())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return Mono.empty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      exchange.getAttributes().put(GATEWAY_HANDLER_MAPPER_ATTR,
getSimpleName());</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return lookupRoute(exchange)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             //
.log(&quot;route-predicate-handler-mapping&quot;, Level.FINER) //name this</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .flatMap((Function&lt;Route,
Mono&lt;?&gt;&gt;) r -&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (logger.isDebugEnabled())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   logger.debug(&quot;Mapping
[&quot; + getExchangeDesc(exchange) + &quot;] to &quot; + r);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                exchange.getAttributes().put(GATEWAY_ROUTE_ATTR,
r);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return Mono.just(webHandler);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             }).switchIfEmpty(Mono.empty().then(Mono.fromRunnable(()
-&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (logger.isTraceEnabled())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   logger.trace(&quot;No
RouteDefinition found for [&quot; + getExchangeDesc(exchange) + &quot;]&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             })));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected Mono&lt;Route&gt;
lookupRoute(ServerWebExchange exchange) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return this.routeLocator</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .getRoutes()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             //individually
filter routes so that filterWhen error delaying is not a problem</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .concatMap(route
-&gt; Mono</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   .just(route)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   .filterWhen(r
-&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                      // add
the current route we are testing</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                      exchange.getAttributes().put(GATEWAY_PREDICATE_ROUTE_ATTR,
r.getId());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                      return
r.getPredicate().apply(exchange);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   })</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   //instead
of immediately stopping main flux due to error, log and swallow it</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   .doOnError(e
-&gt; logger.error(&quot;Error applying predicate for route: &quot;+route.getId(),
e))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   .onErrorResume(e
-&gt; Mono.empty())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             )</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             //
.defaultIfEmpty() put a static Route not found</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             // or
.switchIfEmpty()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            //
.switchIfEmpty(Mono.&lt;Route&gt;empty().log(&quot;noroute&quot;))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .next()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             //TODO: error
handling</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .map(route
-&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (logger.isDebugEnabled())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   logger.debug(&quot;Route
matched: &quot; + route.getId());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                validateRoute(route,
exchange);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return route;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             });</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      /* TODO: trace logging</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if
(logger.isTraceEnabled()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             logger.trace(&quot;RouteDefinition
did not match: &quot; + routeDefinition.getId());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }*/</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>通过各个</span><span lang=EN-US>RoutePredicateFactory</span><span
style='font-family:宋体'>判断路由</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
Predicate&lt;ServerWebExchange&gt; apply(Config config) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return exchange -&gt;
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          List&lt;HttpCookie&gt;
cookies = exchange.getRequest().getCookies().get(config.name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if (cookies == null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          for (HttpCookie cookie
: cookies) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             if (cookie.getValue().matches(config.regexp))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      };</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127264312"><span
lang=EN-US style='font-family:"Arial",sans-serif'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>Route</span></a></h1>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264313"><span
lang=EN-US style='font-family:宋体'>4.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>Route</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><a
name="_Toc126027683"><span lang=EN-US style='font-size:12.0pt;line-height:150%;
font-family:"Arial",sans-serif'>Route</span></a><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>：网关的基本构建块。它由</span><span lang=EN-US
style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'> ID</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>、目标</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
URI</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、谓词集合和过滤器集合定义。如果聚合谓词为真，则路由匹配。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Predicate</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：这是一个</span><a
href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Java 8 </span><span style='font-size:
12.0pt;line-height:150%;font-family:宋体;color:windowtext;text-decoration:none'>函数谓词</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。输入类型是</span><a
href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Spring FrameworkServerWebExchange</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。这使您可以匹配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
HTTP </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>请求中的任何内容，例如标头或参数。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Filter
</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：</span><span
style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'> </span><a
href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/GatewayFilter.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Spring Framework GatewayFilter</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>厂构建的实例。在这里，您可以在发送下游请求之前或之后修改请求和响应。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.
Route</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Route implements
Ordered {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final String id;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final URI uri;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final int order;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
AsyncPredicate&lt;ServerWebExchange&gt; predicate;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
List&lt;GatewayFilter&gt; gatewayFilters;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264314"><span
lang=EN-US style='font-family:宋体'>4.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>RouteDefinition</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.
</span><span lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:
Consolas;color:black'>RouteDefinition</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>内容</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class RouteDefinition
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @NotEmpty</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private String id = UUID.randomUUID().toString();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @NotEmpty</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Valid</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private
List&lt;PredicateDefinition&gt; predicates = new ArrayList&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Valid</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private
List&lt;FilterDefinition&gt; filters = new ArrayList&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @NotNull</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private URI uri;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private int order = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264315"><span
lang=EN-US style='font-family:宋体'>4.3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>Locator</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.
CachingRouteLocator</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>缓存对象</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
CachingRouteLocator implements RouteLocator,
ApplicationListener&lt;RefreshRoutesEvent&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
RouteLocator delegate;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Flux&lt;Route&gt; routes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Map&lt;String, List&gt; cache = new HashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
CachingRouteLocator(RouteLocator delegate) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      this.delegate = delegate;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      routes = CacheFlux.lookup(cache,
&quot;routes&quot;, Route.class)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .onCacheMissResume(()
-&gt; this.delegate.getRoutes().sort(AnnotationAwareOrderComparator.INSTANCE));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.
InMemoryRouteDefinitionRepository</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>缓存对象</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
InMemoryRouteDefinitionRepository implements RouteDefinitionRepository {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Map&lt;String, RouteDefinition&gt; routes = synchronizedMap(new
LinkedHashMap&lt;String, RouteDefinition&gt;());</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public Mono&lt;Void&gt;
save(Mono&lt;RouteDefinition&gt; route) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return route.flatMap( r
-&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          routes.put(r.getId(),
r);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return Mono.empty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public Mono&lt;Void&gt;
delete(Mono&lt;String&gt; routeId) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return routeId.flatMap(id
-&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if (routes.containsKey(id))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             routes.remove(id);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             return Mono.empty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return Mono.defer(()
-&gt; Mono.error(new NotFoundException(&quot;RouteDefinition not found: &quot;+routeId)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
Flux&lt;RouteDefinition&gt; getRouteDefinitions() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return Flux.fromIterable(routes.values());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264316"><span
lang=EN-US style='font-family:宋体'>4.4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>RouteRefreshListener</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.
RouteRefreshListener </span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>动态路由实现</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
RouteRefreshListener</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      implements
ApplicationListener&lt;ApplicationEvent&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private HeartbeatMonitor monitor
= new HeartbeatMonitor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
ApplicationEventPublisher publisher;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
RouteRefreshListener(ApplicationEventPublisher publisher) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      Assert.notNull(publisher,
&quot;publisher may not be null&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      this.publisher = publisher;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
lang=EN-US> <a name="_Toc127264317">Predicate</a></span></h1>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:172%;page-break-after:
avoid;display:none'><a name="_Toc127264318"></a><b><span lang=EN-US
style='font-size:16.0pt;line-height:172%;font-family:宋体;display:none'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></b><b><span
lang=EN-US style='font-size:16.0pt;line-height:172%;font-family:"Arial",sans-serif;
display:none'>&nbsp;</span></b></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264319"><span
lang=EN-US style='font-family:宋体'>5.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>Predicate</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Route</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：网关的基本构建块。它由</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
ID</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、目标</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
URI</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、谓词集合和过滤器集合定义。如果聚合谓词为真，则路由匹配。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Predicate</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：这是一个</span><a
href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Java 8 </span><span style='font-size:
12.0pt;line-height:150%;font-family:宋体;color:windowtext;text-decoration:none'>函数谓词</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。输入类型是</span><a
href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Spring FrameworkServerWebExchange</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。这使您可以匹配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
HTTP </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>请求中的任何内容，例如标头或参数。</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
DefaultServerWebExchange implements ServerWebExchange {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
ServerHttpRequest request;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
ServerHttpResponse response;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Map&lt;String, Object&gt; attributes = new ConcurrentHashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Mono&lt;WebSession&gt; sessionMono;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
LocaleContextResolver localeContextResolver;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Mono&lt;MultiValueMap&lt;String, String&gt;&gt; formDataMono;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final
Mono&lt;MultiValueMap&lt;String, Part&gt;&gt; multipartDataMono;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Nullable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private final ApplicationContext
applicationContext;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264320"><span
lang=EN-US style='font-family:宋体'>5.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>PredicateFactory</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Route</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：网关的基本构建块。它由</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
ID</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、目标</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
URI</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>、谓词集合和过滤器集合定义。如果聚合谓词为真，则路由匹配。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Predicate</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：这是一个</span><a
href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Java 8 </span><span style='font-size:
12.0pt;line-height:150%;font-family:宋体;color:windowtext;text-decoration:none'>函数谓词</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。输入类型是</span><a
href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html"><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>Spring FrameworkServerWebExchange</span></a><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。这使您可以匹配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
HTTP </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>请求中的任何内容，例如标头或参数。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
After Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>时间：匹配之前</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Before Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>时间：匹配之后</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Between Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配两个时间之间</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Cookie Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配</span><span lang=EN-US style='font-size:
12.0pt;line-height:150%;font-family:"Arial",sans-serif'>cookie</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Header Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配</span><span lang=EN-US style='font-size:
12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Header </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Host Route Predicate Factory--</span><span style='font-size:12.0pt;line-height:
150%;font-family:宋体'>匹配</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>Host </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Method Route Predicate Factory--</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配</span><span lang=EN-US style='font-size:
12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Host </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Path Route Predicate Factory --</span><span style='font-size:12.0pt;line-height:
150%;font-family:宋体'>匹配</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%;font-family:"Arial",sans-serif'>Path  </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>内容</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Query Route Predicate Factory -- </span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配参数</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
RemoteAddr Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>匹配远程地址</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>The
Weight Route Predicate Factory --</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>配置权重路由谓</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.handler.predicate
.CookieRoutePredicateFactory</span><span style='font-size:12.0pt;line-height:
150%;font-family:宋体'>例子</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
CookieRoutePredicateFactory extends
AbstractRoutePredicateFactory&lt;CookieRoutePredicateFactory.Config&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public
Predicate&lt;ServerWebExchange&gt; apply(Config config) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return exchange -&gt;
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          List&lt;HttpCookie&gt;
cookies = exchange.getRequest().getCookies().get(config.name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if (cookies == null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          for (HttpCookie cookie
: cookies) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             if (cookie.getValue().matches(config.regexp))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      };</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127264321"><span
lang=EN-US style='font-family:"Arial",sans-serif'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>Filter</span></a></h1>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:172%;page-break-after:
avoid;display:none'><a name="_Toc127264322"></a><b><span lang=EN-US
style='font-size:16.0pt;line-height:172%;font-family:宋体;display:none'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></b><b><span
lang=EN-US style='font-size:16.0pt;line-height:172%;font-family:"Arial",sans-serif;
display:none'>&nbsp;</span></b></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264323"><span
lang=EN-US style='font-family:宋体'>6.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>GlobalFilter</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.filter.
GlobalFilter</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>全局过滤器</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
GlobalFilter {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   Mono&lt;Void&gt;
filter(ServerWebExchange exchange, GatewayFilterChain chain);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264324"><span
lang=EN-US style='font-family:宋体'>6.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>GatewayFilter</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.filter.
GatewayFilter</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>局部过滤器</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
GatewayFilter extends ShortcutConfigurable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   String NAME_KEY = &quot;name&quot;;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   String VALUE_KEY = &quot;value&quot;;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   Mono&lt;Void&gt;
filter(ServerWebExchange exchange, GatewayFilterChain chain);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264325"><span
lang=EN-US style='font-family:宋体'>6.3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>GatewayFilterAdapter-</span></a><span
style='font-family:黑体'>适配器方式</span></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.
handler. FilteringWebHandler. GatewayFilterAdapter</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>局部过滤器</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static class
GatewayFilterAdapter implements GatewayFilter {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      private final
GlobalFilter delegate;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      public
GatewayFilterAdapter(GlobalFilter delegate) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          this.delegate = delegate;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      public
Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return this.delegate.filter(exchange,
chain);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      public String
toString() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          final
StringBuilder sb = new StringBuilder(&quot;GatewayFilterAdapter{&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          sb.append(&quot;delegate=&quot;).append(delegate);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          sb.append('}');</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return sb.toString();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc127264326"><span
lang=EN-US style='font-family:宋体'>6.4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=EN-US>GatewayFilterSpec-</span></a><span
style='font-family:黑体'>工厂方式</span></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>org.springframework.cloud.gateway.route.builder.
GatewayFilterSpec</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>局部过滤器</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public GatewayFilterSpec
addRequestHeader(String headerName, String headerValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return
filter(getBean(AddRequestHeaderGatewayFilterFactory.class)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             .apply(c -&gt; c.setName(headerName).setValue(headerValue)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2 style='margin-left:1.0cm;text-indent:-1.0cm'><a name="_Toc126027689"></a><a
name="_Toc127264327"><span lang=EN-US style='font-family:宋体'>6.5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
lang=EN-US>LoadBalancerClientFilter</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Step
1 </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>
RibbonAutoConfiguration</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>自动配置</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @ConditionalOnMissingBean(LoadBalancerClient.class)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public LoadBalancerClient
loadBalancerClient() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
RibbonLoadBalancerClient(springClientFactory());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RibbonClientConfiguration
</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>自动配置（默认）</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Bean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @ConditionalOnMissingBean</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public ILoadBalancer
ribbonLoadBalancer(IClientConfig config,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          ServerList&lt;Server&gt;
serverList, ServerListFilter&lt;Server&gt; serverListFilter,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          IRule rule, IPing
ping, ServerListUpdater serverListUpdater) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     if
(this.propertiesFactory.isSet(ILoadBalancer.class, name)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return this.propertiesFactory.get(ILoadBalancer.class,
config, name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
ZoneAwareLoadBalancer&lt;&gt;(config, rule, ping, serverList,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             serverListFilter,
serverListUpdater);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>BestAvailableRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：选择最小请求数的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Server</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RandomRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：随机选择</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Server</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RoundRobinRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：轮询选择</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Server</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RetryRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：根据轮询的方式重试</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>WeightedResponseTimeRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：根据响应时间去分配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Weight</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>，</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Weight</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>越高，被选择的可能性就越大</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ZoneAvoidanceRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：根据</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Server</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>zone</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>区域和可用性来轮询选择，如果只有一个</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>zone</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>区域，行为跟</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RoundRobinRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>一致</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>AvailabilityFilteringRule</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：过滤掉那些因为一直连接失败</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>(</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>标记了</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>circuit
tripped)</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>和高并发</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>(activeConnections
</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>超过配置的阈值</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>)</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Server</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>，尽量保证可用性</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>DynamicServerListLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：继承于</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>BaseLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>，它对基础负载均衡器做了扩展。在该负载均衡器，实现了服务实例清单在运行期间的动态更新；同时还具备了对服务实例清单的过滤功能，也就是说可以通过过滤器来选择获取一批服务实例清单。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ZoneAwareLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>：对</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>DynamicServerListLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的扩展。在</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>DynamicServerListLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中没有区分</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>zone</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>区域，而</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ZoneAwareLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>主要扩展的功能就是增加了</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>zone</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>区域过滤。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Step
2 </span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>LoadBalancerClientFilter</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>filter</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>,</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>判断</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>LB</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>负载均衡。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public Mono&lt;Void&gt;
filter(ServerWebExchange exchange, GatewayFilterChain chain) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      URI url =
exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      String schemePrefix =
exchange.getAttribute(GATEWAY_SCHEME_PREFIX_ATTR);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (url == null ||
(!&quot;lb&quot;.equals(url.getScheme()) &amp;&amp;
!&quot;lb&quot;.equals(schemePrefix))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return
chain.filter(exchange);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      //preserve the
original url</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      addOriginalRequestUrl(exchange,
url);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      log.trace(&quot;LoadBalancerClientFilter
url before: &quot; + url);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      final ServiceInstance
instance = choose(exchange);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (instance == null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          String msg =
&quot;Unable to find instance for &quot; + url.getHost();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if(properties.isUse404())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             throw new
FourOFourNotFoundException(msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          throw new
NotFoundException(msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      URI uri =
exchange.getRequest().getURI();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      // if the
`lb:&lt;scheme&gt;` mechanism was used, use `&lt;scheme&gt;` as the default,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      // if the loadbalancer
doesn't provide one.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      String overrideScheme
= instance.isSecure() ? &quot;https&quot; : &quot;http&quot;;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (schemePrefix !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          overrideScheme =
url.getScheme();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      URI requestUrl =
loadBalancer.reconstructURI(new DelegatingServiceInstance(instance,
overrideScheme), uri);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      log.trace(&quot;LoadBalancerClientFilter
url chosen: &quot; + requestUrl);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,
requestUrl);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return
chain.filter(exchange);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Step
3</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：</span><span
style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'> </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>通过</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>LoadBalancerClient</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>获得真是访问地址</span></p>

<p class=COR-><span lang=EN-US style='font-size:12.0pt;font-family:"Arial",sans-serif;
color:black'>                  </span><span lang=EN-US style='color:black'>final
ServiceInstance instance = choose(exchange);</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Step
4</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：通过</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>RibbonLoadBalancerClient</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>choose</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    * New: Select a server
using a 'key'.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public ServiceInstance
choose(String serviceId, Object hint) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      Server server =
getServer(getLoadBalancer(serviceId), hint);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      if (server == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return new
RibbonServer(serviceId, server, isSecure(server, serviceId),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             serverIntrospector(serviceId).getMetadata(server));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected ILoadBalancer getLoadBalancer(String
serviceId) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return
this.clientFactory.getLoadBalancer(serviceId);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Step
5</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>：通过</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ILoadBalancer
</span><span style='font-size:12.0pt;line-height:150%;font-family:宋体'>的获取默认算法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>ZoneAwareLoadBalancer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的负载均衡</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>具体算法参考代码：</span></p>

<p class=COR-><span lang=EN-US style='color:black'> @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected void
setServerListForZones(Map&lt;String, List&lt;Server&gt;&gt; zoneServersMap) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
super.setServerListForZones(zoneServersMap);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (balancers ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            balancers = new
ConcurrentHashMap&lt;String, BaseLoadBalancer&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for
(Map.Entry&lt;String, List&lt;Server&gt;&gt; entry: zoneServersMap.entrySet())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           String zone =
entry.getKey().toLowerCase();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
getLoadBalancer(zone).setServersList(entry.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // check if there is
any zone that no longer has a server</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // and set the list
to empty so that the zone related metrics does not</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // contain stale
data</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for
(Map.Entry&lt;String, BaseLoadBalancer&gt; existingLBEntry:
balancers.entrySet()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(!zoneServersMap.keySet().contains(existingLBEntry.getKey())) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
existingLBEntry.getValue().setServersList(Collections.emptyList());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }    </span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1 style='margin-left:0cm;text-indent:0cm'><a name="_Toc126027699"></a><a
name="_Toc9177"></a><a name="_Toc127264328"><span lang=EN-US style='font-family:
"Arial",sans-serif'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:宋体'>参考文献</span></a></h1>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>spring-cloud-gateway</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>官网</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US><a
href="https://cloud.spring.io/spring-cloud-gateway/reference/html/"><span
style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif;
color:windowtext;text-decoration:none'>https://cloud.spring.io/spring-cloud-gateway/reference/html/</span></a></span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>Spring-Cloud-Gateway+Ribbon</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>负载均衡</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%;font-family:"Arial",sans-serif'>https://blog.csdn.net/htmlxxxx/article/details/115379226</span></p>

</div>

</body>

</html>
