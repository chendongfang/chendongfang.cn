<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>netty-陈东方</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:黑体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:微软雅黑;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:-apple-system;}
@font-face
	{font-family:"\@微软雅黑";}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@黑体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h2
	{margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:172%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h3
	{margin-right:0cm;
	margin-left:0cm;
	font-size:13.5pt;
	font-family:宋体;
	font-weight:bold;}
h4
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:155%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.0pt;
	font-family:"Calibri Light",sans-serif;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"正文文本 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyTextFirstIndent, li.MsoBodyTextFirstIndent, div.MsoBodyTextFirstIndent
	{mso-style-link:"正文文本首行缩进 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
pre
	{mso-style-link:"HTML 预设格式 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
span.a
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Calibri",sans-serif;}
span.a0
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Calibri",sans-serif;}
p.COR-, li.COR-, div.COR-
	{mso-style-name:COR-代码;
	mso-style-link:"COR-代码 Char";
	margin-top:7.8pt;
	margin-right:0cm;
	margin-bottom:7.8pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:12.0pt;
	background:#E6E6E6;
	word-break:break-all;
	font-size:10.5pt;
	font-family:"Courier New";}
span.COR-Char
	{mso-style-name:"COR-代码 Char";
	mso-style-link:COR-代码;
	font-family:"Courier New";
	background:#E6E6E6;}
span.a1
	{mso-style-name:"正文文本 字符";
	mso-style-link:正文文本;
	font-family:"Calibri",sans-serif;}
span.a2
	{mso-style-name:"正文文本首行缩进 字符";
	mso-style-link:正文文本首行缩进;
	font-family:"Calibri",sans-serif;}
span.HTML
	{mso-style-name:"HTML 预设格式 字符";
	mso-style-link:"HTML 预设格式";
	font-family:宋体;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink="#954F72" style='word-wrap:break-word;
text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<h1 align=center style='text-align:center'><a name="_Toc127135034"><span
lang=EN-US>Netty</span></a></h1>

<p class=MsoToc1><span
class=MsoHyperlink><span lang=EN-US><a href="#_Toc127135034">Netty</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135035">1.<span style='color:windowtext;text-decoration:none'>     </span>source</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135036">2.<span style='color:windowtext;text-decoration:none'>     </span>Reactor</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135037">2.1 Acceptor</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135038">2.2 Reactor</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135039">2.3 Select Event</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135040">3.<span style='color:windowtext;text-decoration:none'>     </span>Handler</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135041">3.1 ChannelPipeline</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135042">3.2 Handler</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135043">3.3 event</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135044">4.<span style='color:windowtext;text-decoration:none'>     </span>Zero-Copy</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135045">4.1 transferTo</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135046">4.2 WrappedByteBuf</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135047">4.3 CompositeByteBuf</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135048">5.<span style='color:windowtext;text-decoration:none'>     </span>BufAllocator</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135049">5.1 PooledByteBufAllocator</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc127135050">5.2<span style='font-family:"Courier New"'>
UnpooledByteBufAllocator</span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135035"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>source</span></a></h2>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>版本</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>netty-all-4.1.34.Final</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>官方架构图：</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US><img border=0 width=554 height=326 id="图片 1"
src="netty.files/image001.gif"></span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>使用</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>Reactor&nbsp;</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>模型</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'><img border=0 width=554
height=376 id="图片 3" src="netty.files/image002.gif"></span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135036"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Reactor</span></a><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>&nbsp;</span></h2>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135037"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif;font-weight:
normal'>2.1 </span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Acceptor</span></a></h3>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.bootstrap. ServerBootstrap.
ServerBootstrapAcceptor</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>channelRead</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>方法</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public void
channelRead(ChannelHandlerContext ctx, Object msg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final Channel
child = (Channel) msg;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
child.pipeline().addLast(childHandler);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            setChannelOptions(child,
childOptions, logger);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
childGroup.register(child).addListener(new ChannelFutureListener() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    public
void operationComplete(ChannelFuture future) throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(!future.isSuccess()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
forceClose(child, future.cause());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(Throwable t) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
forceClose(child, t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135038"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.2 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Reactor</span></a></h3>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.bootstrap. ServerBootstrap.
ServerBootstrapAcceptor</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>init</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>方法。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>void init(Channel channel)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(options) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setChannelOptions(channel, options, logger);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized (attrs)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
channel.attr(key).set(e.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ChannelPipeline p =
channel.pipeline();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final EventLoopGroup
currentChildGroup = childGroup;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final ChannelHandler
currentChildHandler = childHandler;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(childOptions) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            currentChildOptions
= childOptions.entrySet().toArray(newOptionArray(0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(childAttrs) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        p.addLast(new
ChannelInitializer&lt;Channel&gt;() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            public void
initChannel(final Channel ch) throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                final
ChannelPipeline pipeline = ch.pipeline();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
ChannelHandler handler = config.handler();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (handler
!= null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
pipeline.addLast(handler);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
ch.eventLoop().execute(new Runnable() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    public
void run() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
pipeline.addLast(new ServerBootstrapAcceptor(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
ch, currentChildGroup, currentChildHandler, currentChildOptions,
currentChildAttrs));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135039"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.3 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Select Event</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel.nio.NioEventLoop</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>run</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>protected void run()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    switch
(selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
SelectStrategy.CONTINUE:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
SelectStrategy.BUSY_WAIT:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
SelectStrategy.SELECT:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
select(wakenUp.getAndSet(false));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  if (wakenUp.get()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            selector.wakeup();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        //
fall through</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    default:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } catch
(IOException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
rebuildSelector0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
handleLoopException(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
cancelledKeys = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
needsToSelectAgain = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                final int
ioRatio = this.ioRatio;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (ioRatio
== 100) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
processSelectedKeys();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }
finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        //
Ensure we always run tasks.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
runAllTasks();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    final
long ioStartTime = System.nanoTime();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
processSelectedKeys();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }
finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        //
Ensure we always run tasks.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
final long ioTime = System.nanoTime() - ioStartTime;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
runAllTasks(ioTime * (100 - ioRatio) / ioRatio);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(Throwable t) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
handleLoopException(t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Always handle
shutdown even if the loop processing threw an exception.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(isShuttingDown()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
closeAll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(confirmShutdown()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(Throwable t) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
handleLoopException(t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel.nio.NioEventLoop</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>select</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void select(boolean
oldWakenUp) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Selector selector =
this.selector;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int selectCnt =
0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            long
currentTimeNanos = System.nanoTime();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            long
selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                long
timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(timeoutMillis &lt;= 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(selectCnt == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
selector.selectNow();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
selectCnt = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(hasTasks() &amp;&amp; wakenUp.compareAndSet(false, true)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selector.selectNow();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selectCnt = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
selectedKeys = selector.select(timeoutMillis);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                selectCnt
++;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks() ||
hasScheduledTasks()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(Thread.interrupted()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(logger.isDebugEnabled()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
logger.debug(&quot;Selector.select() returned prematurely because &quot; +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
&quot;Thread.currentThread().interrupt() was called. Use &quot; +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
&quot;NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selectCnt = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                long time =
System.nanoTime();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (time -
TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    //
timeoutMillis elapsed without anything selected.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selectCnt = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else if
(SELECTOR_AUTO_REBUILD_THRESHOLD &gt; 0 &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // The
code exists in an extra method to ensure the method is not too big to inline as
this</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    //
branch is not very likely to get hit very frequently.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    selector
= selectRebuildSelector(selectCnt);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selectCnt = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                currentTimeNanos
= time;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (selectCnt
&gt; MIN_PREMATURE_SELECTOR_RETURNS) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(logger.isDebugEnabled()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
logger.debug(&quot;Selector.select() returned prematurely {} times in a row for
Selector {}.&quot;,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
selectCnt - 1, selector);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(CancelledKeyException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(logger.isDebugEnabled()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
logger.debug(CancelledKeyException.class.getSimpleName() + &quot; raised by a
Selector {} - JDK bug?&quot;,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
selector, e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Harmless
exception - log anyway</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135040"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Handler</span></a></h2>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135041"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.1 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>ChannelPipeline</span></a></h3>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>ChannelPipeline</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>基本流程：</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='page-break-after:avoid'><span lang=EN-US
style='font-size:12.0pt'><img border=0 width=554 height=508 id="图片 2"
src="netty.files/image003.gif"></span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>Netty Internal I/O Threads
(Transport Implementation)  </span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel.DefaultChannelPipeline</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>addFirst</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static void
addAfter0(AbstractChannelHandlerContext ctx, AbstractChannelHandlerContext
newCtx) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        newCtx.prev = ctx;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        newCtx.next =
ctx.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ctx.next.prev =
newCtx;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ctx.next = newCtx;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final
ChannelPipeline addFirst(ChannelHandler handler) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
addFirst(null, handler);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal style='margin-top:4.8pt;margin-right:0cm;margin-bottom:0cm;
margin-left:1.2pt;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
12.0pt'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135042"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.2 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Handler</span></a><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></h3>

<p><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel.ChannelHandler</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>ChannelHandlerContext </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>链表</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
ChannelHandler {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
handlerAdded(ChannelHandlerContext ctx) throws Exception;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
handlerRemoved(ChannelHandlerContext ctx) throws Exception;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Deprecated</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void exceptionCaught(ChannelHandlerContext
ctx, Throwable cause) throws Exception;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Inherited</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Documented</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@Target(ElementType.TYPE)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@Retention(RetentionPolicy.RUNTIME)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @interface Sharable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // no value</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel. ChannelHandlerContext</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的各种方法</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
ChannelHandlerContext extends AttributeMap, ChannelInboundInvoker,
ChannelOutboundInvoker {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Channel channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    EventExecutor
executor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    String name();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandler
handler();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean isRemoved();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelRegistered();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelUnregistered();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelActive();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelInactive();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireExceptionCaught(Throwable cause);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireUserEventTriggered(Object evt);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelRead(Object msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelReadComplete();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
fireChannelWritabilityChanged();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelHandlerContext
flush();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ChannelPipeline
pipeline();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ByteBufAllocator
alloc();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt;
Attribute&lt;T&gt; attr(AttributeKey&lt;T&gt; key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; boolean
hasAttr(AttributeKey&lt;T&gt; key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>} </span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135043"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.3 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>event</span></a></h3>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>3.3.1 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>Read
event</span></h4>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel. AbstractChannelHandlerContext</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>fireChannelRead</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，通过</span><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>Runnable</span><span
style='line-height:150%;font-family:"微软雅黑",sans-serif'>的事件进行</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ChannelHandlerContext fireChannelRead(final Object msg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
invokeChannelRead(findContextInbound(), msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static void
invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Object m =
next.pipeline.touch(ObjectUtil.checkNotNull(msg, &quot;msg&quot;), next);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        EventExecutor
executor = next.executor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (executor.inEventLoop())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
next.invokeChannelRead(m);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
executor.execute(new Runnable() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                public void
run() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
next.invokeChannelRead(m);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void
invokeChannelRead(Object msg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (invokeHandler())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((ChannelInboundHandler) handler()).channelRead(this, msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(Throwable t) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
notifyHandlerException(t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
fireChannelRead(msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    } } </span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>3.3.2 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>write
event</span></h4>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel.
AbstractChannelHandlerContext</span><span style='font-size:12.0pt;line-height:
150%;font-family:宋体'>中的</span><span lang=EN-US style='font-size:12.0pt;
line-height:150%'>write</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>方法，通过</span><span lang=EN-US style='line-height:150%;
font-family:"Courier New"'>Runnable</span><span style='line-height:150%;
font-family:"微软雅黑",sans-serif'>的事件进行</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void write(Object
msg, boolean flush, ChannelPromise promise) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ObjectUtil.checkNotNull(msg, &quot;msg&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(isNotValidPromise(promise, true)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
ReferenceCountUtil.release(msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // cancelled</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(RuntimeException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ReferenceCountUtil.release(msg);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
AbstractChannelHandlerContext next = findContextOutbound();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Object m =
pipeline.touch(msg, next);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        EventExecutor
executor = next.executor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(executor.inEventLoop()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (flush) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
next.invokeWriteAndFlush(m, promise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                next.invokeWrite(m,
promise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final
AbstractWriteTask task;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (flush) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                task =
WriteAndFlushTask.newInstance(next, m, promise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }  else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                task =
WriteTask.newInstance(next, m, promise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(!safeExecute(executor, task, promise, m)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
task.cancel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }} </span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135044"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Zero-Copy</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=554 height=301 id="图片 4"
src="netty.files/image004.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135045"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.1 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>transferTo</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.channel. DefaultFileRegion</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>transferTo</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>    </span><span lang=EN-US style='color:black'>public long
transferTo(WritableByteChannel target, long position) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long count =
this.count - position;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (count &lt; 0 ||
position &lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
&quot;position out of range: &quot; + position +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    &quot;
(expected: 0 - &quot; + (this.count - 1) + ')');</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (count == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return 0L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (refCnt() == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalReferenceCountException(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        open();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long written =
file.transferTo(this.position + position, count, target);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (written &gt; 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            transferred +=
written;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (written
== 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            validate(this,
position);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return written;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>java.nio.channels.FileChannel</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>transferTo</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      public abstract long
transferTo(long position, long count,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
WritableByteChannel target)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135046"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.2 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>WrappedByteBuf</span></a></h3>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>java.nio.channels.FileChannel</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>transferTo</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      public abstract long
transferTo(long position, long count,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
WritableByteChannel target)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'><img border=0
width=554 height=62 id="图片 5" src="netty.files/image005.gif"></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. Unpooled</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>wrappedBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public static ByteBuf
wrappedBuffer(byte[] array) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (array.length ==
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
EMPTY_BUFFER;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
UnpooledHeapByteBuf(ALLOC, array, array.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public static ByteBuf wrappedBuffer(ByteBuf...
buffers) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
wrappedBuffer(buffers.length, buffers);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:28.15pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:28.15pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. Unpooled</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>wrappedBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:28.15pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:28.15pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public static ByteBuf
wrappedBuffer(int maxNumComponents, ByteBuf... buffers) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        switch
(buffers.length) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        case 0:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        case 1:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ByteBuf buffer =
buffers[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(buffer.isReadable()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
wrappedBuffer(buffer.order(BIG_ENDIAN));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                buffer.release();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        default:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int i = 0;
i &lt; buffers.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ByteBuf buf
= buffers[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(buf.isReadable()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
new CompositeByteBuf(ALLOC, false, maxNumComponents, buffers, i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
buf.release();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return EMPTY_BUFFER;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135047"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.3 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>CompositeByteBuf</span></a></h3>

<p class=MsoBodyTextFirstIndent style='margin-left:28.15pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
CompositeByteBuf</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>中的构造方法，</span></p>

<p class=MsoBodyTextFirstIndent style='margin-left:28.15pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Component[]
components; // resized when needed</span></p>

<p class=COR-><span lang=EN-US style='color:black'>CompositeByteBuf(ByteBufAllocator
alloc, boolean direct, int maxNumComponents,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ByteBuf[]
buffers, int offset) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(alloc, direct,
maxNumComponents, buffers.length - offset);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
addComponents0(false, 0, buffers, offset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
consolidateIfNeeded();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        setIndex0(0,
capacity());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }     </span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
CompositeByteBuf</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>中的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>addComponents0</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>方法，</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private CompositeByteBuf
addComponents0(boolean increaseWriterIndex,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final int
cIndex, ByteBuf[] buffers, int arrOffset) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int len =
buffers.length, count = len - arrOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ci =
Integer.MAX_VALUE;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
checkComponentIndex(cIndex);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            shiftComps(cIndex,
count); // will increase componentCount</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int nextOffset =
cIndex &gt; 0 ? components[cIndex - 1].endOffset : 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (ci =
cIndex; arrOffset &lt; len; arrOffset++, ci++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ByteBuf b =
buffers[arrOffset];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (b ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                Component c
= newComponent(b, nextOffset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
components[ci] = c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                nextOffset =
c.endOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (ci &lt;
componentCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (ci &lt;
cIndex + count) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // we
bailed early</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
removeCompRange(ci, cIndex + count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    for (;
arrOffset &lt; len; ++arrOffset) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
ReferenceCountUtil.safeRelease(buffers[arrOffset]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
updateComponentOffsets(ci); // only need to do this here for components after
the added ones</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(increaseWriterIndex &amp;&amp; ci &gt; cIndex &amp;&amp; ci &lt;=
componentCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writerIndex(writerIndex() + components[ci - 1].endOffset -
components[cIndex].offset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135048"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>BufAllocator</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>new PooledByteBufAllocator(true);//</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>池化直接内存</span></p>

<p class=COR-><span lang=EN-US style='color:black'>new
PooledByteBufAllocator(false);//</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>池化堆内存</span></p>

<p class=COR-><span lang=EN-US style='color:black'>new
UnpooledByteBufAllocator(true);//</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>非池化直接内存</span></p>

<p class=COR-><span lang=EN-US style='color:black'>new
UnpooledByteBufAllocator(false);//</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>非池化堆内存</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135049"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.1 </span><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>PooledByteBufAllocator</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. PooledByteBufAllocator</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>newHeapBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>HeapBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>分配内存。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected ByteBuf
newHeapBuffer(int initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        PoolThreadCache
cache = threadCache.get();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
PoolArena&lt;byte[]&gt; heapArena = cache.heapArena;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final ByteBuf buf;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (heapArena !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf =
heapArena.allocate(cache, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf =
PlatformDependent.hasUnsafe() ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    new
UnpooledUnsafeHeapByteBuf(this, initialCapacity, maxCapacity) :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    new
UnpooledHeapByteBuf(this, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
toLeakAwareBuffer(buf);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:12.0pt'><span lang=EN-US
style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.PooledByteBufAllocator</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>newDirectBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>DirectBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>分配内存。</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected ByteBuf
newDirectBuffer(int initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        PoolThreadCache
cache = threadCache.get();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
PoolArena&lt;ByteBuffer&gt; directArena = cache.directArena;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final ByteBuf buf;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (directArena !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf =
directArena.allocate(cache, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf =
PlatformDependent.hasUnsafe() ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity) :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    new
UnpooledDirectByteBuf(this, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
toLeakAwareBuffer(buf);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.1.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>PoolArena</span></h4>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. PoolArena</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的对象属性：</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolSubpage </span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>与</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolChunkList</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>    </span><span lang=EN-US style='color:black'>abstract class
PoolArena&lt;T&gt; implements PoolArenaMetric {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final boolean
HAS_UNSAFE = PlatformDependent.hasUnsafe();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    enum SizeClass {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Tiny,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Small,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Normal</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final int
numTinySubpagePools = 512 &gt;&gt;&gt; 4;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final
PooledByteBufAllocator parent;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
maxOrder;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int pageSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int pageShifts;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int chunkSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int
subpageOverflowMask;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int
numSmallSubpagePools;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int directMemoryCacheAlignment;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int
directMemoryCacheAlignmentMask;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolSubpage&lt;T&gt;[] tinySubpagePools;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolSubpage&lt;T&gt;[] smallSubpagePools;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolChunkList&lt;T&gt; q050;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final PoolChunkList&lt;T&gt;
q025;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolChunkList&lt;T&gt; q000;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolChunkList&lt;T&gt; qInit;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolChunkList&lt;T&gt; q075;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private final
PoolChunkList&lt;T&gt; q100;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. PoolArena</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolArena</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>构造方法初始化最小</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>tinySubpagePools</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>与最大</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>smallSubpagePools</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>。</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected
PoolArena(PooledByteBufAllocator parent, int pageSize,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          int maxOrder, int
pageShifts, int chunkSize, int cacheAlignment) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.parent =
parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.pageSize =
pageSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.maxOrder =
maxOrder;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.pageShifts =
pageShifts;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.chunkSize =
chunkSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
directMemoryCacheAlignment = cacheAlignment;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
directMemoryCacheAlignmentMask = cacheAlignment - 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        subpageOverflowMask
= ~(pageSize - 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        tinySubpagePools =
newSubpagePoolArray(numTinySubpagePools);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; tinySubpagePools.length; i ++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
tinySubpagePools[i] = newSubpagePoolHead(pageSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        numSmallSubpagePools
= pageShifts - 9;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        smallSubpagePools =
newSubpagePoolArray(numSmallSubpagePools);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; smallSubpagePools.length; i ++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
smallSubpagePools[i] = newSubpagePoolHead(pageSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q100 = new
PoolChunkList&lt;T&gt;(this, null, 100, Integer.MAX_VALUE, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q075 = new
PoolChunkList&lt;T&gt;(this, q100, 75, 100, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q050 = new
PoolChunkList&lt;T&gt;(this, q075, 50, 100, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q025 = new
PoolChunkList&lt;T&gt;(this, q050, 25, 75, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q000 = new
PoolChunkList&lt;T&gt;(this, q025, 1, 50, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        qInit = new
PoolChunkList&lt;T&gt;(this, q000, Integer.MIN_VALUE, 25, chunkSize);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q100.prevList(q075);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q075.prevList(q050);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q050.prevList(q025);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q025.prevList(q000);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        q000.prevList(null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
qInit.prevList(qInit);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
List&lt;PoolChunkListMetric&gt; metrics = new
ArrayList&lt;PoolChunkListMetric&gt;(6);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(qInit);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(q000);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(q025);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(q050);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(q075);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        metrics.add(q100);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        chunkListMetrics =
Collections.unmodifiableList(metrics);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.PoolAren</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>allocate</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，分配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolSubpage</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void
allocate(PoolThreadCache cache, PooledByteBuf&lt;T&gt; buf, final int
reqCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int
normCapacity = normalizeCapacity(reqCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(isTinyOrSmall(normCapacity)) { // capacity &lt; pageSize</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int tableIdx;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
PoolSubpage&lt;T&gt;[] table;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean tiny =
isTiny(normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tiny) { //
&lt; 512</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(cache.allocateTiny(this, buf, reqCapacity, normCapacity)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // was
able to allocate out of the cache so move on</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tableIdx =
tinyIdx(normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                table =
tinySubpagePools;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(cache.allocateSmall(this, buf, reqCapacity, normCapacity)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // was
able to allocate out of the cache so move on</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tableIdx =
smallIdx(normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                table =
smallSubpagePools;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final
PoolSubpage&lt;T&gt; head = table[tableIdx];</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             * Synchronize
on the head. This is needed as {@link PoolChunk#allocateSubpage(int)} and</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             * {@link
PoolChunk#free(long)} may modify the doubly linked list as well.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            synchronized
(head) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                final
PoolSubpage&lt;T&gt; s = head.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (s !=
head) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    assert
s.doNotDestroy &amp;&amp; s.elemSize == normCapacity;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    long
handle = s.allocate();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    assert
handle &gt;= 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s.chunk.initBufWithSubpage(buf,
null, handle, reqCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
incTinySmallAllocation(tiny);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            synchronized
(this) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
allocateNormal(buf, reqCapacity, normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
incTinySmallAllocation(tiny);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (normCapacity
&lt;= chunkSize) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(cache.allocateNormal(this, buf, reqCapacity, normCapacity)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // was able
to allocate out of the cache so move on</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            synchronized
(this) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
allocateNormal(buf, reqCapacity, normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
++allocationsNormal;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Huge
allocations are never served via the cache so just call allocateHuge</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
allocateHuge(buf, reqCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.PoolAren</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>allocateNormal</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，分配</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolChunk</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void allocateNormal(PooledByteBuf&lt;T&gt;
buf, int reqCapacity, int normCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(q050.allocate(buf, reqCapacity, normCapacity) || q025.allocate(buf,
reqCapacity, normCapacity) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
q000.allocate(buf, reqCapacity, normCapacity) || qInit.allocate(buf,
reqCapacity, normCapacity) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
q075.allocate(buf, reqCapacity, normCapacity)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Add a new chunk.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        PoolChunk&lt;T&gt; c
= newChunk(pageSize, maxOrder, pageShifts, chunkSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean success =
c.allocate(buf, reqCapacity, normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        assert success;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        qInit.add(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.PoolAren</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>free</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法，释放内存</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>PoolChunk</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>void free(PoolChunk&lt;T&gt;
chunk, ByteBuffer nioBuffer, long handle, int normCapacity, PoolThreadCache
cache) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (chunk.unpooled)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int size =
chunk.chunkSize();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
destroyChunk(chunk);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
activeBytesHuge.add(-size);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
deallocationsHuge.increment();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            SizeClass
sizeClass = sizeClass(normCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (cache !=
null &amp;&amp; cache.add(this, chunk, nioBuffer, handle, normCapacity,
sizeClass)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // cached so
not free it.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            freeChunk(chunk,
handle, sizeClass, nioBuffer, false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private SizeClass
sizeClass(int normCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(!isTinyOrSmall(normCapacity)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
SizeClass.Normal;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
isTiny(normCapacity) ? SizeClass.Tiny : SizeClass.Small;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
freeChunk(PoolChunk&lt;T&gt; chunk, long handle, SizeClass sizeClass,
ByteBuffer nioBuffer, boolean finalizer) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final boolean
destroyChunk;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized (this)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // We only call
this if freeChunk is not called because of the PoolThreadCache finalizer as
otherwise this</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // may fail due
lazy class-loading in for example tomcat.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!finalizer)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                switch
(sizeClass) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
Normal:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        ++deallocationsNormal;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
Small:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
++deallocationsSmall;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    case
Tiny:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
++deallocationsTiny;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    default:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
throw new Error();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            destroyChunk =
!chunk.parent.free(chunk, handle, nioBuffer);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (destroyChunk) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // destroyChunk
not need to be called while holding the synchronized lock.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
destroyChunk(chunk);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.1.2 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>PoolSubpage&nbsp;</span></h4>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
PoolSubpage</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>的主要属性</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>final class
PoolSubpage&lt;T&gt; implements PoolSubpageMetric {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final PoolChunk&lt;T&gt;
chunk;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
memoryMapIdx;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
runOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
pageSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final long[]
bitmap;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    PoolSubpage&lt;T&gt;
prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    PoolSubpage&lt;T&gt;
next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.1.3 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>PoolChunk&nbsp;&nbsp;</span></h4>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
PoolChunk</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>的主要属性</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>final class
PoolChunk&lt;T&gt; implements PoolChunkMetric {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final int
INTEGER_SIZE_MINUS_ONE = Integer.SIZE - 1;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final PoolArena&lt;T&gt;
arena;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final T memory;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final boolean unpooled;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final int offset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final byte[]
memoryMap;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final byte[]
depthMap;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
PoolSubpage&lt;T&gt;[] subpages;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** Used to determine if
the requested capacity is equal to or greater than pageSize. */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
subpageOverflowMask;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
pageSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
pageShifts;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
maxOrder;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
chunkSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
log2ChunkSize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
maxSubpageAllocs;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** Used to mark memory
as unusable */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final byte
unusable;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
Deque&lt;ByteBuffer&gt; cachedNioBuffers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int freeBytes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    PoolChunkList&lt;T&gt;
parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    PoolChunk&lt;T&gt; prev;</span></p>

<p class=COR- style='text-indent:21.0pt'><span lang=EN-US style='color:black'>PoolChunk&lt;T&gt;
next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.1.4 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>HeapArena</span></h4>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
PoolArena. HeapArena</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>byte[]</span><span style='font-size:12.0pt;line-height:150%;font-family:
宋体'>方式分配方式</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  static final class
HeapArena extends PoolArena&lt;byte[]&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
HeapArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
pageShifts, int chunkSize, int directMemoryCacheAlignment) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(parent,
pageSize, maxOrder, pageShifts, chunkSize,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
directMemoryCacheAlignment);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static
byte[] newByteArray(int size) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
PlatformDependent.allocateUninitializedArray(size);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean isDirect() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PoolChunk&lt;byte[]&gt; newChunk(int pageSize, int maxOrder, int pageShifts,
int chunkSize) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
PoolChunk&lt;byte[]&gt;(this, newByteArray(chunkSize), pageSize, maxOrder,
pageShifts, chunkSize, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PoolChunk&lt;byte[]&gt; newUnpooledChunk(int capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
PoolChunk&lt;byte[]&gt;(this, newByteArray(capacity), capacity, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected void
destroyChunk(PoolChunk&lt;byte[]&gt; chunk) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Rely on GC.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PooledByteBuf&lt;byte[]&gt; newByteBuf(int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
HAS_UNSAFE ? PooledUnsafeHeapByteBuf.newUnsafeInstance(maxCapacity)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    :
PooledHeapByteBuf.newInstance(maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected void
memoryCopy(byte[] src, int srcOffset, byte[] dst, int dstOffset, int length) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (length == 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
System.arraycopy(src, srcOffset, dst, dstOffset, length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.1.5 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>DirectArena</span></h4>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm;line-height:
150%'><span lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
PoolArena. DirectArena</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>ByteBuffer</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>方式分配</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>chunk</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt;line-height:150%'><span
lang=EN-US style='line-height:150%;font-family:"Courier New"'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>  static final class
DirectArena extends PoolArena&lt;ByteBuffer&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
DirectArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
pageShifts, int chunkSize, int directMemoryCacheAlignment) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(parent,
pageSize, maxOrder, pageShifts, chunkSize,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
directMemoryCacheAlignment);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean isDirect() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // mark as
package-private, only for unit test</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int
offsetCacheLine(ByteBuffer memory) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // We can only
calculate the offset if Unsafe is present as otherwise directBufferAddress(...)
will</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // throw an NPE.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int remainder =
HAS_UNSAFE</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    ? (int)
(PlatformDependent.directBufferAddress(memory) &amp;
directMemoryCacheAlignmentMask)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    : 0;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // offset =
alignment - address &amp; (alignment - 1)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
directMemoryCacheAlignment - remainder;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PoolChunk&lt;ByteBuffer&gt; newChunk(int pageSize, int maxOrder,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
pageShifts, int chunkSize) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(directMemoryCacheAlignment == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return new
PoolChunk&lt;ByteBuffer&gt;(this,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
allocateDirect(chunkSize), pageSize, maxOrder,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
pageShifts, chunkSize, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final ByteBuffer
memory = allocateDirect(chunkSize</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    +
directMemoryCacheAlignment);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
PoolChunk&lt;ByteBuffer&gt;(this, memory, pageSize,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
maxOrder, pageShifts, chunkSize,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
offsetCacheLine(memory));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PoolChunk&lt;ByteBuffer&gt; newUnpooledChunk(int capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(directMemoryCacheAlignment == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return new
PoolChunk&lt;ByteBuffer&gt;(this,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
allocateDirect(capacity), capacity, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final ByteBuffer
memory = allocateDirect(capacity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    +
directMemoryCacheAlignment);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
PoolChunk&lt;ByteBuffer&gt;(this, memory, capacity,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
offsetCacheLine(memory));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static
ByteBuffer allocateDirect(int capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
PlatformDependent.useDirectBufferNoCleaner() ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
PlatformDependent.allocateDirectNoCleaner(capacity) :
ByteBuffer.allocateDirect(capacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected void
destroyChunk(PoolChunk&lt;ByteBuffer&gt; chunk) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(PlatformDependent.useDirectBufferNoCleaner()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
PlatformDependent.freeDirectNoCleaner(chunk.memory);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
PlatformDependent.freeDirectBuffer(chunk.memory);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected
PooledByteBuf&lt;ByteBuffer&gt; newByteBuf(int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (HAS_UNSAFE)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
PooledUnsafeDirectByteBuf.newInstance(maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return PooledDirectByteBuf.newInstance(maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected void
memoryCopy(ByteBuffer src, int srcOffset, ByteBuffer dst, int dstOffset, int
length) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (length == 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (HAS_UNSAFE)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
PlatformDependent.copyMemory(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
PlatformDependent.directBufferAddress(src) + srcOffset,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
PlatformDependent.directBufferAddress(dst) + dstOffset, length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // We must
duplicate the NIO buffers because they may be accessed by other Netty buffers.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                src =
src.duplicate();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                dst =
dst.duplicate();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
src.position(srcOffset).limit(srcOffset + length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dst.position(dstOffset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dst.put(src);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc127135050"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.2 </span><span
lang=EN-US style='font-size:10.5pt;font-family:"Courier New"'>UnpooledByteBufAllocator</span></a></h3>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. UnpooledByteBufAllocator</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>newHeapBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>HeapBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>分配内存。</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'> </span><span lang=EN-US style='color:black'> @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected ByteBuf
newHeapBuffer(int initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
PlatformDependent.hasUnsafe() ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                new
InstrumentedUnpooledUnsafeHeapByteBuf(this, initialCapacity, maxCapacity) :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                new
InstrumentedUnpooledHeapByteBuf(this, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:12.0pt'><span lang=EN-US
style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. UnpooledByteBufAllocator</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>newDirectBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>DirectBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>分配内存。</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected ByteBuf
newDirectBuffer(int initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final ByteBuf buf;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(PlatformDependent.hasUnsafe()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf = noCleaner
? new InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(this, initialCapacity,
maxCapacity) :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    new
InstrumentedUnpooledUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf = new
InstrumentedUnpooledDirectByteBuf(this, initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
disableLeakDetector ? buf : toLeakAwareBuffer(buf);</span></p>

<p class=COR- style='text-indent:21.0pt'><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.2.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>PoolArena</span></h4>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.UnpooledByteBufAllocator.InstrumentedUnpooledUnsafeHeapByteBuf</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的</span><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>allocateArray</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>方法。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
class InstrumentedUnpooledUnsafeHeapByteBuf extends UnpooledUnsafeHeapByteBuf {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
InstrumentedUnpooledUnsafeHeapByteBuf(UnpooledByteBufAllocator alloc, int
initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(alloc,
initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected byte[]
allocateArray(int initialCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            byte[] bytes = super.allocateArray(initialCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
((UnpooledByteBufAllocator) alloc()).incrementHeap(bytes.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return bytes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer.
UnpooledHeapByteBuf</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>中的</span><span lang=EN-US style='font-size:12.0pt;line-height:
150%'>allocateArray</span><span style='font-size:12.0pt;line-height:150%;
font-family:宋体'>方法。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected byte[]
allocateArray(int initialCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
byte[initialCapacity];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='font-size:
12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>5.2.2 </span><span
lang=EN-US style='font-size:12.0pt;line-height:155%;font-family:"Calibri",sans-serif'>allocateDirect</span></h4>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>io.netty.buffer. UnpooledByteBufAllocator.
InstrumentedUnpooledDirectByteBuf</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>中的</span><span lang=EN-US style='font-size:
12.0pt;line-height:150%'>allocateDirect</span><span style='font-size:12.0pt;
line-height:150%;font-family:宋体'>方法。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>    </span><span lang=EN-US style='color:black'>private static
final class InstrumentedUnpooledDirectByteBuf extends UnpooledDirectByteBuf {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
InstrumentedUnpooledDirectByteBuf(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
UnpooledByteBufAllocator alloc, int initialCapacity, int maxCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(alloc,
initialCapacity, maxCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected ByteBuffer
allocateDirect(int initialCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ByteBuffer
buffer = super.allocateDirect(initialCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
((UnpooledByteBufAllocator) alloc()).incrementDirect(buffer.capacity());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return buffer;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='font-size:12.0pt;line-height:150%'>java.nio. DirectByteBuffer</span><span
style='font-size:12.0pt;line-height:150%;font-family:宋体'>中的直接内存分配</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>DirectByteBuffer(int
cap) {                   // package-private</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(-1, 0, cap,
cap);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean pa =
VM.isDirectMemoryPageAligned();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ps = Bits.pageSize();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long size =
Math.max(1L, (long)cap + (pa ? ps : 0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Bits.reserveMemory(size, cap);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long base = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            base =
unsafe.allocateMemory(size);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(OutOfMemoryError x) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Bits.unreserveMemory(size, cap);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
unsafe.setMemory(base, size, (byte) 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (pa &amp;&amp;
(base % ps != 0)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Round up to
page boundary</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            address = base +
ps - (base &amp; (ps - 1));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            address = base;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        cleaner =
Cleaner.create(this, new Deallocator(base, size, cap));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        att = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
