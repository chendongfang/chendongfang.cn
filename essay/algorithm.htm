<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>算法-陈东方</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:黑体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:微软雅黑;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@黑体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@微软雅黑";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h2
	{margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:172%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h3
	{margin-right:0cm;
	margin-left:0cm;
	font-size:13.5pt;
	font-family:宋体;
	font-weight:bold;}
h4
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:155%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h5
	{mso-style-link:"标题 5 字符";
	margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:156%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"正文文本 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyTextFirstIndent, li.MsoBodyTextFirstIndent, div.MsoBodyTextFirstIndent
	{mso-style-link:"正文文本首行缩进 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
pre
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
span.5
	{mso-style-name:"标题 5 字符";
	mso-style-link:"标题 5";
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
p.COR-, li.COR-, div.COR-
	{mso-style-name:COR-代码;
	mso-style-link:"COR-代码 Char";
	margin-top:7.8pt;
	margin-right:0cm;
	margin-bottom:7.8pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:12.0pt;
	background:#E6E6E6;
	word-break:break-all;
	font-size:10.5pt;
	font-family:"Courier New";}
span.COR-Char
	{mso-style-name:"COR-代码 Char";
	mso-style-link:COR-代码;
	font-family:"Courier New";
	background:#E6E6E6;}
span.a
	{mso-style-name:"正文文本 字符";
	mso-style-link:正文文本;
	font-family:"Calibri",sans-serif;}
span.a0
	{mso-style-name:"正文文本首行缩进 字符";
	mso-style-link:正文文本首行缩进;
	font-family:"Calibri",sans-serif;}
span.a1
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Calibri",sans-serif;}
span.a2
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink="#954F72" style='word-wrap:break-word;
text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<h1 align=center style='text-align:center'><a name="_Toc128265991"><span
lang=EN-US>Algorithm</span></span></a></h1>

<p class=MsoToc1><span
class=MsoHyperlink><span lang=EN-US><a href="#_Toc128265991">Algorithm</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265992">1.<span style='color:windowtext;text-decoration:none'>     </span>Source</a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265993">2.<span style='color:windowtext;text-decoration:none'>     </span>Sort</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265994">2.1 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>冒泡排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265995">2.2 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>选择排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265996">2.3 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>插入排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265997">2.4 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>希尔排<span lang=EN-US>序</span></span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265998">2.5 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>归并排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128265999">2.6 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>快速排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266000">2.7 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>堆排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266001">2.8 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>计数排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266002">2.9 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>桶排序</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266003">2.10 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>基数排序</span></span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266004">3.<span style='color:windowtext;text-decoration:none'>     </span>search</a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266005">3.1 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>顺序查找</span></span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266006">3.2 <span lang=EN-US style='font-family:宋体'><span
lang=EN-US>二分查找</span></span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266007">4.<span style='color:windowtext;text-decoration:none'>     </span>Basis<span
lang=EN-US style='font-family:宋体'><span lang=EN-US>（待补充分治，动态规划，贪心，回溯，分支界限）</span></span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128266008">5.<span style='color:windowtext;text-decoration:none'>     </span><span
lang=EN-US style='font-family:宋体'><span lang=EN-US>参考文献</span></span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265992"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Source</span></a></h2>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java</span><span lang=EN-US> </span><span
lang=EN-US style='color:black;background:white'>Version</span><span
style='font-family:宋体;color:black;background:white'>：</span><span
style='color:black;background:white'> <span lang=EN-US>jdk1.8</span></span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265993"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Sort</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265994"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.1 </span><span
style='font-size:12.0pt'>冒泡排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>冒泡排序</span><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>BubbleSort  </span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class BubbleSort  {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 1; i
&lt; arr.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           boolean flag = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int j = 0; j
&lt; arr.length - i; j++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (arr[j]
&gt; arr[j + 1]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   swap(arr[j],arr[j
+ 1]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    flag = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (flag) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    </span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private void swap(int a,int
b){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int tmp = a;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      a = b;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      b = tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265995"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.2 </span><span
style='font-size:12.0pt'>选择排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>选择排序</span><span
lang=EN-US style='color:black;background:white'>SelectionSort  </span></p>

<p style='margin-top:14.4pt;text-indent:28.0pt;line-height:150%'><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class SelectionSort 
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      for (int i = 0; i &lt;
arr.length - 1; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          int min = i;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          for (int j = i +
1; j &lt; arr.length; j++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             if (arr[j] &lt;
arr[min]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                min = j;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          if (i != min) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             swap(arr[i] ,arr[min]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private void swap(int a, int
b) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int tmp = a;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      a = b;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      b = tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265996"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.3 </span><span
style='font-size:12.0pt'>插入排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>插入排序</span><span
lang=EN-US style='color:black;background:white'>InsertSort</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class InsertSort {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 1; i
&lt; arr.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int tmp = arr[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int j = i;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (j &gt; 0
&amp;&amp; tmp &lt; arr[j - 1]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                arr[j] = arr[j
- 1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                j--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (j != i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                arr[j] = tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265997"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.4 </span><span
style='font-size:12.0pt'>希尔排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>希尔排序</span><span
lang=EN-US style='color:black;background:white'>ShellSort</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class ShellSort {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public static void
shellSort(int[] sourceArray) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int length = arr.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      int temp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      for (int step = length
/ 2; step &gt;= 1; step /= 2) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          for (int i = step;
i &lt; length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             temp = arr[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             int j = i - step;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             while (j &gt;=
0 &amp;&amp; arr[j] &gt; temp) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                arr[j + step]
= arr[j];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                j -= step;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             arr[j + step] =
temp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265998"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.5 </span><span
style='font-size:12.0pt'>归并排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>归并排序</span><span
lang=EN-US style='color:black;background:white'>MergeSort</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class MergeSort {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (arr.length &lt;
2) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int middle = (int)
Math.floor(arr.length / 2);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] left = Arrays.copyOfRange(arr,
0, middle);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] right =
Arrays.copyOfRange(arr, middle, arr.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return merge(sort(left),
sort(right));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int[] merge(int[]
left, int[] right) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] result = new int[left.length
+ right.length];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int i = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (left.length
&gt; 0 &amp;&amp; right.length &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (left[0]
&lt;= right[0]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                result[i++]
= left[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                left =
Arrays.copyOfRange(left, 1, left.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                result[i++]
= right[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                right =
Arrays.copyOfRange(right, 1, right.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (left.length
&gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            result[i++] = left[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            left = Arrays.copyOfRange(left,
1, left.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (right.length
&gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            result[i++] = right[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            right = Arrays.copyOfRange(right,
1, right.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return result;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128265999"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.6 </span><span
style='font-size:12.0pt'>快速排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>快速排序</span><span
lang=EN-US style='color:black;background:white'>QuickSort</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class QuickSort {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return quickSort(arr,
0, arr.length - 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[] quickSort(int[]
arr, int left, int right) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (left &lt; right)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int partitionIndex
= partition(arr, left, right);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            quickSort(arr, left,
partitionIndex - 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            quickSort(arr, partitionIndex
+ 1, right);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int partition(int[]
arr, int left, int right) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int pivot = left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int index = pivot +
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = index; i
&lt;= right; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (arr[i] &lt; arr[pivot])
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                swap(arr, i,
index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                index++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        swap(arr, pivot, index
- 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return index - 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void swap(int[] arr,
int i, int j) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int temp = arr[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[i] = arr[j];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[j] = temp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266000"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.7 </span><span
style='font-size:12.0pt'>堆排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>堆排序</span><span lang=EN-US
style='color:black;background:white'>HeapSort  </span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class HeapSort  {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int len = arr.length;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        buildMaxHeap(arr, len);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = len -
1; i &gt; 0; i--) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            swap(arr, 0, i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            len--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            heapify(arr, 0, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void
buildMaxHeap(int[] arr, int len) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = (int)
Math.floor(len / 2); i &gt;= 0; i--) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            heapify(arr, i, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void heapify(int[]
arr, int i, int len) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int left = 2 * i +
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int right = 2 * i +
2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int largest = i;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (left &lt; len
&amp;&amp; arr[left] &gt; arr[largest]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            largest = left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (right &lt; len
&amp;&amp; arr[right] &gt; arr[largest]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            largest = right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (largest != i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            swap(arr, i, largest);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            heapify(arr, largest,
len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void swap(int[] arr,
int i, int j) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int temp = arr[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[i] = arr[j];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[j] = temp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266001"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.8 </span><span
style='font-size:12.0pt'>计数排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>计数排序</span><span
lang=EN-US style='color:black;background:white'>CountingSort </span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class CountingSort {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxValue =
getMaxValue(arr);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return countingSort(arr,
maxValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[]
countingSort(int[] arr, int maxValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int bucketLen = maxValue
+ 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] bucket = new int[bucketLen];</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int value : arr)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            bucket[value]++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int sortedIndex = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int j = 0; j
&lt; bucketLen; j++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (bucket[j]
&gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                arr[sortedIndex++]
= j;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                bucket[j]--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int getMaxValue(int[]
arr) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxValue = arr[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int value : arr)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (maxValue
&lt; value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                maxValue = value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return maxValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266002"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.9 </span><span
style='font-size:12.0pt'>桶排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>桶排序</span><span lang=EN-US
style='color:black;background:white'>BucketSort  </span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class BucketSort  {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return bucketSort(arr,
5);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[]
bucketSort(int[] arr, int bucketSize) throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (arr.length == 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int minValue = arr[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxValue = arr[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int value : arr)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (value &lt; minValue)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                minValue = value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else if (value
&gt; maxValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                maxValue = value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int bucketCount = (int)
Math.floor((maxValue - minValue) / bucketSize) + 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[][] buckets = new
int[bucketCount][0];</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       </span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; arr.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int index = (int)
Math.floor((arr[i] - minValue) / bucketSize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buckets[index] =
arrAppend(buckets[index], arr[i]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int arrIndex = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int[] bucket : buckets)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (bucket.length
&lt;= 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            </span></p>

<p class=COR-><span lang=EN-US style='color:black'>            sort(bucket);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int value :
bucket) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                arr[arrIndex++]
= value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[] arrAppend(int[]
arr, int value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr = Arrays.copyOf(arr,
arr.length + 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[arr.length - 1]
= value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266003"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.10 </span><span
style='font-size:12.0pt'>基数排序</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>基数排序</span><span
lang=EN-US style='color:black;background:white'>RadixSort</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.sort;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>import java.util.Arrays;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class RadixSort{</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int[] sort(int[] sourceArray)
throws Exception {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int[] arr = Arrays.copyOf(sourceArray,
sourceArray.length);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxDigit =
getMaxDigit(arr);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return radixSort(arr,
maxDigit);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int getMaxDigit(int[]
arr) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxValue =
getMaxValue(arr);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return getNumLenght(maxValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int getMaxValue(int[]
arr) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int maxValue = arr[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int value : arr)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (maxValue
&lt; value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                maxValue = value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return maxValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int
getNumLenght(long num) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (num == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int lenght = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (long temp = num;
temp != 0; temp /= 10) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            lenght++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return lenght;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[] radixSort(int[]
arr, int maxDigit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int mod = 10;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int dev = 1;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; maxDigit; i++, dev *= 10, mod *= 10) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int[][] counter
= new int[mod * 2][0];</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int j = 0; j
&lt; arr.length; j++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int bucket =
((arr[j] % mod) / dev) + mod;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                counter[bucket]
= arrayAppend(counter[bucket], arr[j]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int pos = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int[] bucket
: counter) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int value
: bucket) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    arr[pos++]
= value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int[]
arrayAppend(int[] arr, int value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr = Arrays.copyOf(arr,
arr.length + 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        arr[arr.length - 1]
= value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return arr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266004"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>search</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266005"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.1 </span><span
style='font-size:12.0pt'>顺序查找</span></a></h3>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span style='font-family:宋体;
color:black;background:white'>顺序查找</span><span lang=EN-US style='font-size:
14.0pt;line-height:150%;font-family:Consolas;color:black'>BasicSearch</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.search;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class BasicSearch{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public  int search(int[]
arr, int number){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; arr.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if(arr[i] == number){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return i;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266006"><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.2 </span><span
style='font-size:12.0pt'>二分查找</span></a></h3>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span style='font-family:宋体;
color:black;background:white'>二分查找</span><span lang=EN-US style='color:black;
background:white'>BinarySearch</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>package
cn.chendongfang.algorithm.search;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class BinarySearch {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public  int
binarySearch(int[] arr, int number){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        //1.</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>定义两个变量记录要查找的范围</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int min = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int max = arr.length
- 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'> </span></p>

<p class=COR-><span lang=EN-US style='color:black'>        //2.</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>利用循环不断的去找要查找的数据</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while(true){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if(min &gt; max){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            //3.</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>找到</span><span
lang=EN-US style='color:black'>min</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>和</span><span lang=EN-US style='color:black'>max</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>的中间位置</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int mid = (min +
max) / 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            //4.</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>拿着</span><span
lang=EN-US style='color:black'>mid</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>指向的元素跟要查找的元素进行比较</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if(arr[mid] &gt;
number){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //4.1 number</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>在</span><span
lang=EN-US style='color:black'>mid</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>的左边</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //min</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>不变，</span><span
lang=EN-US style='color:black'>max = mid - 1</span><span lang=AR-SA
style='font-family:"微软雅黑",sans-serif;color:black'>；</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                max = mid -
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }else if(arr[mid]
&lt; number){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //4.2 number</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>在</span><span
lang=EN-US style='color:black'>mid</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>的右边</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //max</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>不变，</span><span
lang=EN-US style='color:black'>min = mid + 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                min = mid +
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }else{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //4.3 number</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>跟</span><span
lang=EN-US style='color:black'>mid</span><span lang=AR-SA style='font-family:
"微软雅黑",sans-serif;color:black'>指向的元素一样</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //</span><span
lang=AR-SA style='font-family:"微软雅黑",sans-serif;color:black'>找到了</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return mid;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'> </span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='margin-top:4.8pt;margin-right:0cm;margin-bottom:0cm;
margin-left:1.2pt;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
12.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='margin-top:4.8pt;margin-right:0cm;margin-bottom:0cm;
margin-left:1.2pt;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
12.0pt'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266007"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>Basis</span></a><span
style='font-size:12.0pt;line-height:172%;font-family:黑体'>（待补充分治，动态规划，贪心，回溯，分支界限）</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128266008"><span
lang=EN-US style='font-size:12.0pt;line-height:172%;font-family:"Calibri",sans-serif'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:12.0pt;line-height:172%;font-family:黑体'>参考文献</span></a></h2>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>菜鸟教程</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'><a
href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html"><span
style='color:black;text-decoration:none'>https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</span></a></span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>查找算法</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>https://blog.csdn.net/weixin_38189581/article/details/128199173</span></p>

</div>

</body>

</html>
