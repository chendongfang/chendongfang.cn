<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>java-陈东方</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:黑体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:等线;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"等线 Light";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Segoe UI Emoji";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:微软雅黑;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:-apple-system;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:Marlett;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Arial Black";
	panose-1:2 11 10 4 2 1 2 2 2 4;}
@font-face
	{font-family:"Bahnschrift Light";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiLight";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Bahnschrift;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiBold";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift Light SemiCondensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiLight SemiConde";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiCondensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiBold SemiConden";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift Light Condensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiLight Condensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift Condensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Bahnschrift SemiBold Condensed";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Candara;
	panose-1:2 14 5 2 3 3 3 2 2 4;}
@font-face
	{font-family:"Candara Light";
	panose-1:2 14 5 2 3 3 3 2 2 4;}
@font-face
	{font-family:"Comic Sans MS";
	panose-1:3 15 7 2 3 3 2 2 2 4;}
@font-face
	{font-family:Constantia;
	panose-1:2 3 6 2 5 3 6 3 3 3;}
@font-face
	{font-family:Corbel;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"Corbel Light";
	panose-1:2 11 3 3 2 2 4 2 2 4;}
@font-face
	{font-family:Ebrima;
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Franklin Gothic Medium";
	panose-1:2 11 6 3 2 1 2 2 2 4;}
@font-face
	{font-family:Gabriola;
	panose-1:4 4 6 5 5 16 2 2 13 2;}
@font-face
	{font-family:Gadugi;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Georgia;
	panose-1:2 4 5 2 5 4 5 2 3 3;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"Ink Free";
	panose-1:3 8 4 2 0 5 0 0 0 0;}
@font-face
	{font-family:"Javanese Text";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Leelawadee UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Leelawadee UI Semilight";
	panose-1:2 11 4 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;}
@font-face
	{font-family:"Lucida Sans Unicode";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Malgun Gothic";
	panose-1:2 11 5 3 2 0 0 2 0 4;}
@font-face
	{font-family:"\@Malgun Gothic";}
@font-face
	{font-family:"Malgun Gothic Semilight";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@Malgun Gothic Semilight";}
@font-face
	{font-family:"Microsoft Himalaya";
	panose-1:1 1 1 0 1 1 1 1 1 1;}
@font-face
	{font-family:"Microsoft JhengHei";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Microsoft JhengHei";}
@font-face
	{font-family:"Microsoft JhengHei UI";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Microsoft JhengHei UI";}
@font-face
	{font-family:"Microsoft JhengHei Light";
	panose-1:2 11 3 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Microsoft JhengHei Light";}
@font-face
	{font-family:"Microsoft JhengHei UI Light";
	panose-1:2 11 3 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Microsoft JhengHei UI Light";}
@font-face
	{font-family:"Microsoft New Tai Lue";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Microsoft PhagsPa";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Microsoft Sans Serif";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Microsoft Tai Le";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@微软雅黑";}
@font-face
	{font-family:"Microsoft YaHei UI";
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"\@Microsoft YaHei UI";}
@font-face
	{font-family:"微软雅黑 Light";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@微软雅黑 Light";}
@font-face
	{font-family:"Microsoft YaHei UI Light";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@Microsoft YaHei UI Light";}
@font-face
	{font-family:"Microsoft Yi Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU-ExtB";}
@font-face
	{font-family:PMingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@PMingLiU-ExtB";}
@font-face
	{font-family:MingLiU_HKSCS-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU_HKSCS-ExtB";}
@font-face
	{font-family:"Mongolian Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"MS UI Gothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS UI Gothic";}
@font-face
	{font-family:"MS PGothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS PGothic";}
@font-face
	{font-family:"MV Boli";
	panose-1:2 0 5 0 3 2 0 9 0 0;}
@font-face
	{font-family:"Myanmar Text";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Nirmala UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Nirmala UI Semilight";
	panose-1:2 11 4 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe Fluent Icons";
	panose-1:5 10 1 2 1 1 1 1 1 1;}
@font-face
	{font-family:"Segoe MDL2 Assets";
	panose-1:5 10 1 2 1 1 1 1 1 1;}
@font-face
	{font-family:"Segoe Print";
	panose-1:2 0 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe Script";
	panose-1:3 11 5 4 2 0 0 0 0 3;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Black";
	panose-1:2 11 10 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Historic";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Light";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Semibold";
	panose-1:2 11 7 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Semilight";
	panose-1:2 11 4 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Symbol";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Variable Small Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Small Semilig";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Small";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Small Semibol";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Text Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Text Semiligh";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Text";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Text Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Display Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Display Semil";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Display";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Segoe UI Variable Display Semib";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:新宋体;
	panose-1:2 1 6 9 3 1 1 1 1 1;}
@font-face
	{font-family:"\@新宋体";}
@font-face
	{font-family:SimSun-ExtB;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun-ExtB";}
@font-face
	{font-family:"Sitka Small";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Small Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Text";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Text Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Subheading";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Subheading Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Heading";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Heading Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Display";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Display Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Banner";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Sitka Banner Semibold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
@font-face
	{font-family:Webdings;
	panose-1:5 3 1 2 1 5 9 6 7 3;}
@font-face
	{font-family:"\@Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Yu Gothic UI";
	panose-1:2 11 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic UI";}
@font-face
	{font-family:"Yu Gothic UI Semibold";
	panose-1:2 11 7 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic UI Semibold";}
@font-face
	{font-family:"Yu Gothic Light";
	panose-1:2 11 3 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic Light";}
@font-face
	{font-family:"Yu Gothic UI Light";
	panose-1:2 11 3 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic UI Light";}
@font-face
	{font-family:"Yu Gothic Medium";
	panose-1:2 11 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic Medium";}
@font-face
	{font-family:"Yu Gothic UI Semilight";
	panose-1:2 11 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Yu Gothic UI Semilight";}
@font-face
	{font-family:"\@等线";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@等线 Light";}
@font-face
	{font-family:仿宋;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@仿宋";}
@font-face
	{font-family:楷体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@楷体";}
@font-face
	{font-family:"\@黑体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"HoloLens MDL2 Assets";
	panose-1:5 10 1 2 1 1 1 1 1 1;}
@font-face
	{font-family:"MT Extra";
	panose-1:5 5 1 2 1 2 5 2 2 2;}
@font-face
	{font-family:"Agency FB";
	panose-1:2 11 5 3 2 2 2 2 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 6 6 2 2 2 3 2 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:"Baskerville Old Face";
	panose-1:2 2 6 2 8 5 5 2 3 3;}
@font-face
	{font-family:"Bauhaus 93";
	panose-1:4 3 9 5 2 11 2 2 12 2;}
@font-face
	{font-family:"Bell MT";
	panose-1:2 2 5 3 6 3 5 2 3 3;}
@font-face
	{font-family:"Bernard MT Condensed";
	panose-1:2 5 8 6 6 9 5 2 4 4;}
@font-face
	{font-family:"Bodoni MT";
	panose-1:2 7 6 3 8 6 6 2 2 3;}
@font-face
	{font-family:"Bodoni MT Black";
	panose-1:2 7 10 3 8 6 6 2 2 3;}
@font-face
	{font-family:"Bodoni MT Condensed";
	panose-1:2 7 6 6 8 6 6 2 2 3;}
@font-face
	{font-family:"Bodoni MT Poster Compressed";
	panose-1:2 7 7 6 8 6 1 5 2 4;}
@font-face
	{font-family:"Bookman Old Style";
	panose-1:2 5 6 4 5 5 5 2 2 4;}
@font-face
	{font-family:"Bradley Hand ITC";
	panose-1:3 7 4 2 5 3 2 3 2 3;}
@font-face
	{font-family:"Britannic Bold";
	panose-1:2 11 9 3 6 7 3 2 2 4;}
@font-face
	{font-family:"Berlin Sans FB";
	panose-1:2 14 6 2 2 5 2 2 3 6;}
@font-face
	{font-family:"Berlin Sans FB Demi";
	panose-1:2 14 8 2 2 5 2 2 3 6;}
@font-face
	{font-family:Broadway;
	panose-1:4 4 9 5 8 11 2 2 5 2;}
@font-face
	{font-family:"Brush Script MT";
	panose-1:3 6 8 2 4 4 6 7 3 4;}
@font-face
	{font-family:"Bookshelf Symbol 7";
	panose-1:5 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Californian FB";
	panose-1:2 7 4 3 6 8 11 3 2 4;}
@font-face
	{font-family:"Calisto MT";
	panose-1:2 4 6 3 5 5 5 3 3 4;}
@font-face
	{font-family:Castellar;
	panose-1:2 10 4 2 6 4 6 1 3 1;}
@font-face
	{font-family:"Century Schoolbook";
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:Centaur;
	panose-1:2 3 5 4 5 2 5 2 3 4;}
@font-face
	{font-family:Chiller;
	panose-1:4 2 4 4 3 16 7 2 6 2;}
@font-face
	{font-family:"Colonna MT";
	panose-1:4 2 8 5 6 2 2 3 2 3;}
@font-face
	{font-family:"Cooper Black";
	panose-1:2 8 9 4 4 3 11 2 4 4;}
@font-face
	{font-family:"Copperplate Gothic Bold";
	panose-1:2 14 7 5 2 2 6 2 4 4;}
@font-face
	{font-family:"Copperplate Gothic Light";
	panose-1:2 14 5 7 2 2 6 2 4 4;}
@font-face
	{font-family:"Curlz MT";
	panose-1:4 4 4 4 5 7 2 2 2 2;}
@font-face
	{font-family:Dubai;
	panose-1:2 11 5 3 3 4 3 3 2 4;}
@font-face
	{font-family:"Dubai Light";
	panose-1:2 11 3 3 3 4 3 3 2 4;}
@font-face
	{font-family:"Dubai Medium";
	panose-1:2 11 6 3 3 4 3 3 2 4;}
@font-face
	{font-family:Elephant;
	panose-1:2 2 9 4 9 5 5 2 3 3;}
@font-face
	{font-family:"Engravers MT";
	panose-1:2 9 7 7 8 5 5 2 3 4;}
@font-face
	{font-family:"Eras Bold ITC";
	panose-1:2 11 9 7 3 5 4 2 2 4;}
@font-face
	{font-family:"Eras Demi ITC";
	panose-1:2 11 8 5 3 5 4 2 8 4;}
@font-face
	{font-family:"Eras Light ITC";
	panose-1:2 11 4 2 3 5 4 2 8 4;}
@font-face
	{font-family:"Eras Medium ITC";
	panose-1:2 11 6 2 3 5 4 2 8 4;}
@font-face
	{font-family:"Felix Titling";
	panose-1:4 6 5 5 6 2 2 2 10 4;}
@font-face
	{font-family:Forte;
	panose-1:3 6 9 2 4 5 2 7 2 3;}
@font-face
	{font-family:"Franklin Gothic Book";
	panose-1:2 11 5 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Demi";
	panose-1:2 11 7 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Demi Cond";
	panose-1:2 11 7 6 3 4 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Heavy";
	panose-1:2 11 9 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Medium Cond";
	panose-1:2 11 6 6 3 4 2 2 2 4;}
@font-face
	{font-family:"Freestyle Script";
	panose-1:3 8 4 2 3 2 5 11 4 4;}
@font-face
	{font-family:"French Script MT";
	panose-1:3 2 4 2 4 6 7 4 6 5;}
@font-face
	{font-family:"Footlight MT Light";
	panose-1:2 4 6 2 6 3 10 2 3 4;}
@font-face
	{font-family:方正舒体;
	panose-1:2 1 6 1 3 1 1 1 1 1;}
@font-face
	{font-family:"\@方正舒体";}
@font-face
	{font-family:方正姚体;
	panose-1:2 1 6 1 3 1 1 1 1 1;}
@font-face
	{font-family:"\@方正姚体";}
@font-face
	{font-family:Garamond;
	panose-1:2 2 4 4 3 3 1 1 8 3;}
@font-face
	{font-family:Gigi;
	panose-1:4 4 5 4 6 16 7 2 13 2;}
@font-face
	{font-family:"Gill Sans MT";
	panose-1:2 11 5 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans MT Condensed";
	panose-1:2 11 5 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Ultra Bold Condensed";
	panose-1:2 11 10 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Ultra Bold";
	panose-1:2 11 10 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gloucester MT Extra Condensed";
	panose-1:2 3 8 8 2 6 1 1 1 1;}
@font-face
	{font-family:"Gill Sans MT Ext Condensed Bold";
	panose-1:2 11 9 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Century Gothic";
	panose-1:2 11 5 2 2 2 2 2 2 4;}
@font-face
	{font-family:"Goudy Old Style";
	panose-1:2 2 5 2 5 3 5 2 3 3;}
@font-face
	{font-family:"Goudy Stout";
	panose-1:2 2 9 4 7 3 11 2 4 1;}
@font-face
	{font-family:"Harlow Solid Italic";
	panose-1:4 3 6 4 2 15 2 2 13 2;}
@font-face
	{font-family:Harrington;
	panose-1:4 4 5 5 5 10 2 2 7 2;}
@font-face
	{font-family:Haettenschweiler;
	panose-1:2 11 7 6 4 9 2 6 2 4;}
@font-face
	{font-family:"High Tower Text";
	panose-1:2 4 5 2 5 5 6 3 3 3;}
@font-face
	{font-family:"Imprint MT Shadow";
	panose-1:4 2 6 5 6 3 3 3 2 2;}
@font-face
	{font-family:"Informal Roman";
	panose-1:3 6 4 2 3 4 6 11 2 4;}
@font-face
	{font-family:"Blackadder ITC";
	panose-1:4 2 5 5 5 16 7 2 13 2;}
@font-face
	{font-family:"Edwardian Script ITC";
	panose-1:3 3 3 2 4 7 7 13 8 4;}
@font-face
	{font-family:"Kristen ITC";
	panose-1:3 5 5 2 4 2 2 3 2 2;}
@font-face
	{font-family:Jokerman;
	panose-1:4 9 6 5 6 13 6 2 7 2;}
@font-face
	{font-family:"Juice ITC";
	panose-1:4 4 4 3 4 10 2 2 2 2;}
@font-face
	{font-family:"Kunstler Script";
	panose-1:3 3 4 2 2 6 7 13 13 6;}
@font-face
	{font-family:"Wide Latin";
	panose-1:2 10 10 7 5 5 5 2 4 4;}
@font-face
	{font-family:"Lucida Bright";
	panose-1:2 4 6 2 5 5 5 2 3 4;}
@font-face
	{font-family:"Lucida Calligraphy";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Lucida Fax";
	panose-1:2 6 6 2 5 5 5 2 2 4;}
@font-face
	{font-family:"Lucida Handwriting";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Lucida Sans";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;}
@font-face
	{font-family:Magneto;
	panose-1:4 3 8 5 5 8 2 2 13 2;}
@font-face
	{font-family:"Maiandra GD";
	panose-1:2 14 5 2 3 3 8 2 2 4;}
@font-face
	{font-family:"Matura MT Script Capitals";
	panose-1:3 2 8 2 6 6 2 7 2 2;}
@font-face
	{font-family:Mistral;
	panose-1:3 9 7 2 3 4 7 2 4 3;}
@font-face
	{font-family:"Modern No\. 20";
	panose-1:2 7 7 4 7 5 5 2 3 3;}
@font-face
	{font-family:"Monotype Corsiva";
	panose-1:3 1 1 1 1 2 1 1 1 1;}
@font-face
	{font-family:"Niagara Engraved";
	panose-1:4 2 5 2 7 7 3 3 2 2;}
@font-face
	{font-family:"Niagara Solid";
	panose-1:4 2 5 2 7 7 2 2 2 2;}
@font-face
	{font-family:"OCR A Extended";
	panose-1:2 1 5 9 2 1 2 1 3 3;}
@font-face
	{font-family:"Old English Text MT";
	panose-1:3 4 9 2 4 5 8 3 8 6;}
@font-face
	{font-family:Onyx;
	panose-1:4 5 6 2 8 7 2 2 2 3;}
@font-face
	{font-family:"MS Outlook";
	panose-1:5 1 1 0 1 0 0 0 0 0;}
@font-face
	{font-family:"Palace Script MT";
	panose-1:3 3 3 2 2 6 7 12 11 5;}
@font-face
	{font-family:Papyrus;
	panose-1:3 7 5 2 6 5 2 3 2 5;}
@font-face
	{font-family:Parchment;
	panose-1:3 4 6 2 4 7 8 4 8 4;}
@font-face
	{font-family:Perpetua;
	panose-1:2 2 5 2 6 4 1 2 3 3;}
@font-face
	{font-family:"Perpetua Titling MT";
	panose-1:2 2 5 2 6 5 5 2 8 4;}
@font-face
	{font-family:Playbill;
	panose-1:4 5 6 3 10 6 2 2 2 2;}
@font-face
	{font-family:"Poor Richard";
	panose-1:2 8 5 2 5 5 5 2 7 2;}
@font-face
	{font-family:Pristina;
	panose-1:3 6 4 2 4 4 6 8 2 4;}
@font-face
	{font-family:"Rage Italic";
	panose-1:3 7 5 2 4 5 7 7 3 4;}
@font-face
	{font-family:Ravie;
	panose-1:4 4 8 5 5 8 9 2 6 2;}
@font-face
	{font-family:"MS Reference Sans Serif";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"MS Reference Specialty";
	panose-1:5 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Rockwell Condensed";
	panose-1:2 6 6 3 5 4 5 2 1 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Rockwell Extra Bold";
	panose-1:2 6 9 3 4 5 5 2 4 3;}
@font-face
	{font-family:"Script MT Bold";
	panose-1:3 4 6 2 4 6 7 8 9 4;}
@font-face
	{font-family:"Showcard Gothic";
	panose-1:4 2 9 4 2 1 2 2 6 4;}
@font-face
	{font-family:隶书;
	panose-1:2 1 5 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@隶书";}
@font-face
	{font-family:幼圆;
	panose-1:2 1 5 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@幼圆";}
@font-face
	{font-family:"Snap ITC";
	panose-1:4 4 10 7 6 10 2 2 2 2;}
@font-face
	{font-family:华文彩云;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文彩云";}
@font-face
	{font-family:Stencil;
	panose-1:4 4 9 5 13 8 2 2 4 4;}
@font-face
	{font-family:华文仿宋;
	panose-1:2 1 6 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文仿宋";}
@font-face
	{font-family:华文琥珀;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文琥珀";}
@font-face
	{font-family:华文楷体;
	panose-1:2 1 6 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文楷体";}
@font-face
	{font-family:华文隶书;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文隶书";}
@font-face
	{font-family:华文宋体;
	panose-1:2 1 6 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文宋体";}
@font-face
	{font-family:华文细黑;
	panose-1:2 1 6 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文细黑";}
@font-face
	{font-family:华文行楷;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文行楷";}
@font-face
	{font-family:华文新魏;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文新魏";}
@font-face
	{font-family:华文中宋;
	panose-1:2 1 6 0 4 1 1 1 1 1;}
@font-face
	{font-family:"\@华文中宋";}
@font-face
	{font-family:"Tw Cen MT";
	panose-1:2 11 6 2 2 1 4 2 6 3;}
@font-face
	{font-family:"Tw Cen MT Condensed";
	panose-1:2 11 6 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Tw Cen MT Condensed Extra Bold";
	panose-1:2 11 8 3 2 2 2 2 2 4;}
@font-face
	{font-family:"Tempus Sans ITC";
	panose-1:4 2 4 4 3 13 7 2 2 2;}
@font-face
	{font-family:"Viner Hand ITC";
	panose-1:3 7 5 2 3 5 2 2 2 3;}
@font-face
	{font-family:Vivaldi;
	panose-1:3 2 6 2 5 5 6 9 8 4;}
@font-face
	{font-family:"Vladimir Script";
	panose-1:3 5 4 2 4 4 7 7 3 5;}
@font-face
	{font-family:"Wingdings 2";
	panose-1:5 2 1 2 1 5 7 7 7 7;}
@font-face
	{font-family:"Wingdings 3";
	panose-1:5 4 1 2 1 8 7 7 7 7;}
@font-face
	{font-family:icomoon;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"DejaVu Sans Mono";
	panose-1:2 11 6 9 3 8 4 2 2 4;}
@font-face
	{font-family:"DejaVu Math TeX Gyre";
	panose-1:2 0 5 3 0 0 0 0 0 0;}
@font-face
	{font-family:Arvo;
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Droid Serif";
	panose-1:2 2 6 0 6 5 0 2 2 0;}
@font-face
	{font-family:"Indie Flower";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Lobster;
	panose-1:2 0 5 6 0 0 0 2 0 3;}
@font-face
	{font-family:"Open Sans";
	panose-1:2 11 6 6 3 5 4 2 2 4;}
@font-face
	{font-family:"Poiret One";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raleway;
	panose-1:2 11 0 3 3 1 1 6 0 3;}
@font-face
	{font-family:Roboto;
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Roboto Condensed";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Roboto Slab";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cascadia Code ExtraLight";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Code Light";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Code SemiLight";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Code";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Code SemiBold";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Mono ExtraLight";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Mono Light";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Mono SemiLight";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Mono";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:"Cascadia Mono SemiBold";
	panose-1:2 11 6 9 2 0 0 2 0 4;}
@font-face
	{font-family:Abadi;}
@font-face
	{font-family:"Abadi Extra Light";}
@font-face
	{font-family:Abel;}
@font-face
	{font-family:"Abril Fatface";}
@font-face
	{font-family:"ADLaM Display";}
@font-face
	{font-family:Aharoni;}
@font-face
	{font-family:"Al Fresco";}
@font-face
	{font-family:Aldhabi;}
@font-face
	{font-family:Alef;}
@font-face
	{font-family:Aleo;}
@font-face
	{font-family:"Aleo Light";}
@font-face
	{font-family:"Amasis MT Pro";}
@font-face
	{font-family:"Amasis MT Pro Black";}
@font-face
	{font-family:"Amasis MT Pro Light";}
@font-face
	{font-family:"Amasis MT Pro Medium";}
@font-face
	{font-family:"Amatic SC";}
@font-face
	{font-family:AngsanaUPC;}
@font-face
	{font-family:Anton;}
@font-face
	{font-family:Aparajita;}
@font-face
	{font-family:"Arabic Typesetting";}
@font-face
	{font-family:"Aref Ruqaa";}
@font-face
	{font-family:"Arial Nova";}
@font-face
	{font-family:"Arial Nova Cond";}
@font-face
	{font-family:"Arial Nova Cond Light";}
@font-face
	{font-family:"Arial Nova Light";}
@font-face
	{font-family:Assistant;}
@font-face
	{font-family:"Assistant ExtraBold";}
@font-face
	{font-family:"Assistant ExtraLight";}
@font-face
	{font-family:"Assistant Light";}
@font-face
	{font-family:"Assistant SemiBold";}
@font-face
	{font-family:Athiti;}
@font-face
	{font-family:"Athiti ExtraLight";}
@font-face
	{font-family:"Athiti Light";}
@font-face
	{font-family:"Athiti Medium";}
@font-face
	{font-family:"Athiti SemiBold";}
@font-face
	{font-family:"Avenir Next LT Pro";}
@font-face
	{font-family:"Avenir Next LT Pro Demi";}
@font-face
	{font-family:"Avenir Next LT Pro Light";}
@font-face
	{font-family:"Baguet Script";}
@font-face
	{font-family:Barlow;}
@font-face
	{font-family:"Barlow Black";}
@font-face
	{font-family:"Barlow Condensed";}
@font-face
	{font-family:"Barlow Condensed Black";}
@font-face
	{font-family:"Barlow Condensed ExtraBold";}
@font-face
	{font-family:"Barlow Condensed ExtraLight";}
@font-face
	{font-family:"Barlow Condensed Light";}
@font-face
	{font-family:"Barlow Condensed Medium";}
@font-face
	{font-family:"Barlow Condensed SemiBold";}
@font-face
	{font-family:"Barlow Condensed Thin";}
@font-face
	{font-family:"Barlow ExtraBold";}
@font-face
	{font-family:"Barlow ExtraLight";}
@font-face
	{font-family:"Barlow Light";}
@font-face
	{font-family:"Barlow Medium";}
@font-face
	{font-family:"Barlow Semi Condensed";}
@font-face
	{font-family:"Barlow Semi Condensed Black";}
@font-face
	{font-family:"Barlow Semi Condensed ExLight";}
@font-face
	{font-family:"Barlow Semi Condensed ExtraBold";}
@font-face
	{font-family:"Barlow Semi Condensed Light";}
@font-face
	{font-family:"Barlow Semi Condensed Medium";}
@font-face
	{font-family:"Barlow Semi Condensed SemiBold";}
@font-face
	{font-family:"Barlow Semi Condensed Thin";}
@font-face
	{font-family:"Barlow SemiBold";}
@font-face
	{font-family:"Barlow Thin";}
@font-face
	{font-family:BatangChe;}
@font-face
	{font-family:"Bebas Neue";}
@font-face
	{font-family:Bembo;}
@font-face
	{font-family:Bierstadt;}
@font-face
	{font-family:"Bierstadt Display";}
@font-face
	{font-family:BierstadtAlt;}
@font-face
	{font-family:"BierstadtAlt2 Cond";}
@font-face
	{font-family:"BierstadtAlt3 Cond";}
@font-face
	{font-family:"BierstadtAlt4 Cond";}
@font-face
	{font-family:BierstadtAlt5;}
@font-face
	{font-family:Biome;}
@font-face
	{font-family:"Biome Light";}
@font-face
	{font-family:"Boucherie Sans";}
@font-face
	{font-family:"Browallia New";}
@font-face
	{font-family:BrowalliaUPC;}
@font-face
	{font-family:"Buxton Sketch";}
@font-face
	{font-family:"Caveat Brush";}
@font-face
	{font-family:Cavolini;}
@font-face
	{font-family:"Chamberi Super Display";}
@font-face
	{font-family:Charmonman;}
@font-face
	{font-family:Chonburi;}
@font-face
	{font-family:"Cochocib Script Latin Pro";}
@font-face
	{font-family:"Concert One";}
@font-face
	{font-family:Cond;}
@font-face
	{font-family:Congenial;}
@font-face
	{font-family:"Congenial Black";}
@font-face
	{font-family:"Congenial Light";}
@font-face
	{font-family:"Congenial SemiBold";}
@font-face
	{font-family:"Congenial UltraLight";}
@font-face
	{font-family:Convection;}
@font-face
	{font-family:"Convection Condensed";}
@font-face
	{font-family:"Convection Extra Bold";}
@font-face
	{font-family:"Convection Symbol";}
@font-face
	{font-family:"Convection UI";}
@font-face
	{font-family:CordiaUPC;}
@font-face
	{font-family:Dante;}
@font-face
	{font-family:DaunPenh;}
@font-face
	{font-family:David;}
@font-face
	{font-family:Daytona;}
@font-face
	{font-family:"Daytona Condensed";}
@font-face
	{font-family:"Daytona Condensed Light";}
@font-face
	{font-family:"Daytona Light";}
@font-face
	{font-family:"Didact Gothic";}
@font-face
	{font-family:DilleniaUPC;}
@font-face
	{font-family:"DM Mono";}
@font-face
	{font-family:"DM Mono Light";}
@font-face
	{font-family:"DM Mono Medium";}
@font-face
	{font-family:"DM Sans";}
@font-face
	{font-family:"DM Sans Medium";}
@font-face
	{font-family:"DM Serif Display";}
@font-face
	{font-family:"DM Serif Text";}
@font-face
	{font-family:DokChampa;}
@font-face
	{font-family:Dosis;}
@font-face
	{font-family:"Dosis ExtraBold";}
@font-face
	{font-family:"Dosis ExtraLight";}
@font-face
	{font-family:"Dosis Light";}
@font-face
	{font-family:"Dosis Medium";}
@font-face
	{font-family:"Dosis SemiBold";}
@font-face
	{font-family:DotumChe;}
@font-face
	{font-family:"Dreaming Outloud Pro";}
@font-face
	{font-family:"Dreaming Outloud Script Pro";}
@font-face
	{font-family:"EB Garamond";}
@font-face
	{font-family:"EB Garamond ExtraBold";}
@font-face
	{font-family:"EB Garamond Medium";}
@font-face
	{font-family:"EB Garamond SemiBold";}
@font-face
	{font-family:"Elephant Pro";}
@font-face
	{font-family:EucrosiaUPC;}
@font-face
	{font-family:Euphemia;}
@font-face
	{font-family:Fahkwang;}
@font-face
	{font-family:"Fahkwang ExtraLight";}
@font-face
	{font-family:"Fahkwang Light";}
@font-face
	{font-family:"Fahkwang Medium";}
@font-face
	{font-family:"Fahkwang SemiBold";}
@font-face
	{font-family:"Fairwater Script";}
@font-face
	{font-family:"Fairwater Script Light";}
@font-face
	{font-family:"Fave Script Bold Pro";}
@font-face
	{font-family:"Fira Code";}
@font-face
	{font-family:"Fira Code Light";}
@font-face
	{font-family:"Fira Code Medium";}
@font-face
	{font-family:"Fira Code Retina";}
@font-face
	{font-family:"Fira Mono";}
@font-face
	{font-family:"Fira Mono Medium";}
@font-face
	{font-family:"Fira Sans";}
@font-face
	{font-family:"Fira Sans Black";}
@font-face
	{font-family:"Fira Sans Condensed";}
@font-face
	{font-family:"Fira Sans Condensed Black";}
@font-face
	{font-family:"Fira Sans Condensed ExtraBold";}
@font-face
	{font-family:"Fira Sans Condensed ExtraLight";}
@font-face
	{font-family:"Fira Sans Condensed Light";}
@font-face
	{font-family:"Fira Sans Condensed Medium";}
@font-face
	{font-family:"Fira Sans Condensed SemiBold";}
@font-face
	{font-family:"Fira Sans Condensed Thin";}
@font-face
	{font-family:"Fira Sans Extra Condensed";}
@font-face
	{font-family:"Fira Sans Extra Condensed Black";}
@font-face
	{font-family:"Fira Sans Extra Condensed Light";}
@font-face
	{font-family:"Fira Sans Extra Condensed Thin";}
@font-face
	{font-family:"Fira Sans ExtraBold";}
@font-face
	{font-family:"Fira Sans ExtraLight";}
@font-face
	{font-family:"Fira Sans Light";}
@font-face
	{font-family:"Fira Sans Medium";}
@font-face
	{font-family:"Fira Sans SemiBold";}
@font-face
	{font-family:"Fira Sans Thin";}
@font-face
	{font-family:"Fjalla One";}
@font-face
	{font-family:"Forte Forward";}
@font-face
	{font-family:"Frank Ruhl Libre";}
@font-face
	{font-family:"Frank Ruhl Libre Black";}
@font-face
	{font-family:"Frank Ruhl Libre Light";}
@font-face
	{font-family:"Frank Ruhl Libre Medium";}
@font-face
	{font-family:FrankRuehl;}
@font-face
	{font-family:"Fredoka One";}
@font-face
	{font-family:FreesiaUPC;}
@font-face
	{font-family:Gabriela;}
@font-face
	{font-family:Gaegu;}
@font-face
	{font-family:"Gaegu Light";}
@font-face
	{font-family:"Georgia Pro";}
@font-face
	{font-family:"Georgia Pro Black";}
@font-face
	{font-family:"Georgia Pro Cond";}
@font-face
	{font-family:"Georgia Pro Cond Black";}
@font-face
	{font-family:"Georgia Pro Cond Light";}
@font-face
	{font-family:"Georgia Pro Cond Semibold";}
@font-face
	{font-family:"Georgia Pro Light";}
@font-face
	{font-family:"Georgia Pro Semibold";}
@font-face
	{font-family:"Gill Sans Nova";}
@font-face
	{font-family:"Gill Sans Nova Cond";}
@font-face
	{font-family:"Gill Sans Nova Cond Lt";}
@font-face
	{font-family:"Gill Sans Nova Cond Ultra Bold";}
@font-face
	{font-family:"Gill Sans Nova Cond XBd";}
@font-face
	{font-family:"Gill Sans Nova Light";}
@font-face
	{font-family:"Gill Sans Nova Ultra Bold";}
@font-face
	{font-family:Gisha;}
@font-face
	{font-family:"Goudy Type";}
@font-face
	{font-family:Grandview;}
@font-face
	{font-family:"Grandview Display";}
@font-face
	{font-family:Grotesque;}
@font-face
	{font-family:"Grotesque Light";}
@font-face
	{font-family:GulimChe;}
@font-face
	{font-family:Gungsuh;}
@font-face
	{font-family:GungsuhChe;}
@font-face
	{font-family:"Hadassah Friedlaender";}
@font-face
	{font-family:"Hammersmith One";}
@font-face
	{font-family:Heebo;}
@font-face
	{font-family:"Heebo Black";}
@font-face
	{font-family:"Heebo ExtraBold";}
@font-face
	{font-family:"Heebo Light";}
@font-face
	{font-family:"Heebo Medium";}
@font-face
	{font-family:"Heebo Thin";}
@font-face
	{font-family:HGGothicE;}
@font-face
	{font-family:HGMaruGothicMPRO;}
@font-face
	{font-family:HGMinchoE;}
@font-face
	{font-family:HGPGothicE;}
@font-face
	{font-family:HGPMinchoE;}
@font-face
	{font-family:HGPSoeiKakugothicUB;}
@font-face
	{font-family:HGSGothicE;}
@font-face
	{font-family:HGSMinchoE;}
@font-face
	{font-family:HGSoeiKakugothicUB;}
@font-face
	{font-family:HGSSoeiKakugothicUB;}
@font-face
	{font-family:Hind;}
@font-face
	{font-family:"Hind Colombo";}
@font-face
	{font-family:"Hind Colombo Light";}
@font-face
	{font-family:"Hind Colombo Medium";}
@font-face
	{font-family:"Hind Colombo SemiBold";}
@font-face
	{font-family:"Hind Guntur";}
@font-face
	{font-family:"Hind Guntur Light";}
@font-face
	{font-family:"Hind Guntur Medium";}
@font-face
	{font-family:"Hind Guntur SemiBold";}
@font-face
	{font-family:"Hind Jalandhar";}
@font-face
	{font-family:"Hind Jalandhar Light";}
@font-face
	{font-family:"Hind Jalandhar Medium";}
@font-face
	{font-family:"Hind Jalandhar SemiBold";}
@font-face
	{font-family:"Hind Kochi";}
@font-face
	{font-family:"Hind Kochi Light";}
@font-face
	{font-family:"Hind Kochi Medium";}
@font-face
	{font-family:"Hind Kochi SemiBold";}
@font-face
	{font-family:"Hind Light";}
@font-face
	{font-family:"Hind Madurai";}
@font-face
	{font-family:"Hind Madurai Light";}
@font-face
	{font-family:"Hind Madurai Medium";}
@font-face
	{font-family:"Hind Madurai SemiBold";}
@font-face
	{font-family:"Hind Medium";}
@font-face
	{font-family:"Hind Mysuru";}
@font-face
	{font-family:"Hind Mysuru Light";}
@font-face
	{font-family:"Hind Mysuru Medium";}
@font-face
	{font-family:"Hind Mysuru SemiBold";}
@font-face
	{font-family:"Hind SemiBold";}
@font-face
	{font-family:"Hind Siliguri";}
@font-face
	{font-family:"Hind Siliguri Light";}
@font-face
	{font-family:"Hind Siliguri Medium";}
@font-face
	{font-family:"Hind Siliguri SemiBold";}
@font-face
	{font-family:"Hind Vadodara";}
@font-face
	{font-family:"Hind Vadodara Light";}
@font-face
	{font-family:"Hind Vadodara Medium";}
@font-face
	{font-family:"Hind Vadodara SemiBold";}
@font-face
	{font-family:"IBM Plex Mono";}
@font-face
	{font-family:"IBM Plex Mono ExtraLight";}
@font-face
	{font-family:"IBM Plex Mono Light";}
@font-face
	{font-family:"IBM Plex Mono Medium";}
@font-face
	{font-family:"IBM Plex Mono SemiBold";}
@font-face
	{font-family:"IBM Plex Mono Thin";}
@font-face
	{font-family:"IBM Plex Sans";}
@font-face
	{font-family:"IBM Plex Sans Condensed";}
@font-face
	{font-family:"IBM Plex Sans Condensed Light";}
@font-face
	{font-family:"IBM Plex Sans Condensed Medium";}
@font-face
	{font-family:"IBM Plex Sans Condensed Thin";}
@font-face
	{font-family:"IBM Plex Sans ExtraLight";}
@font-face
	{font-family:"IBM Plex Sans Light";}
@font-face
	{font-family:"IBM Plex Sans Medium";}
@font-face
	{font-family:"IBM Plex Sans SemiBold";}
@font-face
	{font-family:"IBM Plex Sans Thin";}
@font-face
	{font-family:"IBM Plex Serif";}
@font-face
	{font-family:"IBM Plex Serif ExtraLight";}
@font-face
	{font-family:"IBM Plex Serif Light";}
@font-face
	{font-family:"IBM Plex Serif Medium";}
@font-face
	{font-family:"IBM Plex Serif SemiBold";}
@font-face
	{font-family:"IBM Plex Serif Thin";}
@font-face
	{font-family:Inconsolata;}
@font-face
	{font-family:"Inconsolata Black";}
@font-face
	{font-family:"Inconsolata Bold";}
@font-face
	{font-family:"Inconsolata Condensed";}
@font-face
	{font-family:"Inconsolata Condensed Black";}
@font-face
	{font-family:"Inconsolata Condensed Bold";}
@font-face
	{font-family:"Inconsolata Condensed ExtraBold";}
@font-face
	{font-family:"Inconsolata Condensed Light";}
@font-face
	{font-family:"Inconsolata Condensed Medium";}
@font-face
	{font-family:"Inconsolata Condensed SemiBold";}
@font-face
	{font-family:"Inconsolata Expanded";}
@font-face
	{font-family:"Inconsolata Expanded Black";}
@font-face
	{font-family:"Inconsolata Expanded Bold";}
@font-face
	{font-family:"Inconsolata Expanded ExtraBold";}
@font-face
	{font-family:"Inconsolata Expanded ExtraLight";}
@font-face
	{font-family:"Inconsolata Expanded Light";}
@font-face
	{font-family:"Inconsolata Expanded Medium";}
@font-face
	{font-family:"Inconsolata Expanded SemiBold";}
@font-face
	{font-family:"Inconsolata ExtraBold";}
@font-face
	{font-family:"Inconsolata ExtraCondensed";}
@font-face
	{font-family:"Inconsolata ExtraCondensed Bold";}
@font-face
	{font-family:"Inconsolata ExtraExpanded";}
@font-face
	{font-family:"Inconsolata ExtraExpanded Black";}
@font-face
	{font-family:"Inconsolata ExtraExpanded Bold";}
@font-face
	{font-family:"Inconsolata ExtraExpanded Light";}
@font-face
	{font-family:"Inconsolata ExtraLight";}
@font-face
	{font-family:"Inconsolata Light";}
@font-face
	{font-family:"Inconsolata Medium";}
@font-face
	{font-family:"Inconsolata SemiBold";}
@font-face
	{font-family:"Inconsolata SemiCondensed";}
@font-face
	{font-family:"Inconsolata SemiCondensed Black";}
@font-face
	{font-family:"Inconsolata SemiCondensed Bold";}
@font-face
	{font-family:"Inconsolata SemiCondensed Light";}
@font-face
	{font-family:"Inconsolata SemiExpanded";}
@font-face
	{font-family:"Inconsolata SemiExpanded Black";}
@font-face
	{font-family:"Inconsolata SemiExpanded Bold";}
@font-face
	{font-family:"Inconsolata SemiExpanded Light";}
@font-face
	{font-family:"Inconsolata SemiExpanded Medium";}
@font-face
	{font-family:"Inconsolata UltraCondensed";}
@font-face
	{font-family:"Inconsolata UltraCondensed Bold";}
@font-face
	{font-family:"Inconsolata UltraExpanded";}
@font-face
	{font-family:"Inconsolata UltraExpanded Black";}
@font-face
	{font-family:"Inconsolata UltraExpanded Bold";}
@font-face
	{font-family:"Inconsolata UltraExpanded Light";}
@font-face
	{font-family:IrisUPC;}
@font-face
	{font-family:"Iskoola Pota";}
@font-face
	{font-family:Italianno;}
@font-face
	{font-family:JasmineUPC;}
@font-face
	{font-family:"Josefin Sans";}
@font-face
	{font-family:"Josefin Sans Bold";}
@font-face
	{font-family:"Josefin Sans Light";}
@font-face
	{font-family:"Josefin Sans SemiBold";}
@font-face
	{font-family:"Josefin Sans Thin";}
@font-face
	{font-family:"Josefin Slab";}
@font-face
	{font-family:"Josefin Slab Light";}
@font-face
	{font-family:"Josefin Slab SemiBold";}
@font-face
	{font-family:"Josefin Slab Thin";}
@font-face
	{font-family:Jumble;}
@font-face
	{font-family:Kalinga;}
@font-face
	{font-family:Karla;}
@font-face
	{font-family:"Karla ExtraBold";}
@font-face
	{font-family:"Karla ExtraLight";}
@font-face
	{font-family:"Karla Light";}
@font-face
	{font-family:"Karla Medium";}
@font-face
	{font-family:"Karla Tamil Inclined";}
@font-face
	{font-family:"Karla Tamil Upright";}
@font-face
	{font-family:Kartika;}
@font-face
	{font-family:Kermit;}
@font-face
	{font-family:"Kermit Condensed";}
@font-face
	{font-family:"Kermit Expanded";}
@font-face
	{font-family:"Kermit Extrabold";}
@font-face
	{font-family:"Kermit Extrabold Condensed";}
@font-face
	{font-family:"Kermit Extrabold Expanded";}
@font-face
	{font-family:"Kermit Extralight";}
@font-face
	{font-family:"Kermit Extralight Condensed";}
@font-face
	{font-family:"Kermit Extralight Expanded";}
@font-face
	{font-family:"Kermit Light";}
@font-face
	{font-family:"Kermit Light Condensed";}
@font-face
	{font-family:"Kermit Light Expanded";}
@font-face
	{font-family:"Kermit Semibold";}
@font-face
	{font-family:"Kermit Semibold Condensed";}
@font-face
	{font-family:"Kermit Semibold Expanded";}
@font-face
	{font-family:"Kermit Thin";}
@font-face
	{font-family:"Kermit Thin Condensed";}
@font-face
	{font-family:"Kermit Thin Expanded";}
@font-face
	{font-family:"Khmer UI";}
@font-face
	{font-family:Kigelia;}
@font-face
	{font-family:"Kigelia Arabic";}
@font-face
	{font-family:"Kigelia Arabic Light";}
@font-face
	{font-family:"Kigelia Light";}
@font-face
	{font-family:"Klee One";}
@font-face
	{font-family:"Klee One SemiBold";}
@font-face
	{font-family:KodchiangUPC;}
@font-face
	{font-family:Kokila;}
@font-face
	{font-family:Krub;}
@font-face
	{font-family:"Krub ExtraLight";}
@font-face
	{font-family:"Krub Light";}
@font-face
	{font-family:"Krub Medium";}
@font-face
	{font-family:"Krub SemiBold";}
@font-face
	{font-family:Lalezar;}
@font-face
	{font-family:"Lao UI";}
@font-face
	{font-family:Lato;}
@font-face
	{font-family:"Lato Black";}
@font-face
	{font-family:"Lato ExtraBold";}
@font-face
	{font-family:"Lato ExtraLight";}
@font-face
	{font-family:"Lato Light";}
@font-face
	{font-family:"Lato Medium";}
@font-face
	{font-family:"Lato SemiBold";}
@font-face
	{font-family:"Lato Thin";}
@font-face
	{font-family:Leelawadee;}
@font-face
	{font-family:"Levenim MT";}
@font-face
	{font-family:"Libre Barcode 128";}
@font-face
	{font-family:"Libre Barcode 128 Text";}
@font-face
	{font-family:"Libre Barcode 39";}
@font-face
	{font-family:"Libre Barcode 39 Extended";}
@font-face
	{font-family:"Libre Barcode 39 Extended Text";}
@font-face
	{font-family:"Libre Barcode 39 Text";}
@font-face
	{font-family:"Libre Barcode EAN13 Text";}
@font-face
	{font-family:"Libre Baskerville";}
@font-face
	{font-family:"Libre Franklin";}
@font-face
	{font-family:"Libre Franklin Black";}
@font-face
	{font-family:"Libre Franklin ExtraBold";}
@font-face
	{font-family:"Libre Franklin ExtraLight";}
@font-face
	{font-family:"Libre Franklin Light";}
@font-face
	{font-family:"Libre Franklin Medium";}
@font-face
	{font-family:"Libre Franklin SemiBold";}
@font-face
	{font-family:"Libre Franklin Thin";}
@font-face
	{font-family:Ligconsolata;}
@font-face
	{font-family:LilyUPC;}
@font-face
	{font-family:Livvic;}
@font-face
	{font-family:"Livvic Black";}
@font-face
	{font-family:"Livvic ExtraLight";}
@font-face
	{font-family:"Livvic Light";}
@font-face
	{font-family:"Livvic Medium";}
@font-face
	{font-family:"Livvic SemiBold";}
@font-face
	{font-family:"Livvic Thin";}
@font-face
	{font-family:"Lobster Two";}
@font-face
	{font-family:Lora;}
@font-face
	{font-family:"Lora Medium";}
@font-face
	{font-family:"Mangal Pro";}
@font-face
	{font-family:Meddon;}
@font-face
	{font-family:Meiryo;}
@font-face
	{font-family:"Meiryo UI";}
@font-face
	{font-family:Merriweather;}
@font-face
	{font-family:"Merriweather Black";}
@font-face
	{font-family:"Merriweather Light";}
@font-face
	{font-family:"Merriweather Sans";}
@font-face
	{font-family:"Merriweather Sans ExtraBold";}
@font-face
	{font-family:"Merriweather Sans Light";}
@font-face
	{font-family:"Microsoft GothicNeo";}
@font-face
	{font-family:"Microsoft GothicNeo Light";}
@font-face
	{font-family:"Microsoft Uighur";}
@font-face
	{font-family:"Microsoft YaHei Light";}
@font-face
	{font-family:MingLiU_HKSCS;}
@font-face
	{font-family:Miriam;}
@font-face
	{font-family:"Miriam Fixed";}
@font-face
	{font-family:"Miriam Libre";}
@font-face
	{font-family:Mitr;}
@font-face
	{font-family:"Mitr ExtraLight";}
@font-face
	{font-family:"Mitr Light";}
@font-face
	{font-family:"Mitr Medium";}
@font-face
	{font-family:"Mitr SemiBold";}
@font-face
	{font-family:"Modern Love";}
@font-face
	{font-family:"Modern Love Caps";}
@font-face
	{font-family:"Modern Love Grunge";}
@font-face
	{font-family:Montserrat;}
@font-face
	{font-family:"Montserrat Black";}
@font-face
	{font-family:"Montserrat ExtraBold";}
@font-face
	{font-family:"Montserrat ExtraLight";}
@font-face
	{font-family:"Montserrat Light";}
@font-face
	{font-family:"Montserrat Medium";}
@font-face
	{font-family:"Montserrat SemiBold";}
@font-face
	{font-family:"Montserrat Thin";}
@font-face
	{font-family:MoolBoran;}
@font-face
	{font-family:"MS PMincho";}
@font-face
	{font-family:"Mystical Woods Rough Script";}
@font-face
	{font-family:"Mystical Woods Smooth Script";}
@font-face
	{font-family:"Nanum Brush Script";}
@font-face
	{font-family:"Nanum Pen";}
@font-face
	{font-family:NanumGothic;}
@font-face
	{font-family:NanumGothicCoding;}
@font-face
	{font-family:NanumGothicExtraBold;}
@font-face
	{font-family:NanumMyeongjo;}
@font-face
	{font-family:NanumMyeongjoExtraBold;}
@font-face
	{font-family:Narkisim;}
@font-face
	{font-family:"Neue Haas Grotesk Text Pro";}
@font-face
	{font-family:"News Gothic MT";}
@font-face
	{font-family:Nina;}
@font-face
	{font-family:"Nirmala Text";}
@font-face
	{font-family:"Nirmala Text Semilight";}
@font-face
	{font-family:"Nordique Inline";}
@font-face
	{font-family:"Noto Music";}
@font-face
	{font-family:"Noto Nastaliq Urdu";}
@font-face
	{font-family:"Noto Sans";}
@font-face
	{font-family:"Noto Sans AnatoHiero";}
@font-face
	{font-family:"Noto Sans Avestan";}
@font-face
	{font-family:"Noto Sans Bassa Vah";}
@font-face
	{font-family:"Noto Sans Batak";}
@font-face
	{font-family:"Noto Sans Bhaiksuki";}
@font-face
	{font-family:"Noto Sans Brahmi";}
@font-face
	{font-family:"Noto Sans Buginese";}
@font-face
	{font-family:"Noto Sans Buhid";}
@font-face
	{font-family:"Noto Sans Carian";}
@font-face
	{font-family:"Noto Sans CaucAlban";}
@font-face
	{font-family:"Noto Sans Chakma";}
@font-face
	{font-family:"Noto Sans Coptic";}
@font-face
	{font-family:"Noto Sans Cuneiform";}
@font-face
	{font-family:"Noto Sans Cypriot";}
@font-face
	{font-family:"Noto Sans Deseret";}
@font-face
	{font-family:"Noto Sans Devanagari";}
@font-face
	{font-family:"Noto Sans Devanagari Black";}
@font-face
	{font-family:"Noto Sans Devanagari ExtraBold";}
@font-face
	{font-family:"Noto Sans Devanagari ExtraLight";}
@font-face
	{font-family:"Noto Sans Devanagari Light";}
@font-face
	{font-family:"Noto Sans Devanagari Medium";}
@font-face
	{font-family:"Noto Sans Devanagari SemiBold";}
@font-face
	{font-family:"Noto Sans Devanagari Thin";}
@font-face
	{font-family:"Noto Sans Devanagari UI";}
@font-face
	{font-family:"Noto Sans Devanagari UI Black";}
@font-face
	{font-family:"Noto Sans Devanagari UI Light";}
@font-face
	{font-family:"Noto Sans Devanagari UI Medium";}
@font-face
	{font-family:"Noto Sans Devanagari UI Thin";}
@font-face
	{font-family:"Noto Sans Duployan";}
@font-face
	{font-family:"Noto Sans EgyptHiero";}
@font-face
	{font-family:"Noto Sans Elbasan";}
@font-face
	{font-family:"Noto Sans Elymaic";}
@font-face
	{font-family:"Noto Sans Glagolitic";}
@font-face
	{font-family:"Noto Sans Gothic";}
@font-face
	{font-family:"Noto Sans Grantha";}
@font-face
	{font-family:"Noto Sans Gujarati";}
@font-face
	{font-family:"Noto Sans Gujarati Black";}
@font-face
	{font-family:"Noto Sans Gujarati ExtraBold";}
@font-face
	{font-family:"Noto Sans Gujarati ExtraLight";}
@font-face
	{font-family:"Noto Sans Gujarati Light";}
@font-face
	{font-family:"Noto Sans Gujarati Medium";}
@font-face
	{font-family:"Noto Sans Gujarati SemiBold";}
@font-face
	{font-family:"Noto Sans Gujarati Thin";}
@font-face
	{font-family:"Noto Sans Gujarati UI";}
@font-face
	{font-family:"Noto Sans Gujarati UI Black";}
@font-face
	{font-family:"Noto Sans Gujarati UI ExtraBold";}
@font-face
	{font-family:"Noto Sans Gujarati UI Light";}
@font-face
	{font-family:"Noto Sans Gujarati UI Medium";}
@font-face
	{font-family:"Noto Sans Gujarati UI SemiBold";}
@font-face
	{font-family:"Noto Sans Gujarati UI Thin";}
@font-face
	{font-family:"Noto Sans Gunjala Gondi";}
@font-face
	{font-family:"Noto Sans Hanunoo";}
@font-face
	{font-family:"Noto Sans Hatran";}
@font-face
	{font-family:"Noto Sans ImpAramaic";}
@font-face
	{font-family:"Noto Sans Indic Siyaq Numbers";}
@font-face
	{font-family:"Noto Sans InsPahlavi";}
@font-face
	{font-family:"Noto Sans InsParthi";}
@font-face
	{font-family:"Noto Sans Javanese";}
@font-face
	{font-family:"Noto Sans Kaithi";}
@font-face
	{font-family:"Noto Sans Kharoshthi";}
@font-face
	{font-family:"Noto Sans Khojki";}
@font-face
	{font-family:"Noto Sans Khudawadi";}
@font-face
	{font-family:"Noto Sans Lepcha";}
@font-face
	{font-family:"Noto Sans Limbu";}
@font-face
	{font-family:"Noto Sans Linear A";}
@font-face
	{font-family:"Noto Sans Linear B";}
@font-face
	{font-family:"Noto Sans Lycian";}
@font-face
	{font-family:"Noto Sans Lydian";}
@font-face
	{font-family:"Noto Sans Mahajani";}
@font-face
	{font-family:"Noto Sans Mandaic";}
@font-face
	{font-family:"Noto Sans Manichaean";}
@font-face
	{font-family:"Noto Sans Marchen";}
@font-face
	{font-family:"Noto Sans Masaram Gondi";}
@font-face
	{font-family:"Noto Sans Math";}
@font-face
	{font-family:"Noto Sans Mayan Numerals";}
@font-face
	{font-family:"Noto Sans Mende Kikakui";}
@font-face
	{font-family:"Noto Sans Meroitic";}
@font-face
	{font-family:"Noto Sans Miao";}
@font-face
	{font-family:"Noto Sans Modi";}
@font-face
	{font-family:"Noto Sans Mongolian";}
@font-face
	{font-family:"Noto Sans Mro";}
@font-face
	{font-family:"Noto Sans Multani";}
@font-face
	{font-family:"Noto Sans Myanmar";}
@font-face
	{font-family:"Noto Sans Myanmar Blk";}
@font-face
	{font-family:"Noto Sans Myanmar ExtBd";}
@font-face
	{font-family:"Noto Sans Myanmar ExtLt";}
@font-face
	{font-family:"Noto Sans Myanmar Light";}
@font-face
	{font-family:"Noto Sans Myanmar Med";}
@font-face
	{font-family:"Noto Sans Myanmar SemBd";}
@font-face
	{font-family:"Noto Sans Myanmar Thin";}
@font-face
	{font-family:"Noto Sans Myanmar UI";}
@font-face
	{font-family:"Noto Sans Myanmar UI Black";}
@font-face
	{font-family:"Noto Sans Myanmar UI ExtraBold";}
@font-face
	{font-family:"Noto Sans Myanmar UI ExtraLight";}
@font-face
	{font-family:"Noto Sans Myanmar UI Light";}
@font-face
	{font-family:"Noto Sans Myanmar UI Medium";}
@font-face
	{font-family:"Noto Sans Myanmar UI SemiBold";}
@font-face
	{font-family:"Noto Sans Myanmar UI Thin";}
@font-face
	{font-family:"Noto Sans Nabataean";}
@font-face
	{font-family:"Noto Sans Newa";}
@font-face
	{font-family:"Noto Sans NewTaiLue";}
@font-face
	{font-family:"Noto Sans NKo";}
@font-face
	{font-family:"Noto Sans Nushu";}
@font-face
	{font-family:"Noto Sans Ogham";}
@font-face
	{font-family:"Noto Sans Old Italic";}
@font-face
	{font-family:"Noto Sans Old Permic";}
@font-face
	{font-family:"Noto Sans Old Turkic";}
@font-face
	{font-family:"Noto Sans OldHung";}
@font-face
	{font-family:"Noto Sans OldNorArab";}
@font-face
	{font-family:"Noto Sans OldPersian";}
@font-face
	{font-family:"Noto Sans OldSogdian";}
@font-face
	{font-family:"Noto Sans OldSouArab";}
@font-face
	{font-family:"Noto Sans Oriya";}
@font-face
	{font-family:"Noto Sans Oriya Blk";}
@font-face
	{font-family:"Noto Sans Oriya Thin";}
@font-face
	{font-family:"Noto Sans Oriya UI";}
@font-face
	{font-family:"Noto Sans Oriya UI Blk";}
@font-face
	{font-family:"Noto Sans Oriya UI Thin";}
@font-face
	{font-family:"Noto Sans Osage";}
@font-face
	{font-family:"Noto Sans Osmanya";}
@font-face
	{font-family:"Noto Sans Pahawh Hmong";}
@font-face
	{font-family:"Noto Sans Palmyrene";}
@font-face
	{font-family:"Noto Sans PauCinHau";}
@font-face
	{font-family:"Noto Sans PhagsPa";}
@font-face
	{font-family:"Noto Sans Phoenician";}
@font-face
	{font-family:"Noto Sans PsaPahlavi";}
@font-face
	{font-family:"Noto Sans Rejang";}
@font-face
	{font-family:"Noto Sans Runic";}
@font-face
	{font-family:"Noto Sans Samaritan";}
@font-face
	{font-family:"Noto Sans Saurashtra";}
@font-face
	{font-family:"Noto Sans Sharada";}
@font-face
	{font-family:"Noto Sans Shavian";}
@font-face
	{font-family:"Noto Sans Siddham";}
@font-face
	{font-family:"Noto Sans Sogdian";}
@font-face
	{font-family:"Noto Sans Soyombo";}
@font-face
	{font-family:"Noto Sans Syloti Nagri";}
@font-face
	{font-family:"Noto Sans Symbols2";}
@font-face
	{font-family:"Noto Sans Syriac";}
@font-face
	{font-family:"Noto Sans Syriac Black";}
@font-face
	{font-family:"Noto Sans Syriac Thin";}
@font-face
	{font-family:"Noto Sans Tagalog";}
@font-face
	{font-family:"Noto Sans Tagbanwa";}
@font-face
	{font-family:"Noto Sans Tai Le";}
@font-face
	{font-family:"Noto Sans Tai Viet";}
@font-face
	{font-family:"Noto Sans Takri";}
@font-face
	{font-family:"Noto Sans Tamil Supplement";}
@font-face
	{font-family:"Noto Sans Thai Looped Black";}
@font-face
	{font-family:"Noto Sans Thai Looped Bold";}
@font-face
	{font-family:"Noto Sans Thai Looped ExtLight";}
@font-face
	{font-family:"Noto Sans Thai Looped Extrabold";}
@font-face
	{font-family:"Noto Sans Thai Looped Light";}
@font-face
	{font-family:"Noto Sans Thai Looped Medium";}
@font-face
	{font-family:"Noto Sans Thai Looped Regular";}
@font-face
	{font-family:"Noto Sans Thai Looped Semibold";}
@font-face
	{font-family:"Noto Sans Thai Looped Thin";}
@font-face
	{font-family:"Noto Sans Tifinagh";}
@font-face
	{font-family:"Noto Sans Tirhuta";}
@font-face
	{font-family:"Noto Sans Ugaritic";}
@font-face
	{font-family:"Noto Sans Vai";}
@font-face
	{font-family:"Noto Sans Wancho";}
@font-face
	{font-family:"Noto Sans WarangCiti";}
@font-face
	{font-family:"Noto Sans Yi";}
@font-face
	{font-family:"Noto Sans Zanabazar";}
@font-face
	{font-family:"Noto Serif";}
@font-face
	{font-family:"Noto Serif Ahom";}
@font-face
	{font-family:"Noto Serif Balinese";}
@font-face
	{font-family:"Noto Serif Dogra";}
@font-face
	{font-family:"Noto Serif Grantha";}
@font-face
	{font-family:"Noto Serif Myanmar";}
@font-face
	{font-family:"Noto Serif Myanmar Blk";}
@font-face
	{font-family:"Noto Serif Myanmar ExtBd";}
@font-face
	{font-family:"Noto Serif Myanmar ExtLt";}
@font-face
	{font-family:"Noto Serif Myanmar Light";}
@font-face
	{font-family:"Noto Serif Myanmar Med";}
@font-face
	{font-family:"Noto Serif Myanmar SemBd";}
@font-face
	{font-family:"Noto Serif Myanmar Thin";}
@font-face
	{font-family:"Noto Serif Tangut";}
@font-face
	{font-family:"Noto Traditional Nushu";}
@font-face
	{font-family:Nunito;}
@font-face
	{font-family:"Nunito Black";}
@font-face
	{font-family:"Nunito ExtraBold";}
@font-face
	{font-family:"Nunito ExtraLight";}
@font-face
	{font-family:"Nunito Light";}
@font-face
	{font-family:"Nunito Sans";}
@font-face
	{font-family:"Nunito Sans Black";}
@font-face
	{font-family:"Nunito Sans ExtraBold";}
@font-face
	{font-family:"Nunito Sans ExtraLight";}
@font-face
	{font-family:"Nunito Sans Light";}
@font-face
	{font-family:"Nunito Sans SemiBold";}
@font-face
	{font-family:"Nunito SemiBold";}
@font-face
	{font-family:Nyala;}
@font-face
	{font-family:OCRB;}
@font-face
	{font-family:"Open Sans ExtraBold";}
@font-face
	{font-family:"Open Sans Light";}
@font-face
	{font-family:"Open Sans SemiBold";}
@font-face
	{font-family:Oranienbaum;}
@font-face
	{font-family:Oswald;}
@font-face
	{font-family:"Oswald ExtraLight";}
@font-face
	{font-family:"Oswald Light";}
@font-face
	{font-family:"Oswald Medium";}
@font-face
	{font-family:"Oswald SemiBold";}
@font-face
	{font-family:Oxygen;}
@font-face
	{font-family:"Oxygen Light";}
@font-face
	{font-family:"Oxygen Mono";}
@font-face
	{font-family:Pacifico;}
@font-face
	{font-family:Palanquin;}
@font-face
	{font-family:"Palanquin ExtraLight";}
@font-face
	{font-family:"Palanquin Light";}
@font-face
	{font-family:"Palanquin Medium";}
@font-face
	{font-family:"Palanquin SemiBold";}
@font-face
	{font-family:"Palanquin Thin";}
@font-face
	{font-family:"Patrick Hand";}
@font-face
	{font-family:"Patrick Hand SC";}
@font-face
	{font-family:"Petit Formal Script";}
@font-face
	{font-family:"Plantagenet Cherokee";}
@font-face
	{font-family:"Playfair Display";}
@font-face
	{font-family:"Playfair Display Black";}
@font-face
	{font-family:"Playfair Display SC";}
@font-face
	{font-family:"Playfair Display SC Black";}
@font-face
	{font-family:Poppins;}
@font-face
	{font-family:"Poppins Black";}
@font-face
	{font-family:"Poppins ExtraBold";}
@font-face
	{font-family:"Poppins ExtraLight";}
@font-face
	{font-family:"Poppins Light";}
@font-face
	{font-family:"Poppins Medium";}
@font-face
	{font-family:"Poppins SemiBold";}
@font-face
	{font-family:"Poppins Thin";}
@font-face
	{font-family:Posterama;}
@font-face
	{font-family:Pridi;}
@font-face
	{font-family:"Pridi ExtraLight";}
@font-face
	{font-family:"Pridi Light";}
@font-face
	{font-family:"Pridi Medium";}
@font-face
	{font-family:"Pridi SemiBold";}
@font-face
	{font-family:Prompt;}
@font-face
	{font-family:"Prompt Black";}
@font-face
	{font-family:"Prompt ExtraBold";}
@font-face
	{font-family:"Prompt ExtraLight";}
@font-face
	{font-family:"Prompt Light";}
@font-face
	{font-family:"Prompt Medium";}
@font-face
	{font-family:"Prompt SemiBold";}
@font-face
	{font-family:"Prompt Thin";}
@font-face
	{font-family:"PT Mono";}
@font-face
	{font-family:"PT Sans";}
@font-face
	{font-family:"PT Sans Caption";}
@font-face
	{font-family:"PT Sans Narrow";}
@font-face
	{font-family:"PT Serif";}
@font-face
	{font-family:"PT Serif Caption";}
@font-face
	{font-family:Quattrocento;}
@font-face
	{font-family:"Quattrocento Sans";}
@font-face
	{font-family:Questrial;}
@font-face
	{font-family:"Quire Sans";}
@font-face
	{font-family:"Quire Sans Light";}
@font-face
	{font-family:"Quire Sans Pro Light";}
@font-face
	{font-family:"Raleway Black";}
@font-face
	{font-family:"Raleway ExtraBold";}
@font-face
	{font-family:"Raleway ExtraLight";}
@font-face
	{font-family:"Raleway Light";}
@font-face
	{font-family:"Raleway Medium";}
@font-face
	{font-family:"Raleway SemiBold";}
@font-face
	{font-family:"Raleway Thin";}
@font-face
	{font-family:"Rastanty Cortez";}
@font-face
	{font-family:"Reem Kufi";}
@font-face
	{font-family:"Roboto Black";}
@font-face
	{font-family:"Roboto Condensed Light";}
@font-face
	{font-family:"Roboto Condensed Medium";}
@font-face
	{font-family:"Roboto Light";}
@font-face
	{font-family:"Roboto Medium";}
@font-face
	{font-family:"Roboto Mono";}
@font-face
	{font-family:"Roboto Mono Light";}
@font-face
	{font-family:"Roboto Mono Medium";}
@font-face
	{font-family:"Roboto Mono Thin";}
@font-face
	{font-family:"Roboto Serif 20pt";}
@font-face
	{font-family:"Roboto Serif 20pt Black";}
@font-face
	{font-family:"Roboto Serif 20pt ExtraBold";}
@font-face
	{font-family:"Roboto Serif 20pt ExtraLight";}
@font-face
	{font-family:"Roboto Serif 20pt Light";}
@font-face
	{font-family:"Roboto Serif 20pt Medium";}
@font-face
	{font-family:"Roboto Serif 20pt SemiBold";}
@font-face
	{font-family:"Roboto Serif 20pt Thin";}
@font-face
	{font-family:"Roboto Slab Black";}
@font-face
	{font-family:"Roboto Slab ExtraBold";}
@font-face
	{font-family:"Roboto Slab ExtraLight";}
@font-face
	{font-family:"Roboto Slab Light";}
@font-face
	{font-family:"Roboto Slab Medium";}
@font-face
	{font-family:"Roboto Slab SemiBold";}
@font-face
	{font-family:"Roboto Slab Thin";}
@font-face
	{font-family:"Roboto Thin";}
@font-face
	{font-family:"Rockwell Light";}
@font-face
	{font-family:"Rockwell Nova";}
@font-face
	{font-family:"Rockwell Nova Cond";}
@font-face
	{font-family:"Rockwell Nova Cond Light";}
@font-face
	{font-family:"Rockwell Nova Extra Bold";}
@font-face
	{font-family:"Rockwell Nova Light";}
@font-face
	{font-family:Rod;}
@font-face
	{font-family:"Sabon Next LT";}
@font-face
	{font-family:Sacramento;}
@font-face
	{font-family:Sagona;}
@font-face
	{font-family:"Sagona Book";}
@font-face
	{font-family:"Sagona ExtraLight";}
@font-face
	{font-family:"Sakkal Majalla";}
@font-face
	{font-family:"Sanskrit Text";}
@font-face
	{font-family:Seaford;}
@font-face
	{font-family:"Seaford Display";}
@font-face
	{font-family:"Secular One";}
@font-face
	{font-family:"Segoe Marker";}
@font-face
	{font-family:"Segoe Pro";}
@font-face
	{font-family:"Segoe Pro Black";}
@font-face
	{font-family:"Segoe Pro Cond";}
@font-face
	{font-family:"Segoe Pro Display";}
@font-face
	{font-family:"Segoe Pro Display Light";}
@font-face
	{font-family:"Segoe Pro Display Semibold";}
@font-face
	{font-family:"Segoe Pro Display SemiLight";}
@font-face
	{font-family:"Segoe Pro Light";}
@font-face
	{font-family:"Segoe Pro Semibold";}
@font-face
	{font-family:"Segoe Pro SemiLight";}
@font-face
	{font-family:"Segoe UI Emoji L";}
@font-face
	{font-family:"Segoe Xbox Symbol";}
@font-face
	{font-family:Selawik;}
@font-face
	{font-family:"Selawik Light";}
@font-face
	{font-family:"Selawik Semibold";}
@font-face
	{font-family:"Shadows Into Light Two";}
@font-face
	{font-family:"Shonar Bangla";}
@font-face
	{font-family:"Simplified Arabic";}
@font-face
	{font-family:"Simplified Arabic Fixed";}
@font-face
	{font-family:Skeena;}
@font-face
	{font-family:"Skeena Display";}
@font-face
	{font-family:"Source Code Pro";}
@font-face
	{font-family:"Source Code Pro Black";}
@font-face
	{font-family:"Source Code Pro ExtraLight";}
@font-face
	{font-family:"Source Code Pro Light";}
@font-face
	{font-family:"Source Code Pro Medium";}
@font-face
	{font-family:"Source Code Pro Semibold";}
@font-face
	{font-family:"Source Sans Pro";}
@font-face
	{font-family:"Source Sans Pro Black";}
@font-face
	{font-family:"Source Sans Pro ExtraLight";}
@font-face
	{font-family:"Source Sans Pro Light";}
@font-face
	{font-family:"Source Sans Pro SemiBold";}
@font-face
	{font-family:"Source Serif Pro";}
@font-face
	{font-family:"Source Serif Pro Black";}
@font-face
	{font-family:"Source Serif Pro ExtraLight";}
@font-face
	{font-family:"Source Serif Pro Light";}
@font-face
	{font-family:"Source Serif Pro SemiBold";}
@font-face
	{font-family:"Speak Pro";}
@font-face
	{font-family:"Speak Pro Light";}
@font-face
	{font-family:Staatliches;}
@font-face
	{font-family:"Suez One";}
@font-face
	{font-family:Tenorite;}
@font-face
	{font-family:"Tenorite Display";}
@font-face
	{font-family:"TH SarabunPSK";}
@font-face
	{font-family:"The Hand";}
@font-face
	{font-family:"The Hand Black";}
@font-face
	{font-family:"The Hand Extrablack";}
@font-face
	{font-family:"The Hand Light";}
@font-face
	{font-family:"The Serif Hand";}
@font-face
	{font-family:"The Serif Hand Black";}
@font-face
	{font-family:"The Serif Hand Extrablack";}
@font-face
	{font-family:"The Serif Hand Light";}
@font-face
	{font-family:"Tisa Offc Serif Pro";}
@font-face
	{font-family:"Tisa Offc Serif Pro Thin";}
@font-face
	{font-family:"Titillium Web";}
@font-face
	{font-family:"Titillium Web Black";}
@font-face
	{font-family:"Titillium Web ExtraLight";}
@font-face
	{font-family:"Titillium Web Light";}
@font-face
	{font-family:"Titillium Web SemiBold";}
@font-face
	{font-family:"Trade Gothic Inline";}
@font-face
	{font-family:"Trade Gothic Next";}
@font-face
	{font-family:"Trade Gothic Next Cond";}
@font-face
	{font-family:"Trade Gothic Next Heavy";}
@font-face
	{font-family:"Trade Gothic Next HvyCd";}
@font-face
	{font-family:"Trade Gothic Next Light";}
@font-face
	{font-family:"Trade Gothic Next Rounded";}
@font-face
	{font-family:"Traditional Arabic";}
@font-face
	{font-family:Trirong;}
@font-face
	{font-family:"Trirong Black";}
@font-face
	{font-family:"Trirong ExtraBold";}
@font-face
	{font-family:"Trirong ExtraLight";}
@font-face
	{font-family:"Trirong Light";}
@font-face
	{font-family:"Trirong Medium";}
@font-face
	{font-family:"Trirong SemiBold";}
@font-face
	{font-family:"Trirong Thin";}
@font-face
	{font-family:Ubuntu;}
@font-face
	{font-family:"Ubuntu Condensed";}
@font-face
	{font-family:"Ubuntu Light";}
@font-face
	{font-family:"Ubuntu Medium";}
@font-face
	{font-family:"Ubuntu Mono";}
@font-face
	{font-family:"UD Digi Kyokasho N-B";}
@font-face
	{font-family:"UD Digi Kyokasho N-R";}
@font-face
	{font-family:"UD Digi Kyokasho NK-B";}
@font-face
	{font-family:"UD Digi Kyokasho NK-R";}
@font-face
	{font-family:"UD Digi Kyokasho NP-B";}
@font-face
	{font-family:"UD Digi Kyokasho NP-R";}
@font-face
	{font-family:Univers;}
@font-face
	{font-family:"Univers Condensed";}
@font-face
	{font-family:"Univers Condensed Light";}
@font-face
	{font-family:"Univers Light";}
@font-face
	{font-family:"Urdu Typesetting";}
@font-face
	{font-family:Utsaah;}
@font-face
	{font-family:Vani;}
@font-face
	{font-family:"Varela Round";}
@font-face
	{font-family:"Verdana Pro";}
@font-face
	{font-family:"Verdana Pro Black";}
@font-face
	{font-family:"Verdana Pro Cond";}
@font-face
	{font-family:"Verdana Pro Cond Black";}
@font-face
	{font-family:"Verdana Pro Cond Light";}
@font-face
	{font-family:"Verdana Pro Cond SemiBold";}
@font-face
	{font-family:"Verdana Pro Light";}
@font-face
	{font-family:"Verdana Pro SemiBold";}
@font-face
	{font-family:Vijaya;}
@font-face
	{font-family:"Walbaum Display";}
@font-face
	{font-family:"Walbaum Display Heavy";}
@font-face
	{font-family:"Walbaum Display Light";}
@font-face
	{font-family:"Walbaum Display SemiBold";}
@font-face
	{font-family:"Walbaum Heading";}
@font-face
	{font-family:"Walbaum Text";}
@font-face
	{font-family:"Work Sans";}
@font-face
	{font-family:"Work Sans Black";}
@font-face
	{font-family:"Work Sans ExtraBold";}
@font-face
	{font-family:"Work Sans ExtraLight";}
@font-face
	{font-family:"Work Sans Light";}
@font-face
	{font-family:"Work Sans Medium";}
@font-face
	{font-family:"Work Sans SemiBold";}
@font-face
	{font-family:"Work Sans Thin";}
@font-face
	{font-family:Yesteryear;}
@font-face
	{font-family:"Yu Mincho";}
@font-face
	{font-family:"Yu Mincho Demibold";}
@font-face
	{font-family:"Yu Mincho Light";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h2
	{margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:172%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h3
	{margin-right:0cm;
	margin-left:0cm;
	font-size:13.5pt;
	font-family:宋体;
	font-weight:bold;}
h4
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:155%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-weight:bold;}
h5
	{mso-style-link:"标题 5 字符";
	margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:156%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
h6
	{mso-style-link:"标题 6 字符";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.2pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:133%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Calibri Light",sans-serif;
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:63.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:84.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:105.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:126.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:147.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:168.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"正文文本 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoBodyTextFirstIndent, li.MsoBodyTextFirstIndent, div.MsoBodyTextFirstIndent
	{mso-style-link:"正文文本首行缩进 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
pre
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
span.5
	{mso-style-name:"标题 5 字符";
	mso-style-link:"标题 5";
	font-family:"Calibri",sans-serif;
	font-weight:bold;}
p.COR-, li.COR-, div.COR-
	{mso-style-name:COR-代码;
	mso-style-link:"COR-代码 Char";
	margin-top:7.8pt;
	margin-right:0cm;
	margin-bottom:7.8pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:12.0pt;
	background:#E6E6E6;
	word-break:break-all;
	font-size:10.5pt;
	font-family:"Courier New";}
span.COR-Char
	{mso-style-name:"COR-代码 Char";
	mso-style-link:COR-代码;
	font-family:"Courier New";
	background:#E6E6E6;}
span.a
	{mso-style-name:"正文文本 字符";
	mso-style-link:正文文本;
	font-family:"Calibri",sans-serif;}
span.a0
	{mso-style-name:"正文文本首行缩进 字符";
	mso-style-link:正文文本首行缩进;
	font-family:"Calibri",sans-serif;}
span.a1
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Calibri",sans-serif;}
span.a2
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Calibri",sans-serif;}
span.6
	{mso-style-name:"标题 6 字符";
	mso-style-link:"标题 6";
	font-family:"Calibri Light",sans-serif;
	font-weight:bold;}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:teal;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink="#954F72" style='word-wrap:break-word;
text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<h1 align=center style='text-align:center'><a name="_Toc128347085"></a><a
name="_Toc128347321"><span lang=EN-US>Java</span></a></h1>

<p class=MsoToc1><span
class=MsoHyperlink><span lang=EN-US><a href="#_Toc128347321">Java<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347322">1.<span style='color:windowtext;text-decoration:none'>     </span>Source<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347323">2.<span style='color:windowtext;text-decoration:none'>     </span>java.lang<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347324">2.1 java.lang.Class<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347325"><span style='font-family:-apple-system'>2.1.1<span
style='background:white'> Atomic</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347326"><span style='font-family:-apple-system'>2.1.2<span
style='background:white'> AnnotationData</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347327"><span style='font-family:-apple-system'>2.1.3<span
style='background:white'> ReflectionData</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347328">2.2 java.lang. Object<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347329">2.3 java.lang.Runnable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347330">2.4 java.lang.Thread<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347331"><span style='font-family:-apple-system'>2.4.1<span
style='background:white'> thread</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347332"><span style='font-family:-apple-system'>2.4.2<span
style='background:white'> init</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347333"><span style='font-family:-apple-system'>2.4.3<span
style='background:white'> State</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347334"><span style='font-family:-apple-system'>2.4.4<span
style='background:white'> start</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347335"><span style='font-family:-apple-system'>2.4.5<span
style='background:white'> run</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347336"><span style='font-family:-apple-system'>2.4.6<span
style='background:white'> join</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347337"><span style='font-family:-apple-system'>2.4.7<span
style='background:white'> yield</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347338"><span style='font-family:-apple-system'>2.4.8<span
style='background:white'> resume</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347339"><span style='font-family:-apple-system'>2.4.9<span
style='background:white'> sleep</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347340"><span style='font-family:-apple-system'>2.4.10<span
style='background:white'> interrupt</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347341"><span style='font-family:-apple-system'>2.4.11<span
style='background:white'> suspend</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347342"><span style='font-family:-apple-system'>2.4.12<span
style='background:white'> stop</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347343">2.5 java.lang.annotation<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347344">2.6 java.lang.reflect<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347345"><span style='font-family:-apple-system'>2.6.1<span
style='background:white'> java.lang.reflect.Member</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347346"><span style='font-family:-apple-system'>2.6.2<span
style='background:white'> java.lang.reflect.GenericDeclaration</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347347"><span style='font-family:-apple-system'>2.6.3<span
style='background:white'> java.lang.reflect.AnnotatedElement</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347348"><span style='font-family:-apple-system'>2.6.4<span
style='background:white'> java.lang.reflect.Executable</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347349"><span style='font-family:-apple-system'>2.6.5<span
style='background:white'> java.lang.reflect.AccessibleObject</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347350"><span style='font-family:-apple-system'>2.6.6<span
style='background:white'> java.lang.reflect.Constructor</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347351"><span style='font-family:-apple-system'>2.6.7<span
style='background:white'> java.lang.reflect.Field</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347352"><span style='font-family:-apple-system'>2.6.8<span
style='background:white'> java.lang.reflect.Mehod</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347353"><span style='font-family:-apple-system'>2.6.9<span
style='background:white'> java.lang.reflect.Parameter</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347354"><span style='font-family:-apple-system'>2.6.10<span
style='background:white'> java.lang.reflect.Proxy</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347355"><span style='font-family:-apple-system'>2.6.11<span
style='background:white'> java.lang.reflect.WeakCache</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347356">2.7 java.lang.Comparable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347357">2.8 java.lang. CharSequence<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347358">2.9 java.lang.String<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347359">2.10 Java.lang. Appendable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347360">2.11 java.lang. AbstractStringBuilder<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347361">2.12 java.lang.StringBuilder<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347362">2.13 java.lang.StringBuffer<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347363">3.<span style='color:windowtext;text-decoration:none'>     </span>java.io<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347364">3.1 java.io. DataInput<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347365">3.2 java.io. ObjectInput<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347366">3.3 java.io. DataOutput<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347367">3.4 java.io. ObjectOutput<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347368">3.5 java.lang. AutoCloseable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347369">3.6 java.io. FilterInputStream<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347370">3.7 java.io. DataInputStream<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347371">3.8 java.io. SocketInputStream<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347372">3.9 java.io. ObjectOutputStream<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347373"><span style='font-family:-apple-system'>3.9.1<span
style='background:white'> java.io. ObjectOutputStream. BlockDataOutputStream</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347374">3.10 java.io. File<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347375">3.11 java.io. FileDescriptor<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347376">3.12 java.io. FileSystem<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347377">3.13<span style='background:white'> java.io.
DefaultFileSystem</span><span style='color:windowtext;display:none;text-decoration:
none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347378">3.14<span style='background:white'>
java.io.WinNTFileSystem</span><span style='color:windowtext;display:none;
text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347379">3.15<span style='background:white'> java.io.
FileOutputStream</span><span style='color:windowtext;display:none;text-decoration:
none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347380">4.<span style='color:windowtext;text-decoration:none'>     </span>java.net<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347381">4.1 java.io.Closeable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347382">4.2 java.net. SocketOptions<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347383">4.3 java.net. SocketImpl<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347384">4.4 java.net. AbstractPlainSocketImpl<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347385">4.5 java.net. Socket<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347386">4.6 java.net. ServerSocket<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347387">4.7 java.net. proxy<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347388">5.<span style='color:windowtext;text-decoration:none'>     </span>java.nio<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347389">5.1 java.nio.channels.Channel<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347390">5.2 java.nio.channels. SelectableChannel<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347391">5.3 java.nio.channels. AbstractSelectableChannel<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347392">5.4 java.nio.channels. ServerSocketChannel<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347393">5.5 java.nio.channels.SelectionKey<span style='color:
windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347394">5.6 sun.nio.ch.WindowsSelectorImpl<span style='color:
windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347395">5.7 sun.nio.ch.WindowsSelectorImpl. SubSelector<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347396">6.<span style='color:windowtext;text-decoration:none'>     </span>java.util<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347397">6.1 java.util.Iterable<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347398">6.2 java.util.Collection<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347399">6.3 java.util.List<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347400">6.4 java.util. Queue<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347401">6.5 java.util. Deque<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347402">6.6<span style='background:white'> java.util.
AbstractCollection</span><span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347403">6.7<span style='background:white'> java.util.
AbstractList</span><span style='color:windowtext;display:none;text-decoration:
none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347404">6.8<span style='background:white'> java.util.
AbstractSequentialList</span><span style='color:windowtext;display:none;
text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347405">6.9 Java.util.LinkedList<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347406"><span style='font-family:-apple-system'>6.9.1<span
style='background:white'> Node</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347407"><span style='font-family:-apple-system'>6.9.2<span
style='background:white'> DescendingIterator</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347408"><span style='font-family:-apple-system'>6.9.3<span
style='background:white'> LLSpliterator</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347409">6.10 java.util.ArrayList<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347410">6.11 java.util.Map<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347411"><span style='font-family:-apple-system'>6.11.1<span
style='background:white'> Entry</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347412">6.12 java.util. AbstractMap<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347413">6.13 java.util. SortedMap<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347414">6.14 java.util. NavigableMap<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347415">6.15 java.util.HashMap<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347416"><span style='font-family:-apple-system'>6.15.1<span
style='background:white'> KeySet</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347417"><span style='font-family:-apple-system'>6.15.2<span
style='background:white'> EntrySet</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347418"><span style='font-family:-apple-system'>6.15.3<span
style='background:white'> Node</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347419"><span style='font-family:-apple-system'>6.15.4<span
style='background:white'> TreeNode</span></span><span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347420">6.16 java.util.TreeMap<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347421">6.17 Java.util.Set<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347422">6.18 java.util. AbstractSet<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347423">6.19 java.util. HashSet<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347424">6.20 java.util. TreeSet<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347425">6.21 Java.util. ServiceLoader<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347426">6.22 java.util.concurrent<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347427"><span style='font-family:-apple-system'>6.22.1<span
style='background:white'> java.util.concurrent. Semaphore</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347428"><span style='font-family:-apple-system'>6.22.1.1<span
style='background:white'> java.util.concurrent. Semaphore. FairSync</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347429"><span style='font-family:-apple-system'>6.22.1.2<span
style='background:white'> java.util.concurrent. Semaphore. NonfairSync</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347430"><span style='font-family:-apple-system'>6.22.2<span
style='background:white'> java.util.concurrent. CyclicBarrier</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347431"><span style='font-family:-apple-system'>6.22.3<span
style='background:white'> java.util.concurrent. CountDownLatch</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347432"><span style='font-family:-apple-system'>6.22.4<span
style='background:white'> java.util.concurrent. Executor</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347433"><span style='font-family:-apple-system'>6.22.5<span
style='background:white'> java.util.concurrent. Executors</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347434"><span style='font-family:-apple-system'>6.22.6<span
style='background:white'> java.util.concurrent. AbstractExecutorService</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347435"><span style='font-family:-apple-system'>6.22.7<span
style='background:white'> java.util.concurrent. Future</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347436"><span style='font-family:-apple-system'>6.22.8<span
style='background:white'> java.util.concurrent. ForkJoinTask</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347437"><span style='font-family:-apple-system'>6.22.9<span
style='background:white'> java.util.concurrent. ForkJoinPool</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347438"><span style='font-family:-apple-system'>6.22.10<span
style='background:white'> java.util.concurrent.locks</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347439"><span style='font-family:-apple-system'>6.22.10.1<span
style='background:white'> java.util.concurrent.locks.lock</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347440"><span style='font-family:-apple-system'>6.22.10.2<span
style='background:white'> java.util.concurrent.locks. LockSupport</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347441"><span style='font-family:-apple-system'>6.22.10.3<span
style='background:white'> java.util.concurrent.locks.
AbstractOwnableSynchronizer</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347442"><span style='font-family:-apple-system'>6.22.10.4<span
style='background:white'> java.util.concurrent.locks.
AbstractQueuedSynchronizer</span></span><span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347443"><span style='font-family:-apple-system'>6.22.10.5<span
style='background:white'> java.util.concurrent.locks. ReentrantLock</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347444"><span style='font-family:-apple-system'>6.22.10.6<span
style='background:white'> java.util.concurrent.locks. Condition</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347445"><span style='font-family:-apple-system'>6.22.10.7<span
style='background:white'> java.util.concurrent.locks. ReentrantReadWriteLock</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc4><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347446"><span style='font-family:-apple-system'>6.22.11<span
style='background:white'> java.util.concurrent.atomic</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347447"><span style='font-family:-apple-system'>6.22.11.1<span
style='background:white'> java.util.concurrent.atomic. AtomicInteger</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc5><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347448"><span style='font-family:-apple-system'>6.22.11.2<span
style='background:white'> java.util.concurrent.atomic. AtomicReference</span></span><span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc128347449">7.<span style='color:windowtext;text-decoration:none'>     </span>References<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347086"></a><a
name="_Toc128347322"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>Source</span></a></h2>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java</span><span lang=EN-US> </span><span
lang=EN-US style='color:black;background:white'>Version</span><span
style='font-family:宋体;color:black;background:white'>：</span><span
style='color:black;background:white'> <span lang=EN-US>jdk1.8</span></span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347087"></a><a
name="_Toc128347323"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>java.lang</span></a></h2>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347088"></a><a
name="_Toc128347324"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.1
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.Class</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.Class</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class
Class&lt;T&gt; implements java.io.Serializable,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                             
GenericDeclaration,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                             
Type,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                             
AnnotatedElement {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final int
ANNOTATION= 0x00002000;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final int
ENUM      = 0x00004000;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final int
SYNTHETIC = 0x00001000;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private Class(ClassLoader
loader) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        classLoader =
loader;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @CallerSensitive</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static
Class&lt;?&gt; forName(String className)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throws
ClassNotFoundException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Class&lt;?&gt;
caller = Reflection.getCallerClass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
forName0(className, true, ClassLoader.getClassLoader(caller), caller);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  @CallerSensitive</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
NoSuchMethodException, SecurityException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
getConstructor0(parameterTypes, Member.PUBLIC);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public &lt;A extends
Annotation&gt; A getDeclaredAnnotation(Class&lt;A&gt; annotationClass) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(annotationClass);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (A)
annotationData().declaredAnnotations.get(annotationClass);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @CallerSensitive</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Field
getDeclaredField(String name)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
NoSuchFieldException, SecurityException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
checkMemberAccess(Member.DECLARED, Reflection.getCallerClass(), true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Field field =
searchFields(privateGetDeclaredFields(false), name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (field == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NoSuchFieldException(name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return field;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@CallerSensitive</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Method
getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
NoSuchMethodException, SecurityException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
checkMemberAccess(Member.DECLARED, Reflection.getCallerClass(), true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Method method =
searchMethods(privateGetDeclaredMethods(false), name, parameterTypes);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (method == null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NoSuchMethodException(getName() + &quot;.&quot; + name +
argumentTypesToString(parameterTypes));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return method;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347325"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.1.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>Atomic</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.Class.Atomic</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static class Atomic
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // initialize Unsafe
machinery here, since we need to call Class.class instance method</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // and have to avoid
calling it in the static initializer of the Class class...</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
Unsafe unsafe = Unsafe.getUnsafe();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // offset of
Class.reflectionData instance field</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
long reflectionDataOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // offset of
Class.annotationType instance field</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
long annotationTypeOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // offset of
Class.annotationData instance field</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
long annotationDataOffset;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Field[] fields =
Class.class.getDeclaredFields0(false); // bypass caches</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
reflectionDataOffset = objectFieldOffset(fields, &quot;reflectionData&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
annotationTypeOffset = objectFieldOffset(fields, &quot;annotationType&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
annotationDataOffset = objectFieldOffset(fields, &quot;annotationData&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static long
objectFieldOffset(Field[] fields, String fieldName) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Field field =
searchFields(fields, fieldName);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (field ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
Error(&quot;No &quot; + fieldName + &quot; field found in
java.lang.Class&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
unsafe.objectFieldOffset(field);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;T&gt;
boolean casReflectionData(Class&lt;?&gt; clazz,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
SoftReference&lt;ReflectionData&lt;T&gt;&gt; oldData,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
SoftReference&lt;ReflectionData&lt;T&gt;&gt; newData) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
unsafe.compareAndSwapObject(clazz, reflectionDataOffset, oldData, newData);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;T&gt;
boolean casAnnotationType(Class&lt;?&gt; clazz,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
AnnotationType oldType,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
AnnotationType newType) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
unsafe.compareAndSwapObject(clazz, annotationTypeOffset, oldType, newType);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;T&gt;
boolean casAnnotationData(Class&lt;?&gt; clazz,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
AnnotationData oldData,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            
AnnotationData newData) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
unsafe.compareAndSwapObject(clazz, annotationDataOffset, oldData, newData);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347326"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.1.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>AnnotationData</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Class. AnnotationData</span><span
style='font-family:宋体;color:black;background:white'>的主要属性</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static class
AnnotationData {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; declaredAnnotations;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Value of
classRedefinedCount when we created this AnnotationData instance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int redefinedCount;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
AnnotationData(Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt;
annotations,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                      
Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; declaredAnnotations,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       int
redefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.annotations
= annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.declaredAnnotations = declaredAnnotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.redefinedCount = redefinedCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Annotations cache</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@SuppressWarnings(&quot;UnusedDeclaration&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile
transient AnnotationData annotationData;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private AnnotationData
annotationData() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (true) { //
retry loop</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            AnnotationData
annotationData = this.annotationData;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int
classRedefinedCount = this.classRedefinedCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(annotationData != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
annotationData.redefinedCount == classRedefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
annotationData;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // null or stale
annotationData -&gt; optimistically create new instance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            AnnotationData
newAnnotationData = createAnnotationData(classRedefinedCount);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // try to
install it</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(Atomic.casAnnotationData(this, annotationData, newAnnotationData)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                //
successfully installed new AnnotationData</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
newAnnotationData;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private AnnotationData
createAnnotationData(int classRedefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Map&lt;Class&lt;?
extends Annotation&gt;, Annotation&gt; declaredAnnotations =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            AnnotationParser.parseAnnotations(getRawAnnotations(),
getConstantPool(), this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Class&lt;?&gt;
superClass = getSuperclass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Map&lt;Class&lt;?
extends Annotation&gt;, Annotation&gt; annotations = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (superClass !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Map&lt;Class&lt;?
extends Annotation&gt;, Annotation&gt; superAnnotations =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
superClass.annotationData().annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Map.Entry&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; e :
superAnnotations.entrySet()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                Class&lt;?
extends Annotation&gt; annotationClass = e.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(AnnotationType.getInstance(annotationClass).isInherited()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(annotations == null) { // lazy construction</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
annotations = new LinkedHashMap&lt;&gt;((Math.max(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                declaredAnnotations.size(),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
Math.min(12, declaredAnnotations.size() + superAnnotations.size())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
) * 4 + 2) / 3</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        );</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    annotations.put(annotationClass,
e.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (annotations ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // no inherited
annotations -&gt; share the Map with declaredAnnotations</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            annotations =
declaredAnnotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // at least one
inherited annotation -&gt; declared may override inherited</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
annotations.putAll(declaredAnnotations);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
AnnotationData(annotations, declaredAnnotations, classRedefinedCount);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347327"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.1.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>ReflectionData</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Class. ReflectionData</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>private static class
ReflectionData&lt;T&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Field[]
declaredFields;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Field[]
publicFields;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Method[]
declaredMethods;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Method[]
publicMethods;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile
Constructor&lt;T&gt;[] declaredConstructors;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile
Constructor&lt;T&gt;[] publicConstructors;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Intermediate
results for getFields and getMethods</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Field[]
declaredPublicFields;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Method[]
declaredPublicMethods;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile
Class&lt;?&gt;[] interfaces;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Cached names</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        String simpleName;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        String
canonicalName;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final String
NULL_SENTINEL = new String();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Value of
classRedefinedCount when we created this ReflectionData instance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int
redefinedCount;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ReflectionData(int
redefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.redefinedCount = redefinedCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
volatile SoftReference&lt;ReflectionData&lt;T&gt;&gt; reflectionData;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Incremented by the VM
on each call to JVM TI RedefineClasses()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // that redefines this
class or a superclass.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
volatile int classRedefinedCount;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Lazily create and
cache ReflectionData</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
ReflectionData&lt;T&gt; reflectionData() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
SoftReference&lt;ReflectionData&lt;T&gt;&gt; reflectionData =
this.reflectionData;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int
classRedefinedCount = this.classRedefinedCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ReflectionData&lt;T&gt; rd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (reflectionData
!= null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            (rd =
reflectionData.get()) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
rd.redefinedCount == classRedefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return rd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // else no
SoftReference or cleared SoftReference or stale ReflectionData</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // -&gt; create and
replace new instance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
newReflectionData(reflectionData, classRedefinedCount);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
ReflectionData&lt;T&gt; newReflectionData(SoftReference&lt;ReflectionData&lt;T&gt;&gt;
oldReflectionData,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                               
int classRedefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (true) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ReflectionData&lt;T&gt; rd = new ReflectionData&lt;&gt;(classRedefinedCount);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // try to CAS
it...</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(Atomic.casReflectionData(this, oldReflectionData, new
SoftReference&lt;&gt;(rd))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return rd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // else retry</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
oldReflectionData = this.reflectionData;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
classRedefinedCount = this.classRedefinedCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(oldReflectionData != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (rd =
oldReflectionData.get()) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
rd.redefinedCount == classRedefinedCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return rd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR- style='text-indent:21.6pt'><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347089"></a><a
name="_Toc128347328"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.2
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.
Object</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Object</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Object {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static native
void registerNatives();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        registerNatives();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final native
Class&lt;?&gt; getClass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native int
hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
equals(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (this ==
obj);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected native Object
clone() throws CloneNotSupportedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public String toString()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final native void
notify();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final native void
notifyAll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final native void
wait(long timeout) throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void
wait(long timeout, int nanos) throws InterruptedException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (timeout &lt; 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new IllegalArgumentException(&quot;timeout
value is negative&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (nanos &lt; 0 ||
nanos &gt; 999999) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
&quot;nanosecond timeout value out of range&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (nanos &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            timeout++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        wait(timeout);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void wait()
throws InterruptedException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        wait(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected void
finalize() throws Throwable { }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347090"></a><a
name="_Toc128347329"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.3
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.Runnable</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Runnable</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>@FunctionalInterface</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Runnable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract void
run();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347091"></a><a
name="_Toc128347330"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.4
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.Thread</span></a></h3>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347331"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>thread</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread</span><span
style='font-family:宋体;color:black;background:white'>的主要属性</span></p>

<p class=COR-><span lang=EN-US style='color:black'>Public class Thread
implements Runnable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile String
name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private boolean    
daemon = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private ThreadGroup
group;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private ClassLoader
contextClassLoader;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
ThreadLocal.ThreadLocalMap threadLocals = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private long stackSize;</span></p>

<p class=COR- style='text-indent:21.0pt'><span lang=EN-US style='color:black'>private
long tid;// Thread ID</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /* For generating thread
ID */</span></p>

<p class=COR- style='text-indent:21.0pt'><span lang=EN-US style='color:black'>private
static long threadSeqNumber;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347332"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>init</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread</span><span
style='font-family:宋体;color:black;background:white'>的主要</span><span lang=EN-US
style='color:black;background:white'>init</span><span style='font-family:宋体;
color:black;background:white'>方法</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas;color:black'> </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
Thread(ThreadGroup group, Runnable target) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        init(group, target,
&quot;Thread-&quot; + nextThreadNum(), 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>    </span><span lang=EN-US style='color:black'>private void
init(ThreadGroup g, Runnable target, String name,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                      long
stackSize, AccessControlContext acc,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                     
boolean inheritThreadLocals) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (name == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NullPointerException(&quot;name cannot be null&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.name = name;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Thread parent =
currentThread();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager
security = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (g == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            /* Determine if
it's an applet or not */</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            /* If there is a
security manager, ask the security manager</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               what to do.
*/</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                g =
security.getThreadGroup();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            /* If the
security doesn't have a strong opinion of the matter</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               use the
parent thread group. */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (g == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                g =
parent.getThreadGroup();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /* checkAccess
regardless of whether or not threadgroup is</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           explicitly passed
in. */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        g.checkAccess();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /*</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Do we have the
required permissions?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(isCCLOverridden(getClass())) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        g.addUnstarted();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.group = g;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.daemon =
parent.isDaemon();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.priority =
parent.getPriority();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (security == null
|| isCCLOverridden(parent.getClass()))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.contextClassLoader = parent.getContextClassLoader();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.contextClassLoader = parent.contextClassLoader;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.inheritedAccessControlContext
=</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                acc != null
? acc : AccessController.getContext();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.target =
target;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
setPriority(priority);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.inheritableThreadLocals
=</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /* Stash the
specified stack size in case the VM cares */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.stackSize =
stackSize;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /* Set thread ID */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        tid = nextThreadID();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347333"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>State</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread .State</span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>state</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>public enum State {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a thread which has not yet started.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        NEW,</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a runnable thread.  A thread in the runnable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * state is
executing in the Java virtual machine but it may</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * be waiting for
other resources from the operating system</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * such as
processor.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        RUNNABLE,</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a thread blocked waiting for a monitor lock.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * A thread in the
blocked state is waiting for a monitor lock</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * to enter a
synchronized block/method or</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * reenter a
synchronized block/method after calling</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * {@link
Object#wait() Object.wait}.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        BLOCKED,</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a waiting thread.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * A thread is in
the waiting state due to calling one of the</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * following methods:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * &lt;ul&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * &lt;/ul&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * &lt;p&gt;A thread
in the waiting state is waiting for another thread to</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * perform a
particular action.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * For example, a
thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * on an object is
waiting for another thread to call</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *
&lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt;
on</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * that object. A
thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * is waiting for a
specified thread to terminate.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        WAITING,</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a waiting thread with a specified waiting time.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * A thread is in
the timed waiting state due to calling one of</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * the following
methods with a specified positive waiting time:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * &lt;ul&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *   &lt;li&gt;{@link
#sleep Thread.sleep}&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         *  
&lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * &lt;/ul&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TIMED_WAITING,</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Thread state for
a terminated thread.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * The thread has
completed execution.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TERMINATED;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347334"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.4 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>start</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>start</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public synchronized void
start() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (threadStatus !=
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalThreadStateException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        group.add(this);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean started =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            start0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            started = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(!started) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
group.threadStartFailed(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(Throwable ignore) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native void
start0();</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347335"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.5 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>run</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>run</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public void run() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (target != null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            target.run();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347336"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.6 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>join</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>join</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final synchronized
void join(long millis)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    throws
InterruptedException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long base =
System.currentTimeMillis();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long now = 0;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (millis &lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new IllegalArgumentException(&quot;timeout
value is negative&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (millis == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(isAlive()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                wait(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(isAlive()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                long delay =
millis - now;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (delay
&lt;= 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                wait(delay);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                now =
System.currentTimeMillis() - base;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347337"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.7 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>yield</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>yield</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static native
void yield();</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347338"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.8 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>resume</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>resume</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  @Deprecated</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void
resume() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        checkAccess();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        resume0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native void
resume0();</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347339"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.9 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>sleep</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>sleep</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public static native void
sleep(long millis) throws InterruptedException;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347340"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.10 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>interrupt</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='font-size:14.0pt;line-height:150%;font-family:Consolas;color:black'>interrupt</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>  public void
interrupt() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (this !=
Thread.currentThread())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            checkAccess();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(blockerLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Interruptible b
= blocker;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (b != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
interrupt0();           // Just to set the interrupt flag</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
b.interrupt(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        interrupt0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private native void
interrupt0();</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347341"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.11 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>suspend</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>suspend</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  @Deprecated</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void
suspend() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        checkAccess();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        suspend0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  private native void
suspend0();</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347342"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.4.12 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>stop</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
style='font-family:宋体;color:black;background:white'>线程</span><span lang=EN-US
style='color:black;background:white'>java.lang.Thread </span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>stop</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final void stop() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager
security = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            checkAccess();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (this != Thread.currentThread())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // A zero status
value corresponds to &quot;NEW&quot;, it can't change to</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // not-NEW because
we hold the lock.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (threadStatus !=
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            resume(); //
Wake up thread if it was suspended; no-op otherwise</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // The VM can handle
all thread states</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        stop0(new
ThreadDeath());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private native void
stop0(Object o);</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347092"></a><a
name="_Toc128347343"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.5
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.annotation</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-family:"Times New Roman",serif'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347093"></a><a
name="_Toc128347344"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.6
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.reflect</span></a></h3>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347345"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Member</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect.Member</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Member {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static final int
PUBLIC = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static final int
DECLARED = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Class&lt;?&gt;
getDeclaringClass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public String getName();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int
getModifiers();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
isSynthetic();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347346"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.GenericDeclaration</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. GenericDeclaration</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
GenericDeclaration extends AnnotatedElement {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
TypeVariable&lt;?&gt;[] getTypeParameters();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347347"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.AnnotatedElement</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. AnnotatedElement</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
AnnotatedElement {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default boolean
isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
getAnnotation(annotationClass) != null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T extends
Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Annotation[]
getAnnotations();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Annotation[]
getDeclaredAnnotations();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347348"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.4 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Executable</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Executable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
Executable extends AccessibleObject</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements Member,
GenericDeclaration {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Executable() {}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native
Parameter[] getParameters0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    native byte[] getTypeAnnotationBytes0();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347349"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.5 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.AccessibleObject</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. AccessibleObject</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
AccessibleObject implements AnnotatedElement {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final private
java.security.Permission ACCESS_PERMISSION =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        new
ReflectPermission(&quot;suppressAccessChecks&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
setAccessible(AccessibleObject[] array, boolean flag)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
SecurityException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager sm =
System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (sm != null)
sm.checkPermission(ACCESS_PERMISSION);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; array.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setAccessible0(array[i], flag);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void
setAccessible(boolean flag) throws SecurityException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager sm =
System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (sm != null)
sm.checkPermission(ACCESS_PERMISSION);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        setAccessible0(this,
flag);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static void
setAccessible0(AccessibleObject obj, boolean flag)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
SecurityException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (obj instanceof
Constructor &amp;&amp; flag == true) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(c.getDeclaringClass() == Class.class) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
SecurityException(&quot;Cannot make a java.lang.Class&quot; +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                            &quot;
constructor accessible&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        obj.override = flag;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
isAccessible() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return override;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
AccessibleObject() {}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347350"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.6 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Constructor</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Constructor</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class
Constructor&lt;T&gt; extends Executable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;T&gt;            clazz;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 slot;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;[]          parameterTypes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;[]          exceptionTypes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Generics and
annotations support</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
String    signature;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // generic info
repository; lazily initialized</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
ConstructorRepository genericInfo;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              parameterAnnotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public T
newInstance(Object ... initargs)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
InstantiationException, IllegalAccessException,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               IllegalArgumentException,
InvocationTargetException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!override) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(!Reflection.quickCheckMemberAccess(clazz, modifiers)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Class&lt;?&gt; caller = Reflection.getCallerClass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
checkAccess(caller, clazz, null, modifiers);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
((clazz.getModifiers() &amp; Modifier.ENUM) != 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ConstructorAccessor
ca = constructorAccessor;   // read volatile</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (ca == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ca =
acquireConstructorAccessor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        T inst = (T)
ca.newInstance(initargs);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return inst;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347351"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.7 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Field</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect.</span><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>Field</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class Field extends
AccessibleObject implements Member {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;            clazz;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 slot;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
String              name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;            type;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Generics and
annotations support</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
String    signature;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // generic info
repository; lazily initialized</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
FieldRepository genericInfo;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Cached field accessor
created without override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private FieldAccessor
fieldAccessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Cached field accessor
created with override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private FieldAccessor
overrideFieldAccessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private Field              
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   Field(Class&lt;?&gt;
declaringClass,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          String name,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          Class&lt;?&gt;
type,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          int modifiers,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          int slot,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          String signature,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          byte[]
annotations)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.clazz =
declaringClass;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.name = name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.type = type;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.modifiers =
modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.slot = slot;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.signature =
signature;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.annotations =
annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  private void
setFieldAccessor(FieldAccessor accessor, boolean overrideFinalCheck) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(overrideFinalCheck)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
overrideFieldAccessor = accessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            fieldAccessor =
accessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Propagate up</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (root != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
root.setFieldAccessor(accessor, overrideFinalCheck);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347352"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.8 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Mehod</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Method</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class Method
extends Executable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;            clazz;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 slot;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // This is guaranteed to
be interned by the VM in the 1.4</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // reflection
implementation</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
String              name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;            returnType;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Class&lt;?&gt;[]         
parameterTypes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Class&lt;?&gt;[]          exceptionTypes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
int                 modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Generics and
annotations support</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
String              signature;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // generic info
repository; lazily initialized</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
MethodRepository genericInfo;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              parameterAnnotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
byte[]              annotationDefault;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile
MethodAccessor methodAccessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
Method              root;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Generics
infrastructure</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private String
getGenericSignature() {return signature;}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Accessor for factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private GenericsFactory
getFactory() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // create scope and
factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
CoreReflectionFactory.make(this, MethodScope.make(this));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Accessor for generic
info repository</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    MethodRepository
getGenericInfo() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // lazily initialize
repository if necessary</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (genericInfo ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // create and
cache generic info repository</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            genericInfo =
MethodRepository.make(getGenericSignature(),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                               
getFactory());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return genericInfo;
//return cached repository</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Method(Class&lt;?&gt;
declaringClass,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           String name,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           Class&lt;?&gt;[]
parameterTypes,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           Class&lt;?&gt;
returnType,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           Class&lt;?&gt;[]
checkedExceptions,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           int modifiers,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           int slot,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           String signature,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           byte[]
annotations,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           byte[]
parameterAnnotations,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           byte[]
annotationDefault) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.clazz =
declaringClass;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.name = name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.parameterTypes
= parameterTypes;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.returnType =
returnType;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.exceptionTypes
= checkedExceptions;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.modifiers =
modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.slot = slot;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.signature =
signature;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.annotations =
annotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
this.parameterAnnotations = parameterAnnotations;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.annotationDefault
= annotationDefault;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
setMethodAccessor(MethodAccessor accessor) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        methodAccessor =
accessor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Propagate up</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (root != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
root.setMethodAccessor(accessor);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347353"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.9 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Parameter</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Parameter</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class Parameter
implements AnnotatedElement {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final String
name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int
modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final Executable
executable;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final int index;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Parameter(String name,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              int modifiers,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              Executable
executable,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.name = name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.modifiers =
modifiers;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.executable =
executable;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.index = index;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public String getName()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Note: empty
strings as paramete names are now outlawed.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // The
.equals(&quot;&quot;) is for compatibility with current JVM</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // behavior.  It may
be removed at some point.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if(name == null ||
name.equals(&quot;&quot;))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
&quot;arg&quot; + index;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Package-private
accessor to the real name field.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    String getRealName() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Type
getParameterizedType() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Type tmp =
parameterTypeCache;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (null == tmp) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            tmp =
executable.getAllGenericParameterTypes()[index];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
parameterTypeCache = tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
volatile Type parameterTypeCache = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Class&lt;?&gt;
getType() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Class&lt;?&gt; tmp =
parameterClassCache;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (null == tmp) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            tmp =
executable.getParameterTypes()[index];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
parameterClassCache = tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return tmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347354"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.10 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.Proxy</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Proxy</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Proxy
implements java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = -2222568056686623797L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Class&lt;?&gt;[] constructorParams =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        {
InvocationHandler.class };</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        proxyClassCache =
new WeakCache&lt;&gt;(new KeyFactory(), new ProxyClassFactory());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
InvocationHandler h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Proxy() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  protected
Proxy(InvocationHandler h) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(h);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.h = h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. Proxy</span><span
style='font-family:宋体;color:black;background:white'>生成实例对象</span><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>newProxyInstance</span><span style='font-size:14.0pt;line-height:
150%;font-family:宋体;color:black'>方法</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'> </span><span lang=EN-US style='color:black'> @CallerSensitive</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static Object
newProxyInstance(ClassLoader loader,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                         
Class&lt;?&gt;[] interfaces,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                         
InvocationHandler h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
IllegalArgumentException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Objects.requireNonNull(h);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Class&lt;?&gt;[] intfs = interfaces.clone();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
SecurityManager sm = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (sm != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /*</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Look up or
generate the designated proxy class.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Class&lt;?&gt; cl =
getProxyClass0(loader, intfs);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /*</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Invoke its
constructor with the designated invocation handler.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (sm != null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
checkNewProxyPermission(Reflection.getCallerClass(), cl);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final
Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final
InvocationHandler ih = h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!Modifier.isPublic(cl.getModifiers()))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    public
Void run() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
cons.setAccessible(true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
cons.newInstance(new Object[]{h});</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(IllegalAccessException|InstantiationException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
InternalError(e.toString(), e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(InvocationTargetException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Throwable t =
e.getCause();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (t instanceof
RuntimeException) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw
(RuntimeException) t;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
InternalError(t.toString(), t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchMethodException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
InternalError(e.toString(), e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static void
checkNewProxyPermission(Class&lt;?&gt; caller, Class&lt;?&gt; proxyClass) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager sm =
System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (sm != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(ReflectUtil.isNonPublicProxyClass(proxyClass)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ClassLoader
ccl = caller.getClassLoader();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ClassLoader
pcl = proxyClass.getClassLoader();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // do
permission check if the caller is in a different runtime package</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // of the
proxy class</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int n =
proxyClass.getName().lastIndexOf('.');</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                String pkg =
(n == -1) ? &quot;&quot; : proxyClass.getName().substring(0, n);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                n = caller.getName().lastIndexOf('.');</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                String
callerPkg = (n == -1) ? &quot;&quot; : caller.getName().substring(0, n);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pcl !=
ccl || !pkg.equals(callerPkg)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
sm.checkPermission(new ReflectPermission(&quot;newProxyInPackage.&quot; +
pkg));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347355"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>2.6.11 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.lang.reflect.WeakCache</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.reflect. WeakCache</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>final class WeakCache&lt;K,
P, V&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ReferenceQueue&lt;K&gt; refQueue</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        = new
ReferenceQueue&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // the key type is
Object for supporting null key</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ConcurrentMap&lt;Object, ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt;&gt; map</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        = new
ConcurrentHashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ConcurrentMap&lt;Supplier&lt;V&gt;, Boolean&gt; reverseMap</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        = new ConcurrentHashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
BiFunction&lt;K, P, ?&gt; subKeyFactory;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
BiFunction&lt;K, P, V&gt; valueFactory;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
WeakCache(BiFunction&lt;K, P, ?&gt; subKeyFactory,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    
BiFunction&lt;K, P, V&gt; valueFactory) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.subKeyFactory =
Objects.requireNonNull(subKeyFactory);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.valueFactory =
Objects.requireNonNull(valueFactory);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public V get(K key, P
parameter) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(parameter);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
expungeStaleEntries();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object cacheKey =
CacheKey.valueOf(key, refQueue);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // lazily install
the 2nd level valuesMap for the particular cacheKey</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (valuesMap ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ConcurrentMap&lt;Object,
Supplier&lt;V&gt;&gt; oldValuesMap</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                =
map.putIfAbsent(cacheKey,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                 
valuesMap = new ConcurrentHashMap&lt;&gt;());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (oldValuesMap
!= null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                valuesMap =
oldValuesMap;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // create subKey and
retrieve the possible Supplier&lt;V&gt; stored by that</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // subKey from
valuesMap</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object subKey =
Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Supplier&lt;V&gt;
supplier = valuesMap.get(subKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Factory factory =
null;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (true) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (supplier !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // supplier
might be a Factory or a CacheValue&lt;V&gt; instance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                V value =
supplier.get();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (value !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // else no
supplier in cache</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // or a supplier
that returned null (could be a cleared CacheValue</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // or a Factory
that wasn't successful in installing the CacheValue)</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // lazily
construct a Factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (factory ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                factory =
new Factory(key, parameter, subKey, valuesMap);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (supplier ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                supplier =
valuesMap.putIfAbsent(subKey, factory);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (supplier
== null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    //
successfully installed Factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    supplier
= factory;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // else
retry with winning supplier</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(valuesMap.replace(subKey, supplier, factory)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    //
successfully replaced</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    //
cleared CacheEntry / unsuccessful Factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // with
our Factory</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    supplier
= factory;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // retry
with current supplier</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    supplier
= valuesMap.get(subKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
containsValue(V value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(value);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
expungeStaleEntries();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
reverseMap.containsKey(new LookupValue&lt;&gt;(value));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int size() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
expungeStaleEntries();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return reverseMap.size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void
expungeStaleEntries() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        CacheKey&lt;K&gt;
cacheKey;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while ((cacheKey =
(CacheKey&lt;K&gt;)refQueue.poll()) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
cacheKey.expungeFrom(map, reverseMap);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final class Factory
implements Supplier&lt;V&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final K key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final P
parameter;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final Object
subKey;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final
ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Factory(K key, P
parameter, Object subKey,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.key = key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.parameter =
parameter;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.subKey =
subKey;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.valuesMap =
valuesMap;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public synchronized
V get() { // serialize access</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // re-check</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (supplier !=
this) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // else still us
(supplier == this)</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // create new
value</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V value = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                value =
Objects.requireNonNull(valueFactory.apply(key, parameter));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (value ==
null) { // remove us on failure</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
valuesMap.remove(subKey, this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // the only path
to reach here is with non-null value</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            assert value !=
null;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // wrap value
with CacheValue (WeakReference)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            CacheValue&lt;V&gt;
cacheValue = new CacheValue&lt;&gt;(value);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // put into
reverseMap</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
reverseMap.put(cacheValue, Boolean.TRUE);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // try replacing
us with CacheValue (this should always succeed)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!valuesMap.replace(subKey,
this, cacheValue)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
AssertionError(&quot;Should not reach here&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // successfully
replaced us with new CacheValue -&gt; return the value</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // wrapped by it</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private interface
Value&lt;V&gt; extends Supplier&lt;V&gt; {}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
class LookupValue&lt;V&gt; implements Value&lt;V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final V
value;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        LookupValue(V value)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.value =
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public V get() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
hashCode() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
System.identityHashCode(value); // compare by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
equals(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return obj ==
this ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   obj
instanceof Value &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                  
this.value == ((Value&lt;?&gt;) obj).get();  // compare by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
class CacheValue&lt;V&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        extends
WeakReference&lt;V&gt; implements Value&lt;V&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int
hash;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        CacheValue(V value)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.hash =
System.identityHashCode(value); // compare by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
hashCode() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
equals(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return obj ==
this ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   obj
instanceof Value &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   //
cleared CacheValue is only equal to itself</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   (value =
get()) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   value ==
((Value&lt;?&gt;) obj).get(); // compare by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
class CacheKey&lt;K&gt; extends WeakReference&lt;K&gt; {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // a replacement for
null keys</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
Object NULL_KEY = new Object();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K&gt;
Object valueOf(K key, ReferenceQueue&lt;K&gt; refQueue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return key ==
null</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   // null
key means we can't weakly reference it,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   // so we
use a NULL_KEY singleton as cache key</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   ?
NULL_KEY</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   //
non-null key requires wrapping with a WeakReference</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   : new
CacheKey&lt;&gt;(key, refQueue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int
hash;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private CacheKey(K
key, ReferenceQueue&lt;K&gt; refQueue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(key,
refQueue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.hash =
System.identityHashCode(key);  // compare by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
hashCode() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
equals(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            K key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return obj ==
this ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   obj !=
null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                  
obj.getClass() == this.getClass() &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   //
cleared CacheKey is only equal to itself</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   (key =
this.get()) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   //
compare key by identity</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   key ==
((CacheKey&lt;K&gt;) obj).get();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void expungeFrom(ConcurrentMap&lt;?,
? extends ConcurrentMap&lt;?, ?&gt;&gt; map,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
ConcurrentMap&lt;?, Boolean&gt; reverseMap) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ConcurrentMap&lt;?, ?&gt; valuesMap = map.remove(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // remove also
from reverseMap if needed</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (valuesMap !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (Object
cacheValue : valuesMap.values()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
reverseMap.remove(cacheValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347094"></a><a
name="_Toc128347356"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.7
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.Comparable</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Comparable</span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='font-size:14.0pt;line-height:150%;font-family:Consolas;color:black'>compareTo</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Comparable&lt;T&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int compareTo(T
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347095"></a><a
name="_Toc128347357"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.8
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.
CharSequence</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. CharSequence</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
CharSequence {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int length();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    char charAt(int index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    CharSequence
subSequence(int start, int end);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-family:"Times New Roman",serif'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-family:"Times New Roman",serif'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347096"></a><a
name="_Toc128347358"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.9
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.String</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.String</span><span
style='font-family:宋体;color:black;background:white'>的主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class String</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
java.io.Serializable, Comparable&lt;String&gt;, CharSequence {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final char
value[];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int hash; //
Default to 0</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = -6849794470754667710L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
ObjectStreamField[] serialPersistentFields =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        new
ObjectStreamField[0];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public String() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.value =
&quot;&quot;.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public String(String original)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.value =
original.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.hash =
original.hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public String(char
value[]) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.value =
Arrays.copyOf(value, value.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public String(char
value[], int offset, int count) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (offset &lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
StringIndexOutOfBoundsException(offset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (count &lt;= 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (count &lt;
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
StringIndexOutOfBoundsException(count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (offset &lt;=
value.length) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                this.value =
&quot;&quot;.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Note: offset or
count might be near -1&gt;&gt;&gt;1.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (offset &gt;
value.length - count) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new StringIndexOutOfBoundsException(offset
+ count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.value =
Arrays.copyOfRange(value, offset, offset+count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean isEmpty() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return value.length
== 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       public int hashCode()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int h = hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (h == 0
&amp;&amp; value.length &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            char val[] =
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int i = 0;
i &lt; value.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                h = 31 * h +
val[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            hash = h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean equals(Object
anObject) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (this ==
anObject) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (anObject
instanceof String) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            String
anotherString = (String)anObject;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int n =
value.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (n == anotherString.value.length)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                char v1[] =
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                char v2[] =
anotherString.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int i = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                while (n--
!= 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(v1[i] != v2[i])</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    i++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347097"></a><a
name="_Toc128347359"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.10
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Java.lang.
Appendable</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.lang. Appendable</span></p>

<p style='margin-top:14.4pt;text-indent:28.0pt;line-height:150%'><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Appendable
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Appendable
append(CharSequence csq) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Appendable
append(CharSequence csq, int start, int end) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Appendable append(char
c) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:28.0pt;line-height:150%'><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347098"></a><a
name="_Toc128347360"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.11
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.
AbstractStringBuilder</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang.
AbstractStringBuilder</span><span style='font-family:宋体;color:black;background:
white'>的主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>abstract class AbstractStringBuilder
implements Appendable, CharSequence {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    char[] value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int count;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    AbstractStringBuilder()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
AbstractStringBuilder(int capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        value = new
char[capacity];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int length() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return count;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int capacity() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return value.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
AbstractStringBuilder append(char c) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ensureCapacityInternal(count + 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        value[count++] = c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  private int
newCapacity(int minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        //
overflow-conscious code</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int newCapacity =
(value.length &lt;&lt; 1) + 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (newCapacity -
minCapacity &lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            newCapacity =
minCapacity;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (newCapacity
&lt;= 0 || MAX_ARRAY_SIZE - newCapacity &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ?
hugeCapacity(minCapacity)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            : newCapacity;</span></p>

<p class=COR- style='text-indent:21.6pt'><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347099"></a><a
name="_Toc128347361"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.12
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.StringBuilder</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. StringBuilder</span><span
style='font-family:宋体;color:black;background:white'>的主要方法</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class
StringBuilder</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends AbstractStringBuilder</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
java.io.Serializable, CharSequence</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final long
serialVersionUID = 4383685877147921099L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuilder() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuilder(int
capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(capacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
StringBuilder(String str) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(str.length() +
16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        append(str);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
StringBuilder(CharSequence seq) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(seq.length() +
16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        append(seq);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuilder
append(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
append(String.valueOf(obj));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuilder
append(String str) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(str);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347100"></a><a
name="_Toc128347362"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>2.13
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.StringBuffer</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. StringBuffer</span><span
style='font-family:宋体;color:black;background:white'>的主要方法</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class
StringBuffer</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractStringBuilder</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
java.io.Serializable, CharSequence</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient char[]
toStringCache;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final long
serialVersionUID = 3388685877147921107L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuffer() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public StringBuffer(int
capacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(capacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
StringBuffer(String str) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(str.length() +
16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        append(str);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
StringBuffer(CharSequence seq) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(seq.length() +
16);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        append(seq);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
length() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return count;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
capacity() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return value.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
ensureCapacity(int minimumCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
super.ensureCapacity(minimumCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
trimToSize() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.trimToSize();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
setLength(int newLength) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
super.setLength(newLength);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized char
charAt(int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((index &lt; 0)
|| (index &gt;= count))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
StringIndexOutOfBoundsException(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return value[index];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
codePointAt(int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
super.codePointAt(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
codePointBefore(int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
super.codePointBefore(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
codePointCount(int beginIndex, int endIndex) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
super.codePointCount(beginIndex, endIndex);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized int
offsetByCodePoints(int index, int codePointOffset) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
super.offsetByCodePoints(index, codePointOffset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
getChars(int srcBegin, int srcEnd, char[] dst,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                     
int dstBegin)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
super.getChars(srcBegin, srcEnd, dst, dstBegin);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
setCharAt(int index, char ch) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((index &lt; 0)
|| (index &gt;= count))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
StringIndexOutOfBoundsException(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        value[index] = ch;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(Object obj) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
super.append(String.valueOf(obj));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(String str) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(str);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(StringBuffer sb) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(sb);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    synchronized
StringBuffer append(AbstractStringBuilder asb) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(asb);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(CharSequence s) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(CharSequence s, int start, int end)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(s,
start, end);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized
StringBuffer append(char[] str) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        toStringCache =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super.append(str);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347101"></a><a
name="_Toc128347363"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>java.io</span></a></h2>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347102"></a><a
name="_Toc128347364"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.1
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
DataInput</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. DataInput</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface DataInput {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void readFully(byte b[])
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void readFully(byte b[],
int off, int len) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int skipBytes(int n)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean readBoolean()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    byte readByte() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int readUnsignedByte()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    short readShort() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int readUnsignedShort()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    char readChar() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int readInt() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    long readLong() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    float readFloat() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    double readDouble()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    String readLine() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    String readUTF() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347103"></a><a
name="_Toc128347365"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.2
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
ObjectInput</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. ObjectInput</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface ObjectInput
extends DataInput, AutoCloseable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Object
readObject()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
ClassNotFoundException, IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read() throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[]) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[], int off, int len) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public long skip(long n)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int available()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void close()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347104"></a><a
name="_Toc128347366"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.3
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
DataOutput</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. DataOutput</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface DataOutput
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void write(int b) throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void write(byte b[])
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void write(byte b[], int
off, int len) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
writeBoolean(boolean v) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeByte(int v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeShort(int v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeChar(int v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeInt(int v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeLong(long v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeFloat(float v)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeDouble(double
v) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeBytes(String
s) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeChars(String
s) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void writeUTF(String s)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347105"></a><a
name="_Toc128347367"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.4
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
ObjectOutput</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. ObjectOutput</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
ObjectOutput extends DataOutput, AutoCloseable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void
writeObject(Object obj)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void write(int b)
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void write(byte
b[]) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void write(byte
b[], int off, int len) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void flush()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void close()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347106"></a><a
name="_Toc128347368"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.5
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.lang.
AutoCloseable</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. AutoCloseable</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
AutoCloseable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void close() throws
Exception;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347107"></a><a
name="_Toc128347369"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.6
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
FilterInputStream</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. FilterInputStream</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
FilterInputStream extends InputStream {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected volatile
InputStream in;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected FilterInputStream(InputStream
in) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.in = in;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read() throws
IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[]) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return read(b, 0,
b.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[], int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return in.read(b,
off, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public long skip(long n)
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return in.skip(n);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int available()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
in.available();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void close()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        in.close();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
mark(int readlimit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        in.mark(readlimit);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public synchronized void
reset() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        in.reset();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
markSupported() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
in.markSupported();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347108"></a><a
name="_Toc128347370"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.7
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
DataInputStream</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. DataInputStream</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class DataInputStream
extends FilterInputStream implements DataInput {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public DataInputStream(InputStream
in) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        super(in);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private byte bytearr[] =
new byte[80];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private char chararr[] =
new char[80];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
read(byte b[]) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return in.read(b, 0,
b.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
read(byte b[], int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return in.read(b,
off, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void
readFully(byte b[]) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        readFully(b, 0,
b.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final void
readFully(byte b[], int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (len &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int n = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (n &lt; len) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int count =
in.read(b, off + n, len - n);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (count &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            n += count;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
skipBytes(int n) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int total = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int cur = 0;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while ((total&lt;n)
&amp;&amp; ((cur = (int) in.skip(n-total)) &gt; 0)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            total += cur;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return total;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final boolean
readBoolean() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (ch &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (ch != 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final byte
readByte() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (ch &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (byte)(ch);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
readUnsignedByte() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (ch &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return ch;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final short
readShort() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch1 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch2 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((ch1 | ch2) &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (short)((ch1
&lt;&lt; 8) + (ch2 &lt;&lt; 0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
readUnsignedShort() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch1 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch2 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((ch1 | ch2) &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (ch1 &lt;&lt;
8) + (ch2 &lt;&lt; 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final char
readChar() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch1 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch2 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((ch1 | ch2) &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (char)((ch1
&lt;&lt; 8) + (ch2 &lt;&lt; 0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final int
readInt() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch1 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch2 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch3 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ch4 = in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((ch1 | ch2 | ch3
| ch4) &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
EOFException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return ((ch1
&lt;&lt; 24) + (ch2 &lt;&lt; 16) + (ch3 &lt;&lt; 8) + (ch4 &lt;&lt; 0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private byte
readBuffer[] = new byte[8];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final long
readLong() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
readFully(readBuffer, 0, 8);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
(((long)readBuffer[0] &lt;&lt; 56) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((long)(readBuffer[1] &amp; 255) &lt;&lt; 48) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((long)(readBuffer[2] &amp; 255) &lt;&lt; 40) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((long)(readBuffer[3] &amp; 255) &lt;&lt; 32) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ((long)(readBuffer[4]
&amp; 255) &lt;&lt; 24) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((readBuffer[5] &amp; 255) &lt;&lt; 16) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((readBuffer[6] &amp; 255) &lt;&lt;  8) +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
((readBuffer[7] &amp; 255) &lt;&lt;  0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final float
readFloat() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Float.intBitsToFloat(readInt());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final double
readDouble() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Double.longBitsToDouble(readLong());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private char
lineBuffer[];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Deprecated</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final String
readLine() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        char buf[] =
lineBuffer;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (buf == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf = lineBuffer
= new char[128];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int room =
buf.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int offset = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int c;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>loop:   while (true) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            switch (c =
in.read()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              case -1:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              case '\n':</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                break loop;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              case '\r':</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int c2 =
in.read();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((c2 !=
'\n') &amp;&amp; (c2 != -1)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (!(in
instanceof PushbackInputStream)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
this.in = new PushbackInputStream(in);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
((PushbackInputStream)in).unread(c2);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                break loop;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              default:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (--room
&lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    buf =
new char[offset + 128];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    room =
buf.length - offset - 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
System.arraycopy(lineBuffer, 0, buf, 0, offset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    lineBuffer
= buf;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
buf[offset++] = (char) c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((c == -1)
&amp;&amp; (offset == 0)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
String.copyValueOf(buf, 0, offset);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final String
readUTF() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
readUTF(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final static
String readUTF(DataInput in) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int utflen =
in.readUnsignedShort();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        byte[] bytearr =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        char[] chararr =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (in instanceof
DataInputStream) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            DataInputStream
dis = (DataInputStream)in;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(dis.bytearr.length &lt; utflen){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                dis.bytearr
= new byte[utflen*2];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                dis.chararr
= new char[utflen*2];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            chararr =
dis.chararr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            bytearr =
dis.bytearr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            bytearr = new
byte[utflen];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            chararr = new
char[utflen];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int c, char2, char3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int count = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int chararr_count=0;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
in.readFully(bytearr, 0, utflen);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (count &lt;
utflen) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            c = (int)
bytearr[count] &amp; 0xff;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (c &gt; 127)
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            count++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
chararr[chararr_count++]=(char)c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (count &lt;
utflen) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            c = (int)
bytearr[count] &amp; 0xff;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            switch (c
&gt;&gt; 4) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                case 0: case
1: case 2: case 3: case 4: case 5: case 6: case 7:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    /*
0xxxxxxx*/</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    count++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
chararr[chararr_count++]=(char)c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                case 12:
case 13:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    /* 110x
xxxx   10xx xxxx*/</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    count +=
2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(count &gt; utflen)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
throw new UTFDataFormatException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
&quot;malformed input: partial character at end&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    char2 =
(int) bytearr[count-1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((char2 &amp; 0xC0) != 0x80)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
throw new UTFDataFormatException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
&quot;malformed input around byte &quot; + count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
chararr[chararr_count++]=(char)(((c &amp; 0x1F) &lt;&lt; 6) |</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                        
           (char2 &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                case 14:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    /* 1110
xxxx  10xx xxxx  10xx xxxx */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    count +=
3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(count &gt; utflen)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
throw new UTFDataFormatException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
&quot;malformed input: partial character at end&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    char2 =
(int) bytearr[count-2];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    char3 =
(int) bytearr[count-1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(((char2 &amp; 0xC0) != 0x80) || ((char3 &amp; 0xC0) != 0x80))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
throw new UTFDataFormatException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
&quot;malformed input around byte &quot; + (count-1));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
chararr[chararr_count++]=(char)(((c     &amp; 0x0F) &lt;&lt; 12) |</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
                ((char2 &amp; 0x3F) &lt;&lt; 6)  |</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                                   
((char3 &amp; 0x3F) &lt;&lt; 0));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                default:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    /* 10xx
xxxx,  1111 xxxx */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new UTFDataFormatException(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
&quot;malformed input around byte &quot; + count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // The number of
chars produced may be less than utflen</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
String(chararr, 0, chararr_count);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347109"></a><a
name="_Toc128347371"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.8
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
SocketInputStream</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. SocketInputStream</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class SocketInputStream
extends FileInputStream</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        init();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private boolean eof;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
AbstractPlainSocketImpl impl = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private byte temp[];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private Socket socket =
null;    </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native int
socketRead0(FileDescriptor fd,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                  
byte b[], int off, int len,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                  
int timeout)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int
socketRead(FileDescriptor fd,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                          
byte b[], int off, int len,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                          
int timeout)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
socketRead0(fd, b, off, len, timeout);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[]) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return read(b, 0,
b.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int read(byte
b[], int off, int length) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return read(b, off,
length, impl.getTimeout());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int read(byte b[], int
off, int length, int timeout) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int n;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // EOF already
encountered</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (eof) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(impl.isConnectionReset()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Connection reset&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (length &lt;= 0
|| off &lt; 0 || length &gt; b.length - off) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (length == 0)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
ArrayIndexOutOfBoundsException(&quot;length == &quot; + length</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    + &quot;
off == &quot; + off + &quot; buffer length == &quot; + b.length);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean gotReset =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        FileDescriptor fd =
impl.acquireFD();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            n =
socketRead(fd, b, off, length, timeout);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (n &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(ConnectionResetException rstExc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            gotReset = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
impl.releaseFD();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347110"></a><a
name="_Toc128347372"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.9
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
ObjectOutputStream</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. ObjectOutputStream</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
ObjectOutputStream</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends OutputStream
implements ObjectOutput, ObjectStreamConstants</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static class
Caches {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** cache of
subclass security audit results */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final
ConcurrentMap&lt;WeakClassKey,Boolean&gt; subclassAudits =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            new
ConcurrentHashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** queue for
WeakReferences to audited subclasses */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final ReferenceQueue&lt;Class&lt;?&gt;&gt;
subclassAuditsQueue =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            new
ReferenceQueue&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** filter stream for
handling block data conversion */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
BlockDataOutputStream bout;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** obj -&gt; wire
handle map */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
HandleTable handles;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** obj -&gt;
replacement obj map */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ReplaceTable subs;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** stream protocol
version */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int protocol =
PROTOCOL_VERSION_2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** recursion depth */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int depth;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** buffer for writing
primitive field values */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private byte[] primVals;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** if true, invoke
writeObjectOverride() instead of writeObject() */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final boolean
enableOverride;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** if true, invoke
replaceObject() */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private boolean
enableReplace;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
SerialCallbackContext curContext;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /** current PutField
object */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private PutFieldImpl
curPut;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
DebugTraceInfoStack debugInfoStack;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
boolean extendedDebugInfo =</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
java.security.AccessController.doPrivileged(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            new
sun.security.action.GetBooleanAction(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
&quot;sun.io.serialization.extendedDebugInfo&quot;)).booleanValue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ObjectOutputStream(OutputStream out) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        verifySubclass();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        bout = new
BlockDataOutputStream(out);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        handles = new
HandleTable(10, (float) 3.00);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        subs = new
ReplaceTable(10, (float) 3.00);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        enableOverride =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        writeStreamHeader();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
bout.setBlockDataMode(true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (extendedDebugInfo)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            debugInfoStack =
new DebugTraceInfoStack();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            debugInfoStack =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347373"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>3.9.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.io.
ObjectOutputStream. BlockDataOutputStream</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. ObjectOutputStream. BlockDataOutputStream</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>   </span><span lang=EN-US style='color:black'>private static
class BlockDataOutputStream</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        extends OutputStream
implements DataOutput</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** maximum data
block length */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
int MAX_BLOCK_SIZE = 1024;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** maximum data
block header length */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
int MAX_HEADER_SIZE = 5;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** (tunable) length
of char buffer (for writing strings) */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
int CHAR_BUF_SIZE = 256;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** buffer for
writing general/block data */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final byte[]
buf = new byte[MAX_BLOCK_SIZE];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** buffer for
writing block data headers */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final byte[]
hbuf = new byte[MAX_HEADER_SIZE];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** char buffer for
fast string writes */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final char[]
cbuf = new char[CHAR_BUF_SIZE];</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** block data mode
*/</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private boolean
blkmode = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** current offset
into buf */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private int pos = 0;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** underlying
output stream */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final
OutputStream out;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /** loopback stream
(for data writes that span data blocks) */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final
DataOutputStream dout;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
BlockDataOutputStream(OutputStream out) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.out = out;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            dout = new
DataOutputStream(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean
setBlockDataMode(boolean mode) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (blkmode ==
mode) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
blkmode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            blkmode = mode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return !blkmode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean getBlockDataMode()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return blkmode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
write(int b) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos &gt;=
MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf[pos++] =
(byte) b;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void write(byte[]
b) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            write(b, 0,
b.length, false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
write(byte[] b, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            write(b, off,
len, false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void flush()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            out.flush();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void close()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            flush();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            out.close();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void write(byte[] b,
int off, int len, boolean copy)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throws IOException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!(copy ||
blkmode)) {           // write directly</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                out.write(b,
off, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (len &gt;
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&gt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (len
&gt;= MAX_BLOCK_SIZE &amp;&amp; !copy &amp;&amp; pos == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    // avoid
unnecessary copy</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
writeBlockHeader(MAX_BLOCK_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
out.write(b, off, MAX_BLOCK_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    off +=
MAX_BLOCK_SIZE;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    len -=
MAX_BLOCK_SIZE;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int wlen
= Math.min(len, MAX_BLOCK_SIZE - pos);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    System.arraycopy(b,
off, buf, pos, wlen);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pos +=
wlen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    off +=
wlen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    len -=
wlen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void drain() throws
IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (blkmode) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeBlockHeader(pos);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            out.write(buf,
0, pos);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            pos = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private void
writeBlockHeader(int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (len &lt;=
0xFF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                hbuf[0] =
TC_BLOCKDATA;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                hbuf[1] =
(byte) len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
out.write(hbuf, 0, 2);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                hbuf[0] =
TC_BLOCKDATALONG;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putInt(hbuf, 1, len);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
out.write(hbuf, 0, 5);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeBoolean(boolean v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos &gt;=
MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Bits.putBoolean(buf, pos++, v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeByte(int v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos &gt;=
MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf[pos++] =
(byte) v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeChar(int v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 2
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putChar(buf, pos, (char) v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeChar(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeShort(int v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 2
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putShort(buf, pos, (short) v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeShort(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeInt(int v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 4
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putInt(buf, pos, v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeInt(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeFloat(float v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 4
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putFloat(buf, pos, v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeFloat(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeLong(long v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 8
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putLong(buf, pos, v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 8;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeLong(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeDouble(double v) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pos + 8
&lt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Bits.putDouble(buf, pos, v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pos += 8;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
dout.writeDouble(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void writeBytes(String
s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff =
s.length();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int cpos = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int csize = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int off =
0; off &lt; endoff; ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (cpos
&gt;= csize) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    cpos =
0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    csize =
Math.min(endoff - off, CHAR_BUF_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
s.getChars(off, off + csize, cbuf, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&gt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int n =
Math.min(csize - cpos, MAX_BLOCK_SIZE - pos);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int stop =
pos + n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                while (pos
&lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
buf[pos++] = (byte) cbuf[cpos++];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                off += n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeChars(String s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff =
s.length();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int off =
0; off &lt; endoff; ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int csize =
Math.min(endoff - off, CHAR_BUF_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
s.getChars(off, off + csize, cbuf, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeChars(cbuf, 0, csize);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                off +=
csize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
writeUTF(String s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            writeUTF(s,
getUTFLength(s));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void writeBooleans(boolean[]
v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&gt;= MAX_BLOCK_SIZE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    drain();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int stop =
Math.min(endoff, off + (MAX_BLOCK_SIZE - pos));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                while (off
&lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
Bits.putBoolean(buf, pos++, v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeChars(char[] v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int stop
= Math.min(endoff, off + avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    while
(off &lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
Bits.putChar(buf, pos, v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        pos
+= 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    dout.writeChar(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeShorts(short[] v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int stop
= Math.min(endoff, off + avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    while
(off &lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
Bits.putShort(buf, pos, v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        pos
+= 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
dout.writeShort(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void writeInts(int[]
v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int stop
= Math.min(endoff, off + avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    while
(off &lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
Bits.putInt(buf, pos, v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        pos
+= 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
dout.writeInt(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeFloats(float[] v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
chunklen = Math.min(endoff - off, avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
floatsToBytes(v, off, buf, pos, chunklen);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    off +=
chunklen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pos +=
chunklen &lt;&lt; 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
dout.writeFloat(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeLongs(long[] v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 8;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int stop
= Math.min(endoff, off + avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    while
(off &lt; stop) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
Bits.putLong(buf, pos, v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        pos
+= 8;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
dout.writeLong(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeDoubles(double[] v, int off, int len) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 8;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int endoff = off
+ len;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (off &lt;
endoff) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int
chunklen = Math.min(endoff - off, avail);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
doublesToBytes(v, off, buf, pos, chunklen);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    off +=
chunklen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pos +=
chunklen &lt;&lt; 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
dout.writeDouble(v[off++]);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long
getUTFLength(String s) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int len =
s.length();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            long utflen = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int off =
0; off &lt; len; ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int csize =
Math.min(len - off, CHAR_BUF_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
s.getChars(off, off + csize, cbuf, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int
cpos = 0; cpos &lt; csize; cpos++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    char c =
cbuf[cpos];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (c
&gt;= 0x0001 &amp;&amp; c &lt;= 0x007F) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
utflen++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    } else
if (c &gt; 0x07FF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
utflen += 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
utflen += 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                off +=
csize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return utflen;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void writeUTF(String
s, long utflen) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (utflen &gt;
0xFFFFL) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
UTFDataFormatException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            writeShort((int)
utflen);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (utflen ==
(long) s.length()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeBytes(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeUTFBody(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeLongUTF(String s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            writeLongUTF(s,
getUTFLength(s));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Writes given
string in &quot;long&quot; UTF format, where the UTF encoding</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * length of the
string is already known.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        void
writeLongUTF(String s, long utflen) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
writeLong(utflen);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (utflen ==
(long) s.length()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeBytes(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
writeUTFBody(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private void
writeUTFBody(String s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int limit =
MAX_BLOCK_SIZE - 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int len =
s.length();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int off =
0; off &lt; len; ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int csize =
Math.min(len - off, CHAR_BUF_SIZE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                s.getChars(off,
off + csize, cbuf, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int
cpos = 0; cpos &lt; csize; cpos++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    char c =
cbuf[cpos];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (pos
&lt;= limit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(c &lt;= 0x007F &amp;&amp; c != 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            buf[pos++]
= (byte) c;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }
else if (c &gt; 0x07FF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
buf[pos + 2] = (byte) (0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
buf[pos + 1] = (byte) (0x80 | ((c &gt;&gt; 6) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            buf[pos
+ 0] = (byte) (0xE0 | ((c &gt;&gt; 12) &amp; 0x0F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
pos += 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }
else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
buf[pos + 1] = (byte) (0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
buf[pos + 0] = (byte) (0xC0 | ((c &gt;&gt; 6) &amp; 0x1F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
pos += 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    } else
{    // write one byte at a time to normalize block</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(c &lt;= 0x007F &amp;&amp; c != 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }
else if (c &gt; 0x07FF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(0xE0 | ((c &gt;&gt; 12) &amp; 0x0F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(0x80 | ((c &gt;&gt; 6) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }
else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(0xC0 | ((c &gt;&gt; 6) &amp; 0x1F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
write(0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                off +=
csize;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>    </span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347111"></a><a
name="_Toc128347374"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.10
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
File</span></a></h3>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io.File</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class File implements
Serializable, Comparable&lt;File&gt;{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
FileSystem fs = DefaultFileSystem.getFileSystem();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final String
path;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public File(String
pathname) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (pathname ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.path =
fs.normalize(pathname);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.prefixLength = fs.prefixLength(this.path);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347112"></a><a
name="_Toc128347375"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.11
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
FileDescriptor</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. FileDescriptor</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>‘</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final class
FileDescriptor {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int fd;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private long handle;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Closeable
parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private
List&lt;Closeable&gt; otherParents;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private boolean closed;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     * Constructs an
(invalid) FileDescriptor</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     * object.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public /**/
FileDescriptor() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        fd = -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        handle = -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        initIDs();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static native
void initIDs();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static native long
set(int d);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347113"></a><a
name="_Toc128347376"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.12
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.
FileSystem</span></a></h3>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. FileSystem</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>abstract class FileSystem {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract char
getSeparator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract char
getPathSeparator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
normalize(String path);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract int
prefixLength(String path);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
resolve(String parent, String child);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
getDefaultParent();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
fromURIPath(String path);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract boolean
isAbsolute(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
resolve(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String
canonicalize(String path) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int BA_EXISTS    = 0x01;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int BA_REGULAR   = 0x02;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int BA_DIRECTORY = 0x04;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int BA_HIDDEN    = 0x08;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract int
getBooleanAttributes(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int ACCESS_READ    = 0x04;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int ACCESS_WRITE   = 0x02;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public static
final int ACCESS_EXECUTE = 0x01;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract boolean
checkAccess(File f, int access);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract boolean
setPermission(File f, int access, boolean enable, boolean owneronly);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract long
getLastModifiedTime(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract long
getLength(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract boolean
createFileExclusively(String pathname)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract boolean
delete(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract String[]
list(File f);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347114"></a><a
name="_Toc128347377"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>3.13
</span><span lang=EN-US style='color:black;background:white'>java.io.</span></a><span
lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif;color:black;
background:white'> DefaultFileSystem</span></h3>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. DefaultFileSystem</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class DefaultFileSystem {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static FileSystem
getFileSystem() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
WinNTFileSystem();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347115"></a><a
name="_Toc128347378"><span lang=EN-US style='color:black'>3.14 </span><span
lang=EN-US style='color:black;background:white'>java.io.WinNTFileSystem</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. WinNTFileSystem</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class WinNTFileSystem
extends FileSystem {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private final char slash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final char
altSlash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final char
semicolon;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public WinNTFileSystem()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        slash =
AccessController.doPrivileged(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            new
GetPropertyAction(&quot;file.separator&quot;)).charAt(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        semicolon =
AccessController.doPrivileged(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            new
GetPropertyAction(&quot;path.separator&quot;)).charAt(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        altSlash =
(this.slash == '\\') ? '/' : '\\';</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native boolean
setPermission(File f, int access, boolean enable,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean
owneronly);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native boolean
createFileExclusively(String path)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throws
IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native String[]
list(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native boolean
createDirectory(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native boolean
setLastModifiedTime(File f, long time);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public native boolean
setReadOnly(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
delete(File f) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        cache.clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        prefixCache.clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return delete0(f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native boolean
delete0(File f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
rename(File f1, File f2) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        cache.clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        prefixCache.clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return rename0(f1,
f2);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native boolean
rename0(File f1, File f2);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347116"></a><a
name="_Toc128347379"><span lang=EN-US style='color:black'>3.15 </span><span
lang=EN-US style='color:black;background:white'>java.io. FileOutputStream</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io. FileOutputStream</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class FileOutputStream
extends OutputStream</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
FileDescriptor fd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final boolean
append;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private FileChannel
channel;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final String
path;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final Object
closeLock = new Object();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile boolean
closed = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
FileOutputStream(String name) throws FileNotFoundException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(name != null ?
new File(name) : null, false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public FileOutputStream(String
name, boolean append)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
FileNotFoundException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(name != null ?
new File(name) : null, append);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
FileOutputStream(File file) throws FileNotFoundException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(file, false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public FileOutputStream(File
file, boolean append)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
FileNotFoundException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        String name = (file
!= null ? file.getPath() : null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager
security = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            security.checkWrite(name);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (name == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(file.isInvalid()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
FileNotFoundException(&quot;Invalid file path&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.fd = new
FileDescriptor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        fd.attach(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.append =
append;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.path = name;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        open(name, append);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   private void open(String
name, boolean append)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
FileNotFoundException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        open0(name, append);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private native void
open0(String name, boolean append)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
FileNotFoundException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347117"></a><a
name="_Toc128347380"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>java.net</span></a></h2>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347118"></a><a
name="_Toc128347381"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.1
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.io.Closeable</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.io.Closeable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Closeable
extends AutoCloseable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void close()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347119"></a><a
name="_Toc128347382"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.2
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
SocketOptions</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. SocketOptions</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
SocketOptions {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void  
setOption(int optID, Object value) throws SocketException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Object
getOption(int optID) throws SocketException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int TCP_NODELAY = 0x0001;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_BINDADDR = 0x000F;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_REUSEADDR = 0x04;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_BROADCAST = 0x0020;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int IP_MULTICAST_IF = 0x10;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int IP_MULTICAST_IF2 = 0x1f;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int IP_MULTICAST_LOOP = 0x12;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int IP_TOS = 0x3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_LINGER = 0x0080;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_TIMEOUT = 0x1006;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_SNDBUF = 0x1001;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_RCVBUF = 0x1002;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_KEEPALIVE = 0x0008;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Native public final
static int SO_OOBINLINE = 0x1003;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347120"></a><a
name="_Toc128347383"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.3
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
SocketImpl</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. SocketImpl</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
SocketImpl implements SocketOptions {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Socket socket = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ServerSocket
serverSocket = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected FileDescriptor
fd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected InetAddress
address;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int port;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int localport;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
create(boolean stream) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
connect(String host, int port) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
connect(InetAddress address, int port) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
connect(SocketAddress address, int timeout) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
bind(InetAddress host, int port) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
listen(int backlog) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
accept(SocketImpl s) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract
InputStream getInputStream() throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract OutputStream
getOutputStream() throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract int
available() throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
close() throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected void
shutdownInput() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      throw new
IOException(&quot;Method not implemented!&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected void
shutdownOutput() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>      throw new
IOException(&quot;Method not implemented!&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected FileDescriptor
getFileDescriptor() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return fd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected InetAddress getInetAddress()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return address;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int getPort()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return port;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected boolean
supportsUrgentData () {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false; //
must be overridden in sub-class</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected abstract void
sendUrgentData (int data) throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected int
getLocalPort() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return localport;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void setSocket(Socket
soc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.socket = soc;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Socket getSocket() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return socket;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
setServerSocket(ServerSocket soc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.serverSocket =
soc;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ServerSocket
getServerSocket() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return serverSocket;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public String toString()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
&quot;Socket[addr=&quot; + getInetAddress() +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
&quot;,port=&quot; + getPort() + &quot;,localport=&quot; + getLocalPort()  +
&quot;]&quot;;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void reset() throws
IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        address = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        port = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        localport = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected void
setPerformancePreferences(int connectionTime,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                     
    int latency,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                         
int bandwidth)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /* Not implemented
yet */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; void
setOption(SocketOption&lt;T&gt; name, T value) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (name ==
StandardSocketOptions.SO_KEEPALIVE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            setOption(SocketOptions.SO_KEEPALIVE,
value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_SNDBUF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setOption(SocketOptions.SO_SNDBUF, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_RCVBUF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            setOption(SocketOptions.SO_RCVBUF,
value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_REUSEADDR) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setOption(SocketOptions.SO_REUSEADDR, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_LINGER) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            setOption(SocketOptions.SO_LINGER,
value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.IP_TOS) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setOption(SocketOptions.IP_TOS, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.TCP_NODELAY) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setOption(SocketOptions.TCP_NODELAY, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
UnsupportedOperationException(&quot;unsupported option&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; T
getOption(SocketOption&lt;T&gt; name) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (name ==
StandardSocketOptions.SO_KEEPALIVE) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.SO_KEEPALIVE);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_SNDBUF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.SO_SNDBUF);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_RCVBUF) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.SO_RCVBUF);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_REUSEADDR) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.SO_REUSEADDR);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.SO_LINGER) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.SO_LINGER);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.IP_TOS) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.IP_TOS);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if (name ==
StandardSocketOptions.TCP_NODELAY) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(T)getOption(SocketOptions.TCP_NODELAY);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
UnsupportedOperationException(&quot;unsupported option&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347121"></a><a
name="_Toc128347384"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.4
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
AbstractPlainSocketImpl</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. AbstractPlainSocketImpl</span></p>

<p class=COR-><span lang=EN-US style='color:black'>abstract class
AbstractPlainSocketImpl extends SocketImpl{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected void
accept(SocketImpl s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        acquireFD();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            socketAccept(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            releaseFD();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected synchronized
InputStream getInputStream() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(fdLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(isClosedOrPending())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IOException(&quot;Socket Closed&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (shut_rd)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IOException(&quot;Socket input is shutdown&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(socketInputStream == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
socketInputStream = new SocketInputStream(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
socketInputStream;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
setInputStream(SocketInputStream in) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        socketInputStream =
in;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected synchronized
OutputStream getOutputStream() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(fdLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(isClosedOrPending())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IOException(&quot;Socket Closed&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (shut_wr)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new IOException(&quot;Socket
output is shutdown&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(socketOutputStream == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
socketOutputStream = new SocketOutputStream(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
socketOutputStream;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347122"></a><a
name="_Toc128347385"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.5
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
Socket</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. Socket</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Socket
implements java.io.Closeable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public Socket() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        setImpl();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>void setImpl() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (factory != null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            impl =
factory.createSocketImpl();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            checkOldImpl();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            impl = new SocksSocketImpl();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (impl != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
impl.setSocket(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void
connect(SocketAddress endpoint, int timeout) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (endpoint ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(&quot;connect: The address can't be null&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (timeout &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          throw new
IllegalArgumentException(&quot;connect: timeout can't be negative&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (isClosed())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is closed&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!oldImpl
&amp;&amp; isConnected())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;already connected&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!(endpoint
instanceof InetSocketAddress))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(&quot;Unsupported address type&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        InetSocketAddress
epoint = (InetSocketAddress) endpoint;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        InetAddress addr =
epoint.getAddress ();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int port =
epoint.getPort();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        checkAddress(addr,
&quot;connect&quot;);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SecurityManager
security = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(epoint.isUnresolved())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
security.checkConnect(epoint.getHostName(), port);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
security.checkConnect(addr.getHostAddress(), port);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!created)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
createImpl(true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!oldImpl)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
impl.connect(epoint, timeout);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else if (timeout ==
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(epoint.isUnresolved())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
impl.connect(addr.getHostName(), port);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
impl.connect(addr, port);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
UnsupportedOperationException(&quot;SocketImpl.connect(addr, timeout)&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        connected = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        bound = true;</span></p>

<p class=COR- style='text-indent:21.6pt'><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'> public InputStream
getInputStream() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (isClosed())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is closed&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!isConnected())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is not connected&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(isInputShutdown())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket input is shutdown&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Socket s =
this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        InputStream is =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            is =
AccessController.doPrivileged(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                new
PrivilegedExceptionAction&lt;InputStream&gt;() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    public
InputStream run() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        return
impl.getInputStream();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(java.security.PrivilegedActionException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw
(IOException) e.getException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return is;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public OutputStream getOutputStream()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (isClosed())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is closed&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!isConnected())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is not connected&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (isOutputShutdown())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket output is shutdown&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Socket s =
this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        OutputStream os =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            os =
AccessController.doPrivileged(</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                new
PrivilegedExceptionAction&lt;OutputStream&gt;() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    public
OutputStream run() throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
return impl.getOutputStream();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                });</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(java.security.PrivilegedActionException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw
(IOException) e.getException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return os;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:21.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347123"></a><a
name="_Toc128347386"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.6
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
ServerSocket</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. ServerSocket</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class ServerSocket
implements java.io.Closeable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public Socket accept()
throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (isClosed())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is closed&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!isBound())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
SocketException(&quot;Socket is not bound yet&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Socket s = new
Socket((SocketImpl) null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        implAccept(s);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  protected final void
implAccept(Socket s) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SocketImpl si =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (s.impl ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              s.setImpl();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
s.impl.reset();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            si = s.impl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            s.impl = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            si.address = new
InetAddress();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            si.fd = new
FileDescriptor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
getImpl().accept(si);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            SecurityManager
security = System.getSecurityManager();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (security !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                security.checkAccept(si.getInetAddress().getHostAddress(),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                    
si.getPort());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch (IOException
e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (si != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                si.reset();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            s.impl = si;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(SecurityException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (si != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                si.reset();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            s.impl = si;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        s.impl = si;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        s.postAccept();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347124"></a><a
name="_Toc128347387"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>4.7
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.net.
proxy</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.net. proxy</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Proxy {</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     * Represents the proxy
type.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     *</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     * @since 1.5</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public enum Type {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Represents a
direct connection, or the absence of a proxy.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        DIRECT,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Represents proxy
for high level protocols such as HTTP or FTP.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        HTTP,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Represents a
SOCKS (V4 or V5) proxy.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SOCKS</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    };</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Type type;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private SocketAddress
sa;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final static
Proxy NO_PROXY = new Proxy();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Creates the proxy
that represents a {@code DIRECT} connection.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private Proxy() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        type = Type.DIRECT;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        sa = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Proxy(Type type,
SocketAddress sa) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((type ==
Type.DIRECT) || !(sa instanceof InetSocketAddress))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(&quot;type &quot; + type + &quot; is not compatible
with address &quot; + sa);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.type = type;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.sa = sa;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347125"></a><a
name="_Toc128347388"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>java.nio</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=586 height=535 id="图片 2"
src="java.files/image001.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>nio demo</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class ServerConnect</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
main(String[] args)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        selector();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
handleAccept(SelectionKey key) throws IOException{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ServerSocketChannel
ssChannel = (ServerSocketChannel)key.channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SocketChannel sc =
ssChannel.accept();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
sc.configureBlocking(false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
sc.register(key.selector(), SelectionKey.OP_READ,ByteBuffer.allocateDirect(1024));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
handleRead(SelectionKey key) throws IOException{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SocketChannel sc =
(SocketChannel)key.channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ByteBuffer buf =
(ByteBuffer)key.attachment();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        long bytesRead =
sc.read(buf);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
while(bytesRead&gt;0){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf.flip();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
while(buf.hasRemaining()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
System.out.print((char)buf.get());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            buf.clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            bytesRead =
sc.read(buf);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if(bytesRead == -1){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            sc.close();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
handleWrite(SelectionKey key) throws IOException{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ByteBuffer buf =
(ByteBuffer)key.attachment();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        buf.flip();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        SocketChannel sc =
(SocketChannel) key.channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
while(buf.hasRemaining()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            sc.write(buf);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        buf.compact();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
selector() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Selector selector =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ServerSocketChannel
ssc = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            selector = Selector.open();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ssc=
ServerSocketChannel.open();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ssc.socket().bind(new InetSocketAddress(8080));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ssc.configureBlocking(false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ssc.register(selector, SelectionKey.OP_ACCEPT);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while(true){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
if(selector.select(3000) == 0){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
while(iter.hasNext()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    SelectionKey
key = iter.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
if(key.isAcceptable()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
handleAccept(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
if(key.isReadable()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
handleRead(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if(key.isWritable()
&amp;&amp; key.isValid()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
handleWrite(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
if(key.isConnectable()){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
System.out.println(&quot;isConnectable = true&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    iter.remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }catch(IOException
e){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
e.printStackTrace();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }finally{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
if(selector!=null){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
selector.close();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
if(ssc!=null){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
ssc.close();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
}catch(IOException e){</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
e.printStackTrace();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347126"></a><a
name="_Toc128347389"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.1
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.nio.channels.Channel</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.nio.channels.Channel</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Channel
extends Closeable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean isOpen();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void close()
throws IOException;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347127"></a><a
name="_Toc128347390"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.2
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.nio.channels.
SelectableChannel</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.nio.channels.
SelectableChannel</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
SelectableChannel extends AbstractInterruptibleChannel implements Channel{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
SelectableChannel() { }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract
SelectorProvider provider();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract
SelectionKey register(Selector sel, int ops, Object att)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
ClosedChannelException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347128"></a><a
name="_Toc128347391"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.3
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.nio.channels.
AbstractSelectableChannel</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.nio.channels. AbstractSelectableChannel</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractSelectableChannel</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
SelectableChannel</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
SelectorProvider provider;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private SelectionKey[] keys
= null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public final SelectionKey
register(Selector sel, int ops,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                      
Object att)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws
ClosedChannelException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        synchronized
(regLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!isOpen())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ClosedChannelException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((ops &amp;
~validOps()) != 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IllegalArgumentException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (blocking)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IllegalBlockingModeException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            SelectionKey k =
findKey(sel);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (k != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
k.interestOps(ops);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
k.attach(att);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (k == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // New
registration</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                synchronized
(keyLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(!isOpen())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        throw
new ClosedChannelException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    k =
((AbstractSelector)sel).register(this, ops, att);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
addKey(k);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return k;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347129"></a><a
name="_Toc128347392"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.4
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.nio.channels.
ServerSocketChannel</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.nio.channels. ServerSocketChannel</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
ServerSocketChannel</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractSelectableChannel</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
NetworkChannel{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract
SocketChannel accept() throws IOException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347130"></a><a
name="_Toc128347393"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.5
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.nio.channels.SelectionKey</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.nio.channels.SelectionKey</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
SelectionKey {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected SelectionKey()
{ }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract
SelectableChannel channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract Selector
selector();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public static final int OP_READ
= 1 &lt;&lt; 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static final int
OP_WRITE = 1 &lt;&lt; 2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static final int
OP_CONNECT = 1 &lt;&lt; 3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public static final int
OP_ACCEPT = 1 &lt;&lt; 4;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile Object
attachment = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347131"></a><a
name="_Toc128347394"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.6
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>sun.nio.ch.WindowsSelectorImpl</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>sun.nio.ch.WindowsSelectorImpl</span><span
style='font-family:宋体;color:black;background:white'>的</span><span lang=EN-US
style='color:black;background:white'>doselect</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>class WindowsSelectorImpl
extends SelectorImpl {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private final SubSelector
subSelector = new SubSelector();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  protected int
doSelect(Consumer&lt;SelectionKey&gt; action, long timeout)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        throws IOException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        assert
Thread.holdsLock(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.timeout =
timeout; // set selector timeout</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
processUpdateQueue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
processDeregisterQueue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(interruptTriggered) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
resetWakeupSocket();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Calculate number
of helper threads needed for poll. If necessary</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // threads are
created here and start waiting on startLock</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
adjustThreadsCount();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        finishLock.reset();
// reset finishLock</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Wakeup helper
threads, waiting on startLock, so they start polling.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Redundant threads
will exit here after wakeup.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
startLock.startThreads();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // do polling in the
main thread. Main thread is responsible for</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // first
MAX_SELECTABLE_FDS entries in pollArray.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            begin();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
subSelector.poll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IOException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
finishLock.setException(e); // Save this exception</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Main thread
is out of poll(). Wakeup others and wait for them</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(threads.size() &gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
finishLock.waitForHelperThreads();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>              end();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>          }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Done with poll().
Set wakeupSocket to nonsignaled  for the next run.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
finishLock.checkForException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
processDeregisterQueue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int updated =
updateSelectedKeys(action);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Done with poll().
Set wakeupSocket to nonsignaled  for the next run.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        resetWakeupSocket();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return updated;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347132"></a><a
name="_Toc128347395"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>5.7
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>sun.nio.ch.WindowsSelectorImpl.
SubSelector</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>sun.nio.ch.WindowsSelectorImpl.
SubSelector</span><span style='font-family:宋体;color:black;background:white'>的</span><span
lang=EN-US style='color:black;background:white'>subSelector.poll();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private final class
SubSelector {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int
pollArrayIndex; // starting index in pollArray to poll</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // These arrays will
hold result of native select().</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // The first element
of each array is the number of selected sockets.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Other elements
are file descriptors of selected sockets.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int[]
readFds = new int [MAX_SELECTABLE_FDS + 1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int[]
writeFds = new int [MAX_SELECTABLE_FDS + 1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final int[]
exceptFds = new int [MAX_SELECTABLE_FDS + 1];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Buffer for
readfds, writefds and exceptfds structs that are passed</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // to native
select().</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final long
fdsBuffer = unsafe.allocateMemory(SIZEOF_FD_SET * 3);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private
SubSelector() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.pollArrayIndex = 0; // main thread</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private
SubSelector(int threadIndex) { // helper threads</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.pollArrayIndex = (threadIndex + 1) * MAX_SELECTABLE_FDS;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       private int poll()
throws IOException{ // poll for the main thread</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
poll0(pollWrapper.pollArrayAddress,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
Math.min(totalChannels, MAX_SELECTABLE_FDS),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
readFds, writeFds, exceptFds, timeout, fdsBuffer);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private int poll(int
index) throws IOException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // poll for
helper threads</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return 
poll0(pollWrapper.pollArrayAddress +</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    
(pollArrayIndex * PollArrayWrapper.SIZE_POLLFD),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    
Math.min(MAX_SELECTABLE_FDS,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                             totalChannels
- (index + 1) * MAX_SELECTABLE_FDS),</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    
readFds, writeFds, exceptFds, timeout, fdsBuffer);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private native int
poll0(long pollAddress, int numfds,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>             int[] readFds,
int[] writeFds, int[] exceptFds, long timeout, long fdsBuffer);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private int
processSelectedKeys(long updateCount, Consumer&lt;SelectionKey&gt; action)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throws
IOException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int
numKeysUpdated = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            numKeysUpdated
+= processFDSet(updateCount, action, readFds,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
Net.POLLIN,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            numKeysUpdated
+= processFDSet(updateCount, action, writeFds,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
Net.POLLCONN |</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
Net.POLLOUT,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            numKeysUpdated
+= processFDSet(updateCount, action, exceptFds,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                           Net.POLLIN
|</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
Net.POLLCONN |</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
Net.POLLOUT,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                          
true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
numKeysUpdated;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  private int
processFDSet(long updateCount,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                
Consumer&lt;SelectionKey&gt; action,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                
int[] fds, int rOps,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                
boolean isExceptFds)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throws
IOException</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int
numKeysUpdated = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (int i = 1;
i &lt;= fds[0]; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int desc =
fds[i];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (desc ==
wakeupSourceFd) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
synchronized (interruptLock) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
interruptTriggered = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                MapEntry me
= fdMap.get(desc);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // If me is
null, the key was deregistered in the previous</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // processDeregisterQueue.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (me ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
SelectionKeyImpl ski = me.ski;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // The
descriptor may be in the exceptfds set because there is</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // OOB data
queued to the socket. If there is OOB data then it</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // is
discarded and the key is not added to the selected set.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
SelectableChannel sc = ski.channel();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(isExceptFds &amp;&amp; (sc instanceof SocketChannelImpl)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        &amp;&amp;
((SocketChannelImpl) sc).isNetSocket()</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
&amp;&amp; Net.discardOOB(ski.getFD())) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
continue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int updated
= processReadyEvents(rOps, ski, action);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (updated
&gt; 0 &amp;&amp; me.updateCount != updateCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
me.updateCount = updateCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
numKeysUpdated++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
numKeysUpdated;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347133"></a><a
name="_Toc128347396"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>java.util</span></a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347134"></a><a
name="_Toc128347397"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.1
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.Iterable</span></a></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Iterable</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Iterable&lt;T&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;T&gt;
iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default void
forEach(Consumer&lt;? super T&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(action);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (T t : this) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
action.accept(t);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default Spliterator&lt;T&gt;
spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Spliterators.spliteratorUnknownSize(iterator(), 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347135"></a><a
name="_Toc128347398"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.2
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.Collection</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. Collection</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Collection&lt;E&gt; extends Iterable&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean isEmpty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean contains(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;E&gt;
iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Object[] toArray();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; T[]
toArray(T[] a);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean add(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean remove(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
containsAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
addAll(Collection&lt;? extends E&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean removeAll(Collection&lt;?&gt;
c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default boolean
removeIf(Predicate&lt;? super E&gt; filter) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(filter);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean removed =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Iterator&lt;E&gt; each = iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while
(each.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (filter.test(each.next()))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
each.remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                removed =
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return removed;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
retainAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean equals(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default
Spliterator&lt;E&gt; spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Spliterators.spliterator(this, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default Stream&lt;E&gt;
stream() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
StreamSupport.stream(spliterator(), false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default Stream&lt;E&gt;
parallelStream() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
StreamSupport.stream(spliterator(), true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347136"></a><a
name="_Toc128347399"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.3
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.List</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. List</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
List&lt;E&gt; extends Collection&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean isEmpty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean contains(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;E&gt;
iterator(); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Object[] toArray(); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; T[]
toArray(T[] a); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean add(E e); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean remove(Object
o); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
containsAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
addAll(Collection&lt;? extends E&gt; c); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean addAll(int
index, Collection&lt;? extends E&gt; c); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
removeAll(Collection&lt;?&gt; c); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
retainAll(Collection&lt;?&gt; c); </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default void
replaceAll(UnaryOperator&lt;E&gt; operator) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(operator);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
ListIterator&lt;E&gt; li = this.listIterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (li.hasNext())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
li.set(operator.apply(li.next()));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default void
sort(Comparator&lt;? super E&gt; c) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object[] a =
this.toArray();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Arrays.sort(a,
(Comparator) c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ListIterator&lt;E&gt; i = this.listIterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (Object e : a) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            i.set((E) e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean equals(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E get(int index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E set(int index, E
element);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void add(int index, E
element);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E remove(int index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int indexOf(Object o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int lastIndexOf(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ListIterator&lt;E&gt;
listIterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    ListIterator&lt;E&gt;
listIterator(int index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    List&lt;E&gt;
subList(int fromIndex, int toIndex);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default
Spliterator&lt;E&gt; spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Spliterators.spliterator(this, Spliterator.ORDERED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347137"></a><a
name="_Toc128347400"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.4
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
Queue</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. Queue</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Queue&lt;E&gt; extends Collection&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean add(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean offer(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E poll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E element();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E peek();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347138"></a><a
name="_Toc128347401"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.5
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
Deque</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.lang. </span><span
lang=EN-US>Deque</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Deque&lt;E&gt; extends Queue&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void addFirst(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void addLast(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean offerFirst(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean offerLast(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E removeFirst();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E removeLast();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E pollFirst();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E pollLast();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E getFirst();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E getLast();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E peekFirst();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E peekLast();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean removeFirstOccurrence(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
removeLastOccurrence(Object o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean add(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean offer(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E poll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E element();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E peek();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void push(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    E pop();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean remove(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean contains(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public int size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;E&gt;
iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;E&gt;
descendingIterator();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347139"></a><a
name="_Toc128347402"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.6
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif;
color:black;background:white'>java.util. AbstractCollection</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. AbstractCollection</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractCollection&lt;E&gt; implements Collection&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
AbstractCollection() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract
Iterator&lt;E&gt; iterator();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract int
size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean isEmpty()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return size() == 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
contains(Object o) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Iterator&lt;E&gt; it
= iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (o==null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(it.hasNext())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(it.next()==null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(it.hasNext())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(o.equals(it.next()))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Object[]
toArray() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Estimate size of
array; be prepared to see more or fewer elements</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object[] r = new
Object[size()];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Iterator&lt;E&gt; it
= iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; r.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!
it.hasNext()) // fewer elements than expected</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
Arrays.copyOf(r, i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            r[i] =
it.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return it.hasNext()
? finishToArray(r, it) : r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public &lt;T&gt; T[]
toArray(T[] a) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Estimate size of
array; be prepared to see more or fewer elements</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int size = size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        T[] r = a.length
&gt;= size ? a :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                 
(T[])java.lang.reflect.Array</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                 
.newInstance(a.getClass().getComponentType(), size);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Iterator&lt;E&gt; it
= iterator();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (int i = 0; i
&lt; r.length; i++) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!
it.hasNext()) { // fewer elements than expected</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (a == r)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    r[i] =
null; // null-terminate</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else if
(a.length &lt; i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
Arrays.copyOf(r, i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
System.arraycopy(r, 0, a, 0, i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(a.length &gt; i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        a[i]
= null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return a;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            r[i] =
(T)it.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // more elements
than expected</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return it.hasNext()
? finishToArray(r, it) : r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347140"></a><a
name="_Toc128347403"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.7
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif;
color:black;background:white'>java.util. AbstractList</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. AbstractList</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements
List&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected AbstractList()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public Iterator&lt;E&gt;
iterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new Itr();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ListIterator&lt;E&gt; listIterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
listIterator(0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ListIterator&lt;E&gt; listIterator(final int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
rangeCheckForAdd(index);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return new
ListItr(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private class Itr
implements Iterator&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int cursor = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int lastRet = -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int expectedModCount
= modCount;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
hasNext() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return cursor !=
size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public E next() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            checkForComodification();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int i =
cursor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                E next =
get(i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                lastRet = i;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                cursor = i +
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IndexOutOfBoundsException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
checkForComodification();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NoSuchElementException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void remove()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (lastRet &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IllegalStateException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            checkForComodification();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
AbstractList.this.remove(lastRet);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (lastRet
&lt; cursor)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
cursor--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                lastRet =
-1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
expectedModCount = modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IndexOutOfBoundsException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final void
checkForComodification() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (modCount !=
expectedModCount)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private class ListItr
extends Itr implements ListIterator&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ListItr(int index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            cursor = index;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
hasPrevious() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return cursor !=
0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public E previous()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
checkForComodification();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int i =
cursor - 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                E previous =
get(i);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                lastRet =
cursor = i;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
previous;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IndexOutOfBoundsException e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
checkForComodification();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NoSuchElementException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
nextIndex() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return cursor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
previousIndex() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return cursor-1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void set(E e)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (lastRet &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IllegalStateException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
checkForComodification();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
AbstractList.this.set(lastRet, e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
expectedModCount = modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IndexOutOfBoundsException ex) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void add(E e)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
checkForComodification();</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int i =
cursor;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
AbstractList.this.add(i, e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                lastRet =
-1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                cursor = i +
1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
expectedModCount = modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } catch
(IndexOutOfBoundsException ex) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347141"></a><a
name="_Toc128347404"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif;
color:black'>6.8 </span><span lang=EN-US style='font-size:12.0pt;font-family:
"Calibri",sans-serif;color:black;background:white'>java.util. AbstractSequentialList</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. AbstractSequentialList</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
lang=EN-US style='font-size:14.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractSequentialList&lt;E&gt; extends AbstractList&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
AbstractSequentialList() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public E get(int index)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
listIterator(index).next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchElementException exc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public E set(int index,
E element) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ListIterator&lt;E&gt; e = listIterator(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            E oldVal =
e.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            e.set(element);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return oldVal;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchElementException exc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void add(int
index, E element) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
listIterator(index).add(element);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchElementException exc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public E remove(int
index) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ListIterator&lt;E&gt; e = listIterator(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            E outCast =
e.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            e.remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return outCast;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchElementException exc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
addAll(int index, Collection&lt;? extends E&gt; c) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean modified
= false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
ListIterator&lt;E&gt; e1 = listIterator(index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Iterator&lt;?
extends E&gt; e2 = c.iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(e2.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
e1.add(e2.next());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                modified =
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return modified;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NoSuchElementException exc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public Iterator&lt;E&gt;
iterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return listIterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public abstract
ListIterator&lt;E&gt; listIterator(int index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347142"></a><a
name="_Toc128347405"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.9
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Java.util.LinkedList</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.LinkedList</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
LinkedList&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractSequentialList&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    transient int size = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    transient Node&lt;E&gt;
first;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    transient Node&lt;E&gt;
last;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public LinkedList() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void linkFirst(E e)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
f = first;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
newNode = new Node&lt;&gt;(null, e, f);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        first = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (f == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            last = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            f.prev =
newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void linkLast(E e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
l = last;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
newNode = new Node&lt;&gt;(l, e, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        last = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (l == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            first = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            l.next =
newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void linkBefore(E e,
Node&lt;E&gt; succ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // assert succ !=
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
pred = succ.prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
newNode = new Node&lt;&gt;(pred, e, succ);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        succ.prev = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (pred == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            first = newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            pred.next =
newNode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private E
unlinkFirst(Node&lt;E&gt; f) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // assert f == first
&amp;&amp; f != null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final E element =
f.item;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
next = f.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        f.item = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        f.next = null; //
help GC</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        first = next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (next == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            last = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            next.prev =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return element;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private E
unlinkLast(Node&lt;E&gt; l) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // assert l == last
&amp;&amp; l != null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final E element =
l.item;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node&lt;E&gt;
prev = l.prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        l.item = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        l.prev = null; //
help GC</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        last = prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (prev == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            first = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            prev.next =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size--;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return element;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean add(E e)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        linkLast(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347406"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.9.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>Node</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.LinkedList.Node</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static class
Node&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        E item;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;E&gt; next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;E&gt; prev;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node(Node&lt;E&gt;
prev, E element, Node&lt;E&gt; next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.item =
element;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.next =
next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.prev =
prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347407"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.9.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>DescendingIterator</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.LinkedList.DescendingIterator</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'> </span><span lang=EN-US style='color:black'> private class
DescendingIterator implements Iterator&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private final
ListItr itr = new ListItr(size());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
hasNext() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return itr.hasPrevious();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public E next() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
itr.previous();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void remove()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            itr.remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347408"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.9.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>LLSpliterator</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.LinkedList.LLSpliterator</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>   </span><span lang=EN-US style='color:black'> static final class
LLSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
BATCH_UNIT = 1 &lt;&lt; 10;  // batch array size increment</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
MAX_BATCH = 1 &lt;&lt; 25;  // max batch array size;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
LinkedList&lt;E&gt; list; // null OK unless traversed</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;E&gt;
current;      // current node; null until initialized</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int
est;              // size estimate; -1 until first needed</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int
expectedModCount; // initialized when est set</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int
batch;            // batch size for splits</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
LLSpliterator(LinkedList&lt;E&gt; list, int est, int expectedModCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.list =
list;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.est = est;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
this.expectedModCount = expectedModCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int getEst() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int s; // force
initialization</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final
LinkedList&lt;E&gt; lst;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((s = est)
&lt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((lst =
list) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s = est
= 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
expectedModCount = lst.modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    current
= lst.first;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s = est
= lst.size;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public long
estimateSize() { return (long) getEst(); }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public
Spliterator&lt;E&gt; trySplit() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;E&gt; p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int s =
getEst();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (s &gt; 1
&amp;&amp; (p = current) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int n =
batch + BATCH_UNIT;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (n &gt;
s)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    n = s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (n &gt;
MAX_BATCH)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    n =
MAX_BATCH;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                Object[] a =
new Object[n];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int j = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                do { a[j++]
= p.item; } while ((p = p.next) != null &amp;&amp; j &lt; n);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                current = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                batch = j;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                est = s - j;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
Spliterators.spliterator(a, 0, j, Spliterator.ORDERED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public void
forEachRemaining(Consumer&lt;? super E&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;E&gt; p;
int n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (action ==
null) throw new NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((n =
getEst()) &gt; 0 &amp;&amp; (p = current) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                current =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                est = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    E e =
p.item;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p =
p.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
action.accept(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } while (p
!= null &amp;&amp; --n &gt; 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(list.modCount != expectedModCount)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public boolean
tryAdvance(Consumer&lt;? super E&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;E&gt; p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (action ==
null) throw new NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (getEst()
&gt; 0 &amp;&amp; (p = current) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                --est;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                E e =
p.item;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                current = p.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
action.accept(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(list.modCount != expectedModCount)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public int
characteristics() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347143"></a><a
name="_Toc128347409"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.10
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.ArrayList</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.ArrayList</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        implements
List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = 8683452581122892189L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final int
DEFAULT_CAPACITY = 10;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Object[] EMPTY_ELEMENTDATA = {};</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    transient Object[]
elementData; // non-private to simplify nested class access</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private int size;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public ArrayList(int
initialCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (initialCapacity
&gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.elementData
= new Object[initialCapacity];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else if
(initialCapacity == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.elementData
= EMPTY_ELEMENTDATA;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                              
initialCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean add(E e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ensureCapacityInternal(size + 1);  // Increments modCount!!</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        elementData[size++]
= e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public void add(int
index, E element) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
rangeCheckForAdd(index);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ensureCapacityInternal(size + 1);  // Increments modCount!!</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
System.arraycopy(elementData, index, elementData, index + 1,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
size - index);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        elementData[index] =
element;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private static int
calculateCapacity(Object[] elementData, int minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (elementData ==
DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
Math.max(DEFAULT_CAPACITY, minCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return minCapacity;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void
ensureCapacityInternal(int minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void
ensureExplicitCapacity(int minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        //
overflow-conscious code</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (minCapacity -
elementData.length &gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
grow(minCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private void grow(int
minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        //
overflow-conscious code</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int oldCapacity =
elementData.length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int newCapacity =
oldCapacity + (oldCapacity &gt;&gt; 1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (newCapacity -
minCapacity &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            newCapacity =
minCapacity;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (newCapacity -
MAX_ARRAY_SIZE &gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            newCapacity =
hugeCapacity(minCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // minCapacity is usually
close to size, so this is a win:</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        elementData =
Arrays.copyOf(elementData, newCapacity);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static int
hugeCapacity(int minCapacity) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (minCapacity &lt;
0) // overflow</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
OutOfMemoryError();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (minCapacity
&gt; MAX_ARRAY_SIZE) ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Integer.MAX_VALUE :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            MAX_ARRAY_SIZE;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347144"></a><a
name="_Toc128347410"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.11
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.Map</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.Map</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Map&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean isEmpty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
containsKey(Object key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
containsValue(Object value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    V get(Object key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    V put(K key, V value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    V remove(Object key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void putAll(Map&lt;?
extends K, ? extends V&gt; m);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Set&lt;K&gt; keySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Collection&lt;V&gt;
values();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Set&lt;Map.Entry&lt;K,
V&gt;&gt; entrySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  </span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean equals(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V
getOrDefault(Object key, V defaultValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (((v =
get(key)) != null) || containsKey(key))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            ? v</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            : defaultValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default void
forEach(BiConsumer&lt;? super K, ? super V&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(action);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (Map.Entry&lt;K,
V&gt; entry : entrySet()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            K k;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                k =
entry.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                v =
entry.getValue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }
catch(IllegalStateException ise) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // this
usually means the entry is no longer in the map.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException(ise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            action.accept(k,
v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default void
replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(function);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        for (Map.Entry&lt;K,
V&gt; entry : entrySet()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            K k;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                k =
entry.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                v =
entry.getValue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }
catch(IllegalStateException ise) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // this
usually means the entry is no longer in the map.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException(ise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // ise thrown
from function is not a cme.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            v =
function.apply(k, v);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
entry.setValue(v);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }
catch(IllegalStateException ise) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // this
usually means the entry is no longer in the map.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
ConcurrentModificationException(ise);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V putIfAbsent(K
key, V value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V v = get(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (v == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            v = put(key,
value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default boolean
remove(Object key, Object value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object curValue =
get(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(!Objects.equals(curValue, value) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            (curValue ==
null &amp;&amp; !containsKey(key))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        remove(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default boolean
replace(K key, V oldValue, V newValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Object curValue =
get(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if
(!Objects.equals(curValue, oldValue) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            (curValue ==
null &amp;&amp; !containsKey(key))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        put(key, newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V replace(K key,
V value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V curValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (((curValue =
get(key)) != null) || containsKey(key)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            curValue =
put(key, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return curValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V
computeIfAbsent(K key,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Function&lt;?
super K, ? extends V&gt; mappingFunction) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(mappingFunction);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((v = get(key))
== null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((newValue =
mappingFunction.apply(key)) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                put(key,
newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return v;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V
computeIfPresent(K key,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            BiFunction&lt;?
super K, ? super V, ? extends V&gt; remappingFunction) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(remappingFunction);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V oldValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((oldValue =
get(key)) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V newValue =
remappingFunction.apply(key, oldValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (newValue !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                put(key,
newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                remove(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V compute(K key,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            BiFunction&lt;?
super K, ? super V, ? extends V&gt; remappingFunction) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(remappingFunction);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V oldValue =
get(key);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V newValue =
remappingFunction.apply(key, oldValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (newValue ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // delete
mapping</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (oldValue !=
null || containsKey(key)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // something
to remove</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                remove(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                // nothing
to do. Leave things as they were.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // add or
replace old mapping</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            put(key,
newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default V merge(K key, V
value,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            BiFunction&lt;?
super V, ? super V, ? extends V&gt; remappingFunction) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(remappingFunction);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Objects.requireNonNull(value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V oldValue =
get(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V newValue =
(oldValue == null) ? value :</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                  
remappingFunction.apply(oldValue, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if(newValue == null)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            remove(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            put(key,
newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347411"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.11.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>Entry</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.Map.Entry</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>interface
Entry&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        K getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V getValue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V setValue(V value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean
equals(Object o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public static &lt;K
extends Comparable&lt;? super K&gt;, V&gt;
Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByKey() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (c1, c2)
-&gt; c1.getKey().compareTo(c2.getKey());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public static &lt;K,
V extends Comparable&lt;? super V&gt;&gt;
Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByValue() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (c1, c2)
-&gt; c1.getValue().compareTo(c2.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public static &lt;K,
V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByKey(Comparator&lt;?
super K&gt; cmp) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Objects.requireNonNull(cmp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (c1, c2)
-&gt; cmp.compare(c1.getKey(), c2.getKey());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public static &lt;K,
V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByValue(Comparator&lt;?
super V&gt; cmp) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Objects.requireNonNull(cmp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
(Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (c1, c2)
-&gt; cmp.compare(c1.getValue(), c2.getValue());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347145"></a><a
name="_Toc128347412"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.12
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
AbstractMap</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. AbstractMap</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean
containsKey(Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (key==null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(i.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; e = i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(e.getKey()==null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(i.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; e = i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(key.equals(e.getKey()))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public boolean
containsValue(Object value) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (value==null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(i.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; e = i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(e.getValue()==null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while
(i.hasNext()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; e = i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(value.equals(e.getValue()))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public int hashCode() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int h = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (i.hasNext())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            h +=
i.next().hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347146"></a><a
name="_Toc128347413"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.13
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
SortedMap</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. SortedMap</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
SortedMap&lt;K,V&gt; extends Map&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Comparator&lt;? super
K&gt; comparator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
subMap(K fromKey, K toKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
headMap(K toKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
tailMap(K fromKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K firstKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K lastKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Set&lt;K&gt; keySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Collection&lt;V&gt;
values();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Set&lt;Map.Entry&lt;K,
V&gt;&gt; entrySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347147"></a><a
name="_Toc128347414"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.14
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
NavigableMap</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. NavigableMap</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
NavigableMap&lt;K,V&gt; extends SortedMap&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
lowerEntry(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K lowerKey(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt; floorEntry(K
key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K floorKey(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
ceilingEntry(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K ceilingKey(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
higherEntry(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    K higherKey(K key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
firstEntry();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
lastEntry();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt; pollFirstEntry();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Map.Entry&lt;K,V&gt;
pollLastEntry();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableMap&lt;K,V&gt;
descendingMap();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableSet&lt;K&gt;
navigableKeySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableSet&lt;K&gt;
descendingKeySet();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableMap&lt;K,V&gt;
subMap(K fromKey, boolean fromInclusive,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                             K
toKey,   boolean toInclusive);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableMap&lt;K,V&gt;
headMap(K toKey, boolean inclusive);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    NavigableMap&lt;K,V&gt;
tailMap(K fromKey, boolean inclusive);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
subMap(K fromKey, K toKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
headMap(K toKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    SortedMap&lt;K,V&gt;
tailMap(K fromKey);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347148"></a><a
name="_Toc128347415"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.15
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.HashMap</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
Map&lt;K,V&gt;, Cloneable, Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public V put(K key, V value)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
putVal(hash(key), key, value, false, true);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final V putVal(int hash,
K key, V value, boolean onlyIfAbsent,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   boolean
evict) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;K,V&gt;[]
tab; Node&lt;K,V&gt; p; int n, i;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((tab = table) ==
null || (n = tab.length) == 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            n = (tab = resize()).length;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((p = tab[i = (n
- 1) &amp; hash]) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            tab[i] =
newNode(hash, key, value, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;K,V&gt;
e; K k;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (p.hash ==
hash &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ((k = p.key)
== key || (key != null &amp;&amp; key.equals(k))))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                e = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else if (p
instanceof TreeNode)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                e =
((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int
binCount = 0; ; ++binCount) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if ((e =
p.next) == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
p.next = newNode(hash, key, value, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
treeifyBin(tab, hash);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(e.hash == hash &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        ((k
= e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (e != null) {
// existing mapping for key</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                V oldValue =
e.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(!onlyIfAbsent || oldValue == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    e.value
= value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
afterNodeAccess(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return oldValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        ++modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (++size &gt;
threshold)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            resize();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
afterNodeInsertion(evict);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public V get(Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;K,V&gt; e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (e =
getNode(hash(key), key)) == null ? null : e.value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final Node&lt;K,V&gt;
getNode(int hash, Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;K,V&gt;[]
tab; Node&lt;K,V&gt; first, e; int n; K k;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if ((tab = table) !=
null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            (first = tab[(n
- 1) &amp; hash]) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (first.hash
== hash &amp;&amp; // always check first node</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                ((k =
first.key) == key || (key != null &amp;&amp; key.equals(k))))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
first;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((e =
first.next) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (first
instanceof TreeNode)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(e.hash == hash &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        ((k
= e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        return
e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } while ((e
= e.next) != null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap</span><span
style='font-family:宋体;color:black;background:white'>超过</span><span lang=EN-US
style='color:black;background:white'>8</span><span style='font-family:宋体;
color:black;background:white'>个时候扩容为红黑树</span><span lang=EN-US
style='font-size:14.0pt;line-height:150%;font-family:Consolas;color:black;
background:#D4D4D4'>treeifyBin</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'> </span><span lang=EN-US style='color:black'> final void
treeifyBin(Node&lt;K,V&gt;[] tab, int hash) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int n, index;
Node&lt;K,V&gt; e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (tab == null ||
(n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            resize();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else if ((e =
tab[index = (n - 1) &amp; hash]) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; hd = null, tl = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                TreeNode&lt;K,V&gt;
p = replacementTreeNode(e, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (tl ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    hd = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p.prev =
tl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    tl.next
= p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tl = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } while ((e =
e.next) != null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if ((tab[index]
= hd) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
hd.treeify(tab);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US><img width=970
height=465 id="图片 1" src="java.files/image002.jpg"></span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347416"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.15.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>KeySet</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap.KeySet</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>   </span><span lang=EN-US style='color:black'>final class KeySet
extends AbstractSet&lt;K&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final int
size()                 { return size; }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final void
clear()               { HashMap.this.clear(); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final
Iterator&lt;K&gt; iterator()     { return new KeyIterator(); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final boolean
contains(Object o) { return containsKey(o); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final boolean
remove(Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
removeNode(hash(key), key, null, false, true) != null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final
Spliterator&lt;K&gt; spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
KeySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final void
forEach(Consumer&lt;? super K&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Node&lt;K,V&gt;[] tab;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (action ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (size &gt; 0
&amp;&amp; (tab = table) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int mc =
modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int i =
0; i &lt; tab.length; ++i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    for
(Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
action.accept(e.key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (modCount
!= mc)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347417"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.15.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>EntrySet</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap. EntrySet</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>final class EntrySet extends
AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final int
size()                 { return size; }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final void
clear()               { HashMap.this.clear(); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final
Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
EntryIterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final boolean
contains(Object o) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (!(o
instanceof Map.Entry))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Object key =
e.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;K,V&gt;
candidate = getNode(hash(key), key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return candidate
!= null &amp;&amp; candidate.equals(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final boolean
remove(Object o) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (o instanceof
Map.Entry) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                Object key =
e.getKey();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                Object value
= e.getValue();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
removeNode(hash(key), key, value, true, true) != null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final
Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return new
EntrySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final void
forEach(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
Node&lt;K,V&gt;[] tab;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (action ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (size &gt; 0
&amp;&amp; (tab = table) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int mc =
modCount;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                for (int i =
0; i &lt; tab.length; ++i) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    for
(Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        action.accept(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (modCount
!= mc)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new ConcurrentModificationException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347418"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.15.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>Node</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap. Node</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>static class Node&lt;K,V&gt;
implements Map.Entry&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final int hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final K key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        V value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node&lt;K,V&gt;
next;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node(int hash, K
key, V value, Node&lt;K,V&gt; next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.hash =
hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.key = key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.value =
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.next =
next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final K
getKey()        { return key; }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final V
getValue()      { return value; }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final String
toString() { return key + &quot;=&quot; + value; }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final int hashCode()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
Objects.hashCode(key) ^ Objects.hashCode(value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final V
setValue(V newValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            V oldValue =
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            value =
newValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return oldValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        public final boolean
equals(Object o) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (o == this)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (o instanceof
Map.Entry) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(Objects.equals(key, e.getKey()) &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
Objects.equals(value, e.getValue()))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347419"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.15.4 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>TreeNode</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashMap. TreeNode</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black;background:#E8F2FE'>   </span><span lang=EN-US style='color:black'>static
final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TreeNode&lt;K,V&gt;
parent;  // red-black tree links</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TreeNode&lt;K,V&gt;
left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TreeNode&lt;K,V&gt;
right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TreeNode&lt;K,V&gt;
prev;    // needed to unlink next upon deletion</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean red;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        TreeNode(int hash, K
key, V val, Node&lt;K,V&gt; next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            super(hash, key,
val, next);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Returns root of
tree containing this node.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
TreeNode&lt;K,V&gt; root() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(TreeNode&lt;K,V&gt; r = this, p;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((p =
r.parent) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                r = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Ensures that the
given root is the first node of its bin.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (root != null
&amp;&amp; tab != null &amp;&amp; (n = tab.length) &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int index =
(n - 1) &amp; root.hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (root !=
first) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
Node&lt;K,V&gt; rn;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
tab[index] = root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
TreeNode&lt;K,V&gt; rp = root.prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if ((rn
= root.next) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
((TreeNode&lt;K,V&gt;)rn).prev = rp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (rp
!= null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
rp.next = rn;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(first != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
first.prev = root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
root.next = first;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
root.prev = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                assert
checkInvariants(root);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
TreeNode&lt;K,V&gt; find(int h, Object k, Class&lt;?&gt; kc) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; p = this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int ph, dir;
K pk;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((ph =
p.hash) &gt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = pl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (ph
&lt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = pr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((pk
= p.key) == k || (k != null &amp;&amp; k.equals(pk)))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (pl
== null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = pr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (pr
== null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = pl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((kc
!= null ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                         
(kc = comparableClassFor(k)) != null) &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
(dir = compareComparables(kc, k, pk)) != 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = (dir
&lt; 0) ? pl : pr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((q
= pr.find(h, k, kc)) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
q;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p = pl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } while (p !=
null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Calls find for
root node.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
TreeNode&lt;K,V&gt; getTreeNode(int h, Object k) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return ((parent
!= null) ? root() : this).find(h, k, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static int
tieBreakOrder(Object a, Object b) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int d;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (a == null ||
b == null ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                (d =
a.getClass().getName().</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                
compareTo(b.getClass().getName())) == 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                d = (System.identityHashCode(a)
&lt;= System.identityHashCode(b) ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                     -1 :
1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return d;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final void
treeify(Node&lt;K,V&gt;[] tab) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; root = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                next =
(TreeNode&lt;K,V&gt;)x.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                x.left =
x.right = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (root ==
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.parent
= null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.red =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    root =
x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    K k =
x.key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    int h =
x.hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
Class&lt;?&gt; kc = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    for
(TreeNode&lt;K,V&gt; p = root;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        int
dir, ph;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        K pk
= p.key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
((ph = p.hash) &gt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
dir = -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else
if (ph &lt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
dir = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else
if ((kc == null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                 
(kc = comparableClassFor(k)) == null) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                
(dir = compareComparables(kc, k, pk)) == 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
dir = tieBreakOrder(k, pk);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
TreeNode&lt;K,V&gt; xp = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
((p = (dir &lt;= 0) ? p.left : p.right) == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
x.parent = xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (dir &lt;= 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xp.left = x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                xp.right
= x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
root = balanceInsertion(root, x);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
break;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
moveRootToFront(tab, root);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
Node&lt;K,V&gt; untreeify(HashMap&lt;K,V&gt; map) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node&lt;K,V&gt;
hd = null, tl = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Node&lt;K,V&gt; q = this; q != null; q = q.next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Node&lt;K,V&gt; p = map.replacementNode(q, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (tl ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    hd = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    tl.next
= p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tl = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return hd;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final
TreeNode&lt;K,V&gt; putTreeVal(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                 
     int h, K k, V v) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Class&lt;?&gt;
kc = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean searched
= false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; root = (parent != null) ? root() : this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(TreeNode&lt;K,V&gt; p = root;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int dir, ph;
K pk;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((ph =
p.hash) &gt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    dir =
-1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (ph
&lt; h)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    dir = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((pk
= p.key) == k || (k != null &amp;&amp; k.equals(pk)))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((kc
== null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                         
(kc = comparableClassFor(k)) == null) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        
(dir = compareComparables(kc, k, pk)) == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(!searched) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
TreeNode&lt;K,V&gt; q, ch;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        searched
= true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(((ch = p.left) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            
(q = ch.find(h, k, kc)) != null) ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
((ch = p.right) != null &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            
(q = ch.find(h, k, kc)) != null))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
return q;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    dir =
tieBreakOrder(k, pk);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; xp = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((p =
(dir &lt;= 0) ? p.left : p.right) == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    Node&lt;K,V&gt;
xpn = xp.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (dir
&lt;= 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xp.left = x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xp.right = x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    xp.next
= x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.parent
= x.prev = xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (xpn
!= null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
((TreeNode&lt;K,V&gt;)xpn).prev = x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
moveRootToFront(tab, balanceInsertion(root, x));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final void
removeTreeNode(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                 
boolean movable) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int n;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tab == null
|| (n = tab.length) == 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int index = (n -
1) &amp; hash;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pred ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tab[index] =
first = succ;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pred.next =
succ;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (succ !=
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                succ.prev =
pred;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (first ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (root.parent
!= null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                root =
root.root();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (root == null</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                || (movable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
&amp;&amp; (root.right == null</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        ||
(rl = root.left) == null</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        ||
rl.left == null))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tab[index] =
first.untreeify(map);  // too small</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; p = this, pl = left, pr = right, replacement;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (pl != null
&amp;&amp; pr != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; s = pr, sl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                while ((sl =
s.left) != null) // find successor</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s = sl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                boolean c =
s.red; s.red = p.red; p.red = c; // swap colors</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; sr = s.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; pp = p.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (s == pr)
{ // p was s's direct parent</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p.parent
= s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s.right
= p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
TreeNode&lt;K,V&gt; sp = s.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((p.parent = sp) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(s == sp.left)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
sp.left = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
sp.right = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((s.right = pr) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
pr.parent = s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p.left =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((p.right
= sr) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
sr.parent = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((s.left
= pl) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
pl.parent = s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
((s.parent = pp) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    root =
s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (p
== pp.left)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.left
= s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.right
= s;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (sr !=
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
replacement = sr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
replacement = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else if (pl !=
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                replacement
= pl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else if (pr !=
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                replacement
= pr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                replacement =
p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (replacement
!= p) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pp ==
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    root =
replacement;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (p
== pp.left)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.left
= replacement;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.right
= replacement;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p.left =
p.right = p.parent = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (replacement
== p) {  // detach</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
TreeNode&lt;K,V&gt; pp = p.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p.parent =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (pp !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (p ==
pp.left)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
pp.left = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else if
(p == pp.right)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
pp.right = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (movable)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
moveRootToFront(tab, r);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final void
split(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int index, int bit) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; b = this;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            // Relink into
lo and hi lists, preserving order</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; loHead = null, loTail = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; hiHead = null, hiTail = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int lc = 0, hc =
0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(TreeNode&lt;K,V&gt; e = b, next; e != null; e = next) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                next =
(TreeNode&lt;K,V&gt;)e.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                e.next =
null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((e.hash
&amp; bit) == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((e.prev = loTail) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        loHead
= e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
loTail.next = e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    loTail =
e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    ++lc;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((e.prev = hiTail) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        hiHead
= e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
hiTail.next = e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    hiTail =
e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    ++hc;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (loHead !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (lc &lt;=
UNTREEIFY_THRESHOLD)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    tab[index]
= loHead.untreeify(map);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
tab[index] = loHead;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(hiHead != null) // (else is already treeified)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
loHead.treeify(tab);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (hiHead !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (hc &lt;=
UNTREEIFY_THRESHOLD)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
tab[index + bit] = hiHead.untreeify(map);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
tab[index + bit] = hiHead;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
(loHead != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
hiHead.treeify(tab);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /*
------------------------------------------------------------ */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Red-black tree
methods, all adapted from CLR</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
TreeNode&lt;K,V&gt; rotateLeft(TreeNode&lt;K,V&gt; root,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                             
TreeNode&lt;K,V&gt; p) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; r, pp, rl;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (p != null
&amp;&amp; (r = p.right) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((rl =
p.right = r.left) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    rl.parent
= p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((pp =
r.parent = p.parent) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    (root =
r).red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if
(pp.left == p)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.left
= r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.right
= r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                r.left = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p.parent =
r;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
TreeNode&lt;K,V&gt; rotateRight(TreeNode&lt;K,V&gt; root,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                              
TreeNode&lt;K,V&gt; p) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; l, pp, lr;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (p != null
&amp;&amp; (l = p.left) != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((lr =
p.left = l.right) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
lr.parent = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((pp =
l.parent = p.parent) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    (root =
l).red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if
(pp.right == p)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.right
= l;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    pp.left
= l;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                l.right = p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p.parent =
l;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                                   
TreeNode&lt;K,V&gt; x) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            x.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (TreeNode&lt;K,V&gt;
xp, xpp, xppl, xppr;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if ((xp =
x.parent) == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.red =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if
(!xp.red || (xpp = xp.parent) == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (xp ==
(xppl = xpp.left)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if
((xppr = xpp.right) != null &amp;&amp; xppr.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xppr.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xp.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        xpp.red
= true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
xpp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(x == xp.right) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
root = rotateLeft(root, x = xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xpp = (xp = x.parent) == null ? null : xp.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(xp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xp.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (xpp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpp.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                root
= rotateRight(root, xpp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (xppl
!= null &amp;&amp; xppl.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xppl.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        xp.red
= false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xpp.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
xpp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(x == xp.left) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
root = rotateRight(root, x = xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xpp = (xp = x.parent) == null ? null : xp.parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(xp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xp.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                            if
(xpp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpp.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
root = rotateLeft(root, xpp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
TreeNode&lt;K,V&gt; balanceDeletion(TreeNode&lt;K,V&gt; root,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                                  
TreeNode&lt;K,V&gt; x) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(TreeNode&lt;K,V&gt; xp, xpl, xpr;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (x ==
null || x == root)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if ((xp
= x.parent) == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.red =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
x;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if
(x.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x.red =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if
((xpl = xp.left) == x) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if ((xpr
= xp.right) != null &amp;&amp; xpr.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xpr.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xp.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        root
= rotateLeft(root, xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        xpr
= (xp = x.parent) == null ? null : xp.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (xpr
== null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        TreeNode&lt;K,V&gt;
sl = xpr.left, sr = xpr.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
((sr == null || !sr.red) &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
(sl == null || !sl.red)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xpr.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
x = xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (sr == null || !sr.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
if (sl != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
sl.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpr.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                root
= rotateRight(root, xpr);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpr = (xp = x.parent) == null ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
null : xp.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (xpr != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpr.red = (xp == null) ? false : xp.red;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
if ((sr = xpr.right) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
sr.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (xp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xp.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
root = rotateLeft(root, xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
x = root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else { //
symmetric</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (xpl
!= null &amp;&amp; xpl.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xpl.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
xp.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        root
= rotateRight(root, xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        xpl
= (xp = x.parent) == null ? null : xp.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (xpl
== null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
((sl == null || !sl.red) &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
(sr == null || !sr.red)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
xpl.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
x = xp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (sl == null || !sl.red) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
if (sr != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
sr.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpl.red = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
root = rotateLeft(root, xpl);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpl = (xp = x.parent) == null ?</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
null : xp.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (xpl != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xpl.red = (xp == null) ? false : xp.red;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
if ((sl = xpl.left) != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                                   
sl.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
if (xp != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
xp.red = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                               
root = rotateRight(root, xp);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
x = root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        /**</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         * Recursive invariant
check</span></p>

<p class=COR-><span lang=EN-US style='color:black'>         */</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static &lt;K,V&gt;
boolean checkInvariants(TreeNode&lt;K,V&gt; t) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                tb = t.prev,
tn = (TreeNode&lt;K,V&gt;)t.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tb != null
&amp;&amp; tb.next != t)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tn != null
&amp;&amp; tn.prev != t)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tp != null
&amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tl != null
&amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tr != null
&amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (t.red
&amp;&amp; tl != null &amp;&amp; tl.red &amp;&amp; tr != null &amp;&amp;
tr.red)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tl != null
&amp;&amp; !checkInvariants(tl))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (tr != null
&amp;&amp; !checkInvariants(tr))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US
style='font-size:14.0pt;font-family:Consolas;color:black'>    </span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347149"></a><a
name="_Toc128347420"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.16
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.TreeMap</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. TreeMap</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
TreeMap&lt;K,V&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractMap&lt;K,V&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
Comparator&lt;? super K&gt; comparator;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
Entry&lt;K,V&gt; root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public V get(Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Entry&lt;K,V&gt; p =
getEntry(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return (p==null ?
null : p.value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final Entry&lt;K,V&gt;
getEntry(Object key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Offload
comparator-based version for sake of performance</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (comparator !=
null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
getEntryUsingComparator(key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (key == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Comparable&lt;?
super K&gt; k = (Comparable&lt;? super K&gt;) key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Entry&lt;K,V&gt; p =
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (p != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int cmp =
k.compareTo(p.key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (cmp &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p = p.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else if (cmp
&gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                p = p.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   final Entry&lt;K,V&gt; getEntryUsingComparator(Object
key) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            K k = (K) key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Comparator&lt;?
super K&gt; cpr = comparator;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (cpr != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Entry&lt;K,V&gt;
p = root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            while (p !=
null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int cmp =
cpr.compare(k, p.key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (cmp &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p =
p.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (cmp
&gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p =
p.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public V put(K key, V value)
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Entry&lt;K,V&gt; t =
root;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (t == null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            compare(key,
key); // type (and possibly null) check</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            root = new
Entry&lt;&gt;(key, value, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            size = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int cmp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Entry&lt;K,V&gt;
parent;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // split comparator
and comparable paths</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Comparator&lt;?
super K&gt; cpr = comparator;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (cpr != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                parent = t;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                cmp =
cpr.compare(key, t.key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (cmp &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    t =
t.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (cmp
&gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    t =
t.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
t.setValue(value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } while (t !=
null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (key == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            do {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                parent = t;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                cmp =
k.compareTo(t.key);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (cmp &lt;
0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    t =
t.left;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else if (cmp
&gt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    t =
t.right;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
t.setValue(value);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } while (t !=
null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Entry&lt;K,V&gt; e =
new Entry&lt;&gt;(key, value, parent);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (cmp &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            parent.left = e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            parent.right = e;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
fixAfterInsertion(e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        size++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        modCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void
fixAfterInsertion(Entry&lt;K,V&gt; x) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        x.color = RED;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (x != null
&amp;&amp; x != root &amp;&amp; x.parent.color == RED) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (parentOf(x)
== leftOf(parentOf(parentOf(x)))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(colorOf(y) == RED) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(x), BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(y, BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    setColor(parentOf(parentOf(x)),
RED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x =
parentOf(parentOf(x));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (x ==
rightOf(parentOf(x))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
parentOf(x);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
rotateLeft(x);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(x), BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(parentOf(x)), RED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
rotateRight(parentOf(parentOf(x)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(colorOf(y) == RED) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(x), BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(y, BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(parentOf(x)), RED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    x =
parentOf(parentOf(x));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (x ==
leftOf(parentOf(x))) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        x =
parentOf(x);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
rotateRight(x);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setColor(parentOf(x), BLACK);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    setColor(parentOf(parentOf(x)),
RED);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
rotateLeft(parentOf(parentOf(x)));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        root.color = BLACK;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal style='text-indent:28.8pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347150"></a><a
name="_Toc128347421"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.17
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Java.util.Set</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util.Set</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface
Set&lt;E&gt; extends Collection&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int size();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean isEmpty();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean contains(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Iterator&lt;E&gt;
iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Object[] toArray();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    &lt;T&gt; T[]
toArray(T[] a);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean add(E e);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean remove(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
containsAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
addAll(Collection&lt;? extends E&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
retainAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean
removeAll(Collection&lt;?&gt; c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void clear();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean equals(Object
o);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    int hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    @Override</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    default
Spliterator&lt;E&gt; spliterator() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
Spliterators.spliterator(this, Spliterator.DISTINCT);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347151"></a><a
name="_Toc128347422"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.18
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
AbstractSet</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. AbstractSet</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractSet&lt;E&gt; extends AbstractCollection&lt;E&gt; implements
Set&lt;E&gt; {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public boolean equals(Object
o) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (o == this)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!(o instanceof
Set))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Collection&lt;?&gt;
c = (Collection&lt;?&gt;) o;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (c.size() !=
size())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return containsAll(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(ClassCastException unused)   {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch
(NullPointerException unused) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public int hashCode() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int h = 0;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Iterator&lt;E&gt; i
= iterator();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        while (i.hasNext())
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            E obj =
i.next();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (obj != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                h +=
obj.hashCode();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return h;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean
removeAll(Collection&lt;?&gt; c) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Objects.requireNonNull(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean modified =
false;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (size() &gt;
c.size()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Iterator&lt;?&gt; i = c.iterator(); i.hasNext(); )</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                modified |=
remove(i.next());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for
(Iterator&lt;?&gt; i = iterator(); i.hasNext(); ) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(c.contains(i.next())) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
i.remove();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    modified
= true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return modified;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347152"></a><a
name="_Toc128347423"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.19
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
HashSet</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. HashSet</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
HashSet&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractSet&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements Set&lt;E&gt;,
Cloneable, java.io.Serializable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static final long
serialVersionUID = -5024744406713321676L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
HashMap&lt;E,Object&gt; map;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Object PRESENT = new Object();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public HashSet() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        map = new
HashMap&lt;&gt;();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean add(E e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return map.put(e,
PRESENT)==null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347153"></a><a
name="_Toc128347424"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.20
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.
TreeSet</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util. TreeSet</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
NavigableSet&lt;E&gt;, Cloneable, java.io.Serializable</span></p>

<p class=COR-><span lang=EN-US style='color:black'>{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
NavigableMap&lt;E,Object&gt; m;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    // Dummy value to
associate with an Object in the backing Map</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Object PRESENT = new Object();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    TreeSet(NavigableMap&lt;E,Object&gt;
m) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this.m = m;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public TreeSet() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(new
TreeMap&lt;E,Object&gt;());</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public boolean add(E e) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return m.put(e,
PRESENT)==null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347154"></a><a
name="_Toc128347425"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.21
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>Java.util.
ServiceLoader</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Java.util. ServiceLoader</span><span
style='font-family:宋体;color:black;background:white'>主要方法</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h3 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347155"></a><a
name="_Toc128347426"><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>6.22
</span><span lang=EN-US style='font-size:12.0pt;font-family:"Calibri",sans-serif'>java.util.concurrent</span></a></h3>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347427"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.1 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
Semaphore</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. Semaphore</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class Semaphore
implements java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = -3222578661600680210L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private final Sync sync;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public void acquire()
throws InterruptedException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
sync.acquireSharedInterruptibly(1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public void release() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
sync.releaseShared(1);</span></p>

<p class=COR-><span lang=EN-US style='color:black'> }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='line-height:
156%;font-family:-apple-system;color:#4D4D4D'>6.22.1.1 </span><span lang=EN-US
style='line-height:156%;font-family:-apple-system;color:#4D4D4D;background:
white'>  <a name="_Toc128347428">java.util.concurrent. Semaphore. FairSync</a></span></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>  java.util.concurrent.
Semaphore. FairSync</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  protected int
tryAcquireShared(int acquires) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(hasQueuedPredecessors())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
-1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
available = getState();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
remaining = available - acquires;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(remaining &lt; 0 ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
compareAndSetState(available, remaining))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
remaining;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>     }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><span lang=EN-US style='line-height:
156%;font-family:-apple-system;color:#4D4D4D'>6.22.1.2 </span><span lang=EN-US
style='line-height:156%;font-family:-apple-system;color:#4D4D4D;background:
white'>  <a name="_Toc128347429">java.util.concurrent. Semaphore. NonfairSync</a></span></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>  java.util.concurrent.
Semaphore.NonfairSync</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   final int
nonfairTryAcquireShared(int acquires) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
available = getState();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int
remaining = available - acquires;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(remaining &lt; 0 ||</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
compareAndSetState(available, remaining))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
remaining;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoBodyTextFirstIndent style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347430"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.2 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
CyclicBarrier</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. CyclicBarrier</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347431"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.3 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
CountDownLatch</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. CountDownLatch</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347432"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.4 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
Executor</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. Executor</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347433"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.5 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
Executors</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. Executors</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347434"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.6 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
AbstractExecutorService</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. AbstractExecutorService</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347435"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.7 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
Future</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. Future</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347436"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.8 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
ForkJoinTask</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. ForkJoinTask</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347437"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.9 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.
ForkJoinPool</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent. ForkJoinPool</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347438"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.10 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.locks</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347439"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.10.1 </span><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D;
background:white'>java.util.concurrent.locks</span></a><span lang=EN-US
style='font-family:-apple-system;color:#4D4D4D;background:white'>.lock</span></h5>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks.lock</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Lock {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void lock();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void lockInterruptibly()
throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean tryLock();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean tryLock(long
time, TimeUnit unit) throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void unlock();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    Condition
newCondition();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347440"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.2
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks. LockSupport</span></a></h5>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks.
LockSupport</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class LockSupport {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
sun.misc.Unsafe UNSAFE;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private LockSupport() {} //
Cannot be instantiated.</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public static void
park(Object blocker) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Thread t = Thread.currentThread();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        setBlocker(t,
blocker);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        UNSAFE.park(false,
0L);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        setBlocker(t, null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  public static void
unpark(Thread thread) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (thread != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
UNSAFE.unpark(thread);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;text-indent:28.8pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347441"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.3
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks.
AbstractOwnableSynchronizer</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. AbstractOwnableSynchronizer
</span><span style='font-family:宋体;color:black;background:white'>中</span><span
lang=EN-US style='color:black;background:white'>exclusiveOwnerThread</span><span
style='font-family:宋体;color:black;background:white'>重入线程</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractOwnableSynchronizer</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = 3737899427754241961L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected
AbstractOwnableSynchronizer() { }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient Thread
exclusiveOwnerThread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected final void
setExclusiveOwnerThread(Thread thread) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        exclusiveOwnerThread
= thread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    protected final Thread
getExclusiveOwnerThread() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
exclusiveOwnerThread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;text-indent:28.8pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347442"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.4
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks.
AbstractQueuedSynchronizer</span></a></h5>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. AbstractQueuedSynchronizer</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public abstract class
AbstractQueuedSynchronizer</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    extends
AbstractOwnableSynchronizer</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    implements
java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = 7373984972572414691L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>protected AbstractQueuedSynchronizer()
{ }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
volatile Node head;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private transient
volatile Node tail;</span></p>

<p class=COR-><span lang=EN-US style='color:black'> private volatile int state;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public final void
acquire(int arg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (!tryAcquire(arg)
&amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            selfInterrupt();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final boolean
acquireQueued(final Node node, int arg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        boolean failed =
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean
interrupted = false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                final Node p
= node.predecessor();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (p ==
head &amp;&amp; tryAcquire(arg)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setHead(node);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    p.next =
null; // help GC</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    failed =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
interrupted;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
parkAndCheckInterrupt())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
interrupted = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } finally {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (failed)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
cancelAcquire(node);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private Node addWaiter(Node
mode) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node node = new
Node(Thread.currentThread(), mode);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        // Try the fast path
of enq; backup to full enq on failure</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node pred = tail;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (pred != null) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            node.prev =
pred;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(compareAndSetTail(pred, node)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                pred.next =
node;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return node;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        enq(node);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return node;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   static void
selfInterrupt() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>       
Thread.currentThread().interrupt();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final boolean
release(int arg) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (tryRelease(arg))
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node h = head;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (h != null
&amp;&amp; h.waitStatus != 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
unparkSuccessor(h);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>private void
unparkSuccessor(Node node) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        int ws =
node.waitStatus;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (ws &lt; 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
compareAndSetWaitStatus(node, ws, 0);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node s = node.next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (s == null ||
s.waitStatus &gt; 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            s = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (Node t =
tail; t != null &amp;&amp; t != node; t = t.prev)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(t.waitStatus &lt;= 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    s = t;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        if (s != null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
LockSupport.unpark(s.thread);</span></p>

<p class=COR-><span lang=EN-US style='color:black'> }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. AbstractQueuedSynchronizer.Node</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'><img width=512 height=65 id="图片 4"
src="java.files/image003.gif"></span></p>

<p class=COR-><span lang=EN-US style='font-size:14.0pt;font-family:Consolas;
color:black'>  </span><span lang=EN-US style='color:black'>static final class
Node {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final Node
SHARED = new Node();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final Node
EXCLUSIVE = null;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
CANCELLED =  1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
SIGNAL    = -1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
CONDITION = -2;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        static final int
PROPAGATE = -3;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile int
waitStatus;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Node prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Node next;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        volatile Thread
thread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node nextWaiter;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final boolean
isShared() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return
nextWaiter == SHARED;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final Node
predecessor() throws NullPointerException {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Node p = prev;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (p == null)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
NullPointerException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return p;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node() {    // Used
to establish initial head or SHARED marker</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node(Thread thread,
Node mode) {     // Used by addWaiter</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.nextWaiter
= mode;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.thread =
thread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        Node(Thread thread,
int waitStatus) { // Used by Condition</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.waitStatus
= waitStatus;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            this.thread =
thread;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347443"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.5
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks. ReentrantLock</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. ReentrantLock
</span><span style='font-family:宋体;color:black;background:white'>重入锁</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class ReentrantLock
implements Lock, java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = 7373984872572414699L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final Sync sync;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    abstract static class
Sync extends AbstractQueuedSynchronizer {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        private static final
long serialVersionUID = -5179523762034025860L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        abstract void
lock();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        final boolean
nonfairTryAcquire(int acquires) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            final Thread current
= Thread.currentThread();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int c =
getState();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (c == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(compareAndSetState(0, acquires)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
setExclusiveOwnerThread(current);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            else if (current
== getExclusiveOwnerThread()) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int nextc =
c + acquires;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (nextc
&lt; 0) // overflow</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new Error(&quot;Maximum lock count exceeded&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                setState(nextc);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        protected final
boolean tryRelease(int releases) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int c =
getState() - releases;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(Thread.currentThread() != getExclusiveOwnerThread())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                throw new
IllegalMonitorStateException();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            boolean free =
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (c == 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                free = true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
setExclusiveOwnerThread(null);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            setState(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return free;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347444"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.6
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks. Condition</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. Condition</span><span
style='font-family:宋体;color:black;background:white'>信号监听方法</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public interface Condition {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void await() throws
InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void
awaitUninterruptibly();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    long awaitNanos(long nanosTimeout)
throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean await(long time,
TimeUnit unit) throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    boolean awaitUntil(Date
deadline) throws InterruptedException;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void signal();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    void signalAll();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347445"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.10.7
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.locks.
ReentrantReadWriteLock</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. ReentrantReadWriteLock
</span><span style='font-family:宋体;color:black;background:white'>读写锁对象</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
ReentrantReadWriteLock</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        implements
ReadWriteLock, java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = -6992448646407690164L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ReentrantReadWriteLock.ReadLock readerLock;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private final
ReentrantReadWriteLock.WriteLock writerLock;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    final Sync sync;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ReentrantReadWriteLock() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        this(false);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public
ReentrantReadWriteLock(boolean fair) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        sync = fair ? new
FairSync() : new NonfairSync();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        readerLock = new
ReadLock(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        writerLock = new
WriteLock(this);</span></p>

<p class=COR-><span lang=EN-US style='color:black'> }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. ReentrantReadWriteLock.Sync
</span><span style='font-family:宋体;color:black;background:white'>读锁方法</span><span
lang=EN-US style='font-size:10.5pt;line-height:150%;font-family:"Courier New"'>tryReadLock</span></p>

<p class=COR-><span lang=EN-US style='color:black'>final boolean tryReadLock()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Thread current =
Thread.currentThread();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            for (;;) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int c =
getState();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(exclusiveCount(c) != 0 &amp;&amp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                   
getExclusiveOwnerThread() != current)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int r =
sharedCount(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (r ==
MAX_COUNT)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new Error(&quot;Maximum lock count exceeded&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if
(compareAndSetState(c, c + SHARED_UNIT)) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    if (r ==
0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        firstReader
= current;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
firstReaderHoldCount = 1;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    } else
if (firstReader == current) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
firstReaderHoldCount++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    } else {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
HoldCounter rh = cachedHoldCounter;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        if
(rh == null || rh.tid != getThreadId(current))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
cachedHoldCounter = rh = readHolds.get();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                        else
if (rh.count == 0)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                           
readHolds.set(rh);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                       
rh.count++;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.locks. ReentrantReadWriteLock.Sync
</span><span style='font-family:宋体;color:black;background:white'>写锁方法</span><span
lang=EN-US style='font-size:14.0pt;line-height:150%;font-family:Consolas;
color:black'>tryWriteLock</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>  final boolean
tryWriteLock() {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            Thread current =
Thread.currentThread();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            int c =
getState();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if (c != 0) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                int w =
exclusiveCount(c);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (w == 0
|| current != getExclusiveOwnerThread())</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                if (w ==
MAX_COUNT)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                    throw
new Error(&quot;Maximum lock count exceeded&quot;);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            if
(!compareAndSetState(c, c + 1))</span></p>

<p class=COR-><span lang=EN-US style='color:black'>                return
false;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>           
setExclusiveOwnerThread(current);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            return true;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        }</span></p>

<p style='margin-top:14.4pt;margin-right:0cm;margin-bottom:0cm;margin-left:
24.0pt;margin-bottom:.0001pt;line-height:150%'><span lang=EN-US
style='color:black;background:white'>&nbsp;</span></p>

<h4 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347446"><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D'>6.22.11 </span><span
lang=EN-US style='font-family:-apple-system;color:#4D4D4D;background:white'>java.util.concurrent.atomic</span></a></h4>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.atomic.
AtomicReference</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347447"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.11.1
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.atomic. AtomicInteger</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.atomic. AtomicInteger</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class AtomicInteger
extends Number implements java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = 6214790243416807050L;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Unsafe unsafe = Unsafe.getUnsafe();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long valueOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            valueOffset =
unsafe.objectFieldOffset</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
(AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch (Exception
ex) { throw new Error(ex); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile int
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public final int
getAndSet(int newValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
unsafe.getAndSetInt(this, valueOffset, newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final boolean
compareAndSet(int expect, int update) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<h5 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347448"><span
lang=EN-US style='line-height:156%;font-family:-apple-system;color:#4D4D4D'>6.22.11.2
</span><span lang=EN-US style='line-height:156%;font-family:-apple-system;
color:#4D4D4D;background:white'>java.util.concurrent.atomic. AtomicReference</span></a></h5>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>java.util.concurrent.atomic.
AtomicReference</span></p>

<p class=COR-><span lang=EN-US style='color:black'>public class
AtomicReference&lt;V&gt; implements java.io.Serializable {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long serialVersionUID = -1848883965231344442L;</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
Unsafe unsafe = Unsafe.getUnsafe();</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private static final
long valueOffset;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    static {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        try {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>            valueOffset =
unsafe.objectFieldOffset</span></p>

<p class=COR-><span lang=EN-US style='color:black'>               
(AtomicReference.class.getDeclaredField(&quot;value&quot;));</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        } catch (Exception
ex) { throw new Error(ex); }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    private volatile V
value;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public AtomicReference(V
initialValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        value =
initialValue;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public AtomicReference()
{</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   public final boolean
compareAndSet(V expect, V update) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
unsafe.compareAndSwapObject(this, valueOffset, expect, update);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final boolean
weakCompareAndSet(V expect, V update) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
unsafe.compareAndSwapObject(this, valueOffset, expect, update);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US style='color:black'>   
@SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    public final V
getAndSet(V newValue) {</span></p>

<p class=COR-><span lang=EN-US style='color:black'>        return
(V)unsafe.getAndSetObject(this, valueOffset, newValue);</span></p>

<p class=COR-><span lang=EN-US style='color:black'>    }</span></p>

<p class=COR-><span lang=EN-US>&nbsp;</span></p>

<p class=COR-><span lang=EN-US style='color:black'>}</span></p>

<h2 style='margin-left:0cm;text-indent:0cm'><a name="_Toc128347156"></a><a
name="_Toc128347449"><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US style='font-size:12.0pt;line-height:172%;
font-family:"Calibri",sans-serif'>References</span></a></h2>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>&nbsp;</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>Nio</span></p>

<p style='margin-top:14.4pt;text-indent:24.0pt;line-height:150%'><span
lang=EN-US style='color:black;background:white'>https://blog.csdn.net/goligu/article/details/127008749</span></p>

</div>

</body>

</html>
